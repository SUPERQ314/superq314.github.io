<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>superQ的个人小站</title>
  <icon>https://www.gravatar.com/avatar/53ec4cae8bfa9696385d334042db5c18</icon>
  <subtitle>山海无畏</subtitle>
  <link href="https://superq314.github.io/atom.xml" rel="self"/>
  
  <link href="https://superq314.github.io/"/>
  <updated>2022-09-30T12:38:51.333Z</updated>
  <id>https://superq314.github.io/</id>
  
  <author>
    <name>superQ</name>
    <email>220202090@seu.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo更新方式</title>
    <link href="https://superq314.github.io/posts/15858/"/>
    <id>https://superq314.github.io/posts/15858/</id>
    <published>2022-09-30T11:35:29.000Z</published>
    <updated>2022-09-30T12:38:51.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p>使用Butterfly主题可以根据主题的更新说明中进行操作。</p><p>引用站外地址，不保证站点的可用性和安全性<br>升级建议<br>jerryc</p><h2 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h2><p>使用cd命令进入博客根目录<br>常规操作，不做解释</p><p>更新插件和Hexo版本<br>npm update</p><h2 id="手动更新"><a href="#手动更新" class="headerlink" title="手动更新"></a>手动更新</h2><ol><li>使用cd命令进入博客根目录<br>常规操作，不做解释</li><li>检查插件更新<br>npm outdated</li><li>运行后可以检查Hexo和插件的最新版本<br><img src="/image/hexo%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F/1664537849838.png" alt="1664537849838"></li><li>更改版本文件<br>修改根目录的package.json文件，将对应插件名称所对应的版本号更改为要更新的版本号。<br><img src="/image/hexo%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F/1664537868070.png" alt="1664537868070"></li><li>开始更新<br>npm install –save</li><li>查看当前版本号<br>hexo version<br><img src="/image/hexo%E6%9B%B4%E6%96%B0%E6%96%B9%E5%BC%8F/1664537946133.png" alt="1664537946133"></li></ol><p>真实有效</p><p>升级方法：在主題目录下，进行 <code>git pull</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTP中get和post的区别</title>
    <link href="https://superq314.github.io/posts/d73b0b5a/"/>
    <id>https://superq314.github.io/posts/d73b0b5a/</id>
    <published>2022-09-28T12:15:16.000Z</published>
    <updated>2022-09-30T13:34:42.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。到这里，大家应该有个大概的了解了，GET一般用于获取&#x2F;查询资源信息，而POST一般用于更新资源信息。</p><p>1.根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</p><p>(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。</p><p>*注意：这里安全的含义仅仅是指是非修改信息。</p><p>(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p><p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。</p><p>幂等有一下几种定义：</p><p>对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)&#x3D;abs(abs(a))。</p><p>对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x)&#x3D;x。</p><p>看完上述解释后，应该可以理解GET幂等的含义了。</p><p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p><p>2.根据HTTP规范，POST表示可能修改变服务器上的资源的请求。继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。</p><p>上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：</p><p>1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。</p><p>2.对资源的增，删，改，查操作，其实都可以通过GET&#x2F;POST完成，不需要用到PUT和DELETE。</p><p>3.另外一个是，早期的WebMVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的WebMVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p><p>*简单解释一下MVC：MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p><p>以上3点典型地描述了老一套的风格（没有严格遵守HTTP规范），随着架构的发展，现在出现REST(RepresentationalStateTransfer)，一套支持HTTP规范的新风格，这里不多说了，可以参考《RESTfulWebServices》。</p><p>说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p><p>1.GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name&#x3D;hyddd&amp;password&#x3D;idontknow&amp;verify&#x3D;%E4%BD%A0%E5%A5%BD。如果数据是英文字母&#x2F;数字，原样发送，如果是空格，转换为+，如果是中文&#x2F;其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>POST把提交的数据则放置在是HTTP包的包体中。</p><p>2.”GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！</p><p>以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p><p>(1).首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p><p>注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。</p><p>(2).理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K&#x2F;100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p><p>对于ASP程序，Request对象处理每个表单域时存在100K的数据长度限制。但如果使用Request.BinaryRead则没有这个限制。</p><p>由这个延伸出去，对于IIS6.0，微软出于安全考虑，加大了限制。我们还需要注意：</p><p>1).IIS6.0默认ASPPOST数据量最大为200KB，每个表单域限制是100KB。</p><p>2).IIS6.0默认上传文件的最大大小是4MB。</p><p>3).IIS6.0默认最大请求头是16KB。</p><p>IIS6.0之前没有这些限制。</p><p>所以上面的80K，100K可能只是默认值而已(注：关于IIS4和IIS5的参数，我还没有确认)，但肯定是可以自己设置的。由于每个版本的IIS对这些参数的默认值都不一样，具体请参考相关的IIS配置文档。</p><p>3.在ASP中，服务端获取GET请求参数用Request.QueryString，获取POST请求参数用Request.Form。在JSP中，用request.getParameter(&quot;XXXX&quot;)来获取，虽然jsp中也有request.getQueryString()方法，但使用起来比较麻烦，比如：传一个test.jsp?name&#x3D;hyddd&amp;password&#x3D;hyddd，用request.getQueryString()得到的是：name&#x3D;hyddd&amp;password&#x3D;hyddd。在PHP中，可以用$_GET和$_POST分别获取GET和POST中的数据，而$_REQUEST则可以获取GET和POST两种请求中的数据。值得注意的是，JSP中使用request和PHP中使用$_REQUEST都会有隐患，这个下次再写个文章总结。</p><p>4.POST的安全性要比GET的安全性高。注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存，(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-siterequestforgery攻击。</p><p>总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p><p>从<strong>数据包</strong>、<strong>编码方式</strong>、<strong>请求参数</strong>、<strong>收藏为书签</strong>、<strong>历史记录</strong>、<strong>安全性</strong>等几方面回答。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/PMZOEonJxWeP0w7dibn7l3skTzywDDCoulHqEe98uNmf1Jcj0p5Wvj8sA2bAJeobXuPcXF7kuf9RUvuW9iabmrCA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><table><thead><tr><th>请求方式</th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td>数据包</td><td>产生一个 <code>TCP</code>数据包</td><td>可能产生两个 <code>TCP</code>数据包</td></tr><tr><td>数据位置</td><td>query string</td><td>request body</td></tr><tr><td>编码方式</td><td>只能进行 <code>url</code>编码</td><td>支持多种编码方式</td></tr><tr><td>请求参数</td><td>把参数包含在 <code>url</code>中，用 <code>&amp;</code>连接起来</td><td>通过 <code>request body</code>传递参数</td></tr><tr><td>请求缓存</td><td>会被主动 <code>Cache</code></td><td>不会缓存,除非手动设置</td></tr><tr><td>收藏为书签</td><td>支持</td><td>不支持</td></tr><tr><td>历史记录</td><td>参数会被完整保留在浏览历史记录里</td><td>不会保留</td></tr><tr><td>参数数据类型</td><td><code>ASCII</code>的字符</td><td></td></tr><tr><td>语义</td><td>在服务器上查询数据并返回</td><td>增加新资源，修改已有资源</td></tr><tr><td>安全性</td><td>低于post</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>compose和pipe函数</title>
    <link href="https://superq314.github.io/posts/82dafe4d/"/>
    <id>https://superq314.github.io/posts/82dafe4d/</id>
    <published>2022-09-23T06:48:12.000Z</published>
    <updated>2022-09-30T13:34:43.787Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">Compose函数</button></li><li class="tab"><button type="button" data-href="#super-2">Pipe函数</button></li><li class="tab"><button type="button" data-href="#super-3">链式调用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>定义：为了便于连续执行方法，把调用传值整个过程封装成函数，即为compose函数。只需要告诉compose函数需要执行哪些方法，其会自动执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// arguments</span></span><br><span class="line">    <span class="keyword">const</span> args = [].<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _result = num;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for(var i = args.length - 1; i &gt;= 0; i—) &#123;</span></span><br><span class="line"><span class="comment">            _result = args[i](_result);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return _result; </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 等价于</span></span><br><span class="line">        <span class="keyword">return</span> args.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">res, cb</span>) =&gt;</span> <span class="title function_">cb</span>(res), num); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compose</span>(addThree, addTwo, minusOne, multiplyTwo)(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>和compose函数功能一样，执行方向相反</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>用promise组成链式调用（此处和面向对象的链式调用有所区别）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>reflect反射机制</title>
    <link href="https://superq314.github.io/posts/41365fed/"/>
    <id>https://superq314.github.io/posts/41365fed/</id>
    <published>2022-09-23T01:16:27.000Z</published>
    <updated>2022-09-30T13:34:43.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>MDN定义：<br>Reflect是一个内置的对象，用来提供方法去拦截JavaScript的操作。Reflect不是一个函数对象，所以它是不可构造的，也就是说它不是一个构造器，你不能通过 <code>new</code>操作符去新建或者将其作为一个函数去调用Reflect对象。Reflect的所有属性和方法都是静态的。</p></blockquote><p>反射机制指的是程序在运行时能够获取自身的信息。js 中的 apply 就是反射机制。</p><p><strong>Reflect API 汇总</strong><br>Reflect 提供了一套用于操作对象的 API（静态方法）</p><table><thead><tr><th><strong>handler⽅法</strong></th><th><strong>默认设置调⽤</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>get</td><td>Reflect.get(target, name, receiver)</td><td>获得目标的身上某一特性的值</td></tr><tr><td>set</td><td>Reflect.set(target, name, value, receiver)</td><td>在目标上设定特性</td></tr><tr><td>has</td><td>Reflect.has(obj, name)</td><td>分辨一个目标是不是存有某一特性</td></tr><tr><td>deleteProperty</td><td>Reflect.deleteProperty(obj, name)</td><td>删掉目标上的特性</td></tr><tr><td>getProperty</td><td>Reflect.getPrototypeOf(obj)</td><td>获得特定目标原形的涵数</td></tr><tr><td>setProperty</td><td>Reflect.setPrototypeOf(obj, newProto)</td><td>设定或更改目标原形的涵数</td></tr><tr><td>isExtensible</td><td>Reflect.isExtensible(target)</td><td>分辨一个目标是不是可拓展（即是不是可以加上新的特性）</td></tr><tr><td>preventExtensions</td><td>Reflect.preventExtensions(target)</td><td>阻拦新特性加上到目标</td></tr><tr><td>getOwnPropertyDescriptor</td><td>Reflect.getOwnPropertyDescriptor(target, propertyKey)</td><td>获得给出特性的特性描述符</td></tr><tr><td>defineProperty</td><td>Reflect.defineProperty(target, propertyKey, attributes)</td><td>界定或改动一个目标的特性</td></tr><tr><td>ownKeys</td><td>Reflect.ownKeys()</td><td>回到由总体目标目标本身的特性键构成的二维数组</td></tr><tr><td>apply</td><td>Reflect.apply(func, thisArg, args)</td><td>对一个涵数开展启用实际操作，另外能够传到一个二维数组做为启用主要参数</td></tr><tr><td>construct</td><td>Reflect.construct(target, args)</td><td>对构造方法开展new实际操作，完成建立类的案例</td></tr><tr><td>preventExtensions</td><td>Reflect.preventExtensions()</td><td>阻拦新特性加上到目标</td></tr></tbody></table><p><strong>Reflect对象的作用&#x2F;优点</strong></p><ol><li>把实现反射机制的方法重新归结在一起并且简化操作，保持JS语意清晰和语法简单</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> k = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; [s]: <span class="number">1</span>, [k]: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="comment">// getOwnPropertyNames获取到String类型的key</span></span><br><span class="line"><span class="comment">// getOwnPropertySymbols获取到Symbol类型的key</span></span><br><span class="line"><span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(o).<span class="title function_">concat</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(o));</span><br><span class="line"><span class="comment">// 使用Reflect的话：</span></span><br><span class="line"><span class="keyword">var</span> keys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(o);</span><br></pre></td></tr></table></figure><ol start="2"><li>补充一些Object对象没有的方法（如Reflect.apply）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">…rest</span>)&#123;</span><br><span class="line">  consloe.<span class="title function_">log</span>(rest);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello:`</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="property">apply</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">fn.<span class="title function_">apply</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span>.<span class="title function_">call</span>(fn, &#123;<span class="attr">name</span>: <span class="string">`小明`</span>&#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">apply</span>(fn, &#123;<span class="attr">name</span>: <span class="string">`小明`</span>&#125;, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="attr">hello</span>: <span class="string">`小明`</span></span><br></pre></td></tr></table></figure><ol start="3"><li>让Object操作都变为函数行为，比如使用Reflect.has(obj, name)替换name in obj</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">`id`</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ok`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">`id`</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`ok`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>proxy</title>
    <link href="https://superq314.github.io/posts/7372c9be/"/>
    <id>https://superq314.github.io/posts/7372c9be/</id>
    <published>2022-09-23T01:14:37.000Z</published>
    <updated>2022-09-30T13:34:43.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Proxy是ES6中提供的新的API<br>proxy代理：在目标对象的前面设置一个拦截层，外界在访问这个对象的时候，必须经过拦截层。</p><blockquote><p>我们可以在拦截层做一些过滤或者是改写的操作。<br>语法<br><code>var proxy = new Proxy(target, handler);</code><br>Proxy 对象的所有用法，都是上面这种形式，不同的只是handler参数的写法。其中：</p></blockquote><ul><li>new Proxy() 表示生成一个 Proxy 实例</li><li>target 参数表示所要拦截的目标对象可以是一个object或者function</li><li>handler 参数也是一个对象，用来定制拦截行为;如果handler没有设置任何拦截，那就等同于直接通向原对象</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="Proxy" scheme="https://superq314.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>generator生成器</title>
    <link href="https://superq314.github.io/posts/8706750a/"/>
    <id>https://superq314.github.io/posts/8706750a/</id>
    <published>2022-09-22T14:51:13.000Z</published>
    <updated>2022-09-30T13:34:43.083Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>生成器generator<br>　　生成器是一种返回迭代器的函数，通过function关键字后的星号(<em>)来表示，函数中会用到新的关键字yield。星号可以紧挨着function关键字，也可以在中间添加一个空格<br>调用一个生成器函数并不会马上执行它里面的语句，而是返回一个这个生成器的 迭代器 （iterator ）对象。<br>或者如果用的是 yield</em>（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行） 移交代码控制权<br>可以视作一个可以暂停和恢复执行的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">createIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>　　在这个示例中，createlterator()前的星号表明它是一个生成器；yield关键字也是ES6的新特性，可以通过它来指定调用迭代器的next()方法时的返回值及返回顺序。生成迭代器后，连续3次调用它的next()方法返回3个不同的值，分别是1、2和3。生成器的调用过程与其他函数一样，最终返回的是创建好的迭代器<br>　　生成器函数最有趣的部分是，每当执行完一条yield语句后函数就会自动停止执行。举个例子，在上面这段代码中，执行完语句yield 1之后，函数便不再执行其他任何语句，直到再次调用迭代器的next()方法才会继续执行yield 2语句。生成器函数的这种中止函数执行的能力有很多有趣的应用<br>　　使用yield关键字可以返回任何值或表达式，所以可以通过生成器函数批量地给迭代器添加元素。例如，可以在循环中使用yield关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">createIterator</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 2, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 3, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br><span class="line"><span class="comment">// 之后的所有调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>　　在此示例中，给生成器函数createlterator()传入一个items数组，而在函数内部，for循环不断从数组中生成新的元素放入迭代器中，每遇到一个yield语句循环都会停止；每次调用迭代器的next()方法，循环会继续运行并执行下一条yield语句<br>　　生成器函数是ES6中的一个重要特性，可以将其用于所有支持函数使用的地方</p><h2 id="【使用限制】"><a href="#【使用限制】" class="headerlink" title="【使用限制】"></a>【使用限制】</h2><p>　　yield关键字只可在生成器内部使用，在其他地方使用会导致程序抛出错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">createIterator</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    items.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="comment">// 语法错误</span></span><br><span class="line">        <span class="keyword">yield</span> item + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　从字面上看，yield关键字确实在createlterator()函数内部，但是它与return关键字一样，二者都不能穿透函数边界。嵌套函数中的return语句不能用作外部函数的返回语句，而此处嵌套函数中的yield语句会导致程序抛出语法错误</p><h2 id="【生成器函数表达式】"><a href="#【生成器函数表达式】" class="headerlink" title="【生成器函数表达式】"></a>【生成器函数表达式】</h2><p>　　也可以通过函数表达式来创建生成器，只需在function关键字和小括号中间添加一个星号(*)即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> createIterator = <span class="keyword">function</span> *(items) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> items[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 1, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 2, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: 3, done: false &#125;&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br><span class="line"><span class="comment">// 之后的所有调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &quot;&#123; value: undefined, done: true &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>　　在这段代码中，createlterator()是一个生成器函数表达式，而不是一个函数声明。由于函数表达式是匿名的，因此星号直接放在function关键字和小括号之间。此外，这个示例基本与前例相同，使用的也是for循环<br>　　[注意]不能用箭头函数来创建生成器</p><h2 id="【生成器对象的方法】"><a href="#【生成器对象的方法】" class="headerlink" title="【生成器对象的方法】"></a>【生成器对象的方法】</h2><p>　　由于生成器本身就是函数，因而可以将它们添加到对象中。例如，在ES5风格的对象字面量中，可以通过函数表达式来创建生成器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">createIterator</span>: <span class="keyword">function</span> *(items) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">yield</span> items[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = o.<span class="title function_">createIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>　　也可以用ES6的函数方法的简写方式来创建生成器，只需在函数名前添加一个星号(*)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    *<span class="title function_">createIterator</span>(<span class="params">items</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">yield</span> items[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = o.<span class="title function_">createIterator</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>　　这些示例使用了不同于之前的语法，但它们的功能实际上是等价的。在简写版本中，由于不使用function关键字来定义createlterator()方法，因此尽管可以在星号和方法名之间留白，但还是将星号紧贴在方法名之前</p><h2 id="【状态机】生成器的一个常用功能是生成状态机"><a href="#【状态机】生成器的一个常用功能是生成状态机" class="headerlink" title="【状态机】生成器的一个常用功能是生成状态机"></a>【状态机】生成器的一个常用功能是生成状态机</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> status = <span class="title function_">state</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//&#x27;A&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//&#x27;B&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//&#x27;C&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//&#x27;A&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//&#x27;B&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="应用场景：通过yield-实现非线性迭代"><a href="#应用场景：通过yield-实现非线性迭代" class="headerlink" title="应用场景：通过yield*实现非线性迭代"></a>应用场景：通过yield*实现非线性迭代</h2><p>yield关键字后面可以跟随另一个generator对象或其他可迭代对象。<br>可以利用这个特性实现非线性结构的遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">yield</span> ‘a1’</span><br><span class="line">  <span class="keyword">yield</span> ‘a2’</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">yield</span> ‘b1’</span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">a</span>()</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">  <span class="keyword">yield</span> ‘b2’</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="title function_">b</span>())&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// b1 a1 a2 1 2 b2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>iterator迭代器</title>
    <link href="https://superq314.github.io/posts/a5155495/"/>
    <id>https://superq314.github.io/posts/a5155495/</id>
    <published>2022-09-22T14:50:35.000Z</published>
    <updated>2022-09-30T13:34:43.095Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Iterator迭代器的本质</strong></p><pre><code>迭代器对象是一种接口，也可以说是一种规范。为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作。本质上，就是一个指针对象。通过指针对象的next()，用来移动指针。</code></pre><p><strong>Iterator迭代器语法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性上。<br>只要拥有了该属性，就能够用迭代器的方式进行遍历。</p></blockquote><p><strong>数组的Symbol.iterator属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">num</span>:<span class="number">1</span>&#125;, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> it = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() <span class="comment">// 获取数组中的迭代器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">// &#123; value: Object &#123; num: 1 &#125;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><strong>Iterator接口</strong><br>iterator必须实现next方法，该方法每次被调用时返回一个迭代器结果。<br>next()：被调用时返回一个iteratorResult对象<br>return()：被调用时返回一个iteratorResult对象，通常在调用者希望提前结束迭代时调用<br>throw()：被调用时返回一个iteratorResult对象，通常在调用者检测到错误时被调用</p><p><strong>Iterator迭代器协议</strong></p><pre><code>对象必须提供一个next()，执行该方法后 =&gt; 要么返回迭代中的下一项，要么就引起一个Stopiteration异常，以终止迭代next()返回一个对象，表示当前数据成员的信息。这个对象具有value和done两个属性    value属性：迭代未完成时，返回当前位置的元素；迭代完成后，返回迭代器返回值或者缺省    done属性：一个布尔值，表示遍历是否结束，即是否还有必要再一次调用next()    对于遍历器对象来说，done: false和value: undefined属性都是可以省略的。</code></pre><p><strong>遍历过程：</strong></p><ol><li>创建一个指针对象，指向当前数据结构的起始位置。</li><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</li><li>不断调用指针对象的next方法，直到它指向数据结构的结束位置。</li></ol><p><strong>Iterator迭代器的作用：</strong></p><ol><li>为各种数据结构，提供一个统一的、简便的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li>ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of使用</li></ol><p><strong>原生具备 Iterator 接口的数据结构如下：</strong></p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 类数组对象</li><li>DOM中的NodeList 类数组对象</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://superq314.github.io/posts/58add7e9/"/>
    <id>https://superq314.github.io/posts/58add7e9/</id>
    <published>2022-09-22T14:47:01.000Z</published>
    <updated>2022-09-30T13:34:43.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>跨域问题的解决方式<br>1、通过Jsonp<br>2、Document.domain + Iframe跨域<br>3、Iocation.hash + Iframe跨域<br>4、Window.name+Iframe跨域<br>5、PostMessage跨域<br>6、跨域资源共享（CORS）<br>7、nginx代理跨域<br>8、nodeJavaScripr中间代理跨域<br>9、WebSocket协议跨域</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="https://superq314.github.io/posts/3bf3e06d/"/>
    <id>https://superq314.github.io/posts/3bf3e06d/</id>
    <published>2022-09-22T14:46:36.000Z</published>
    <updated>2022-09-30T13:34:43.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>jQuery<br>sass、less &#x3D;&gt; CSS预处理器<br>less：动态样式语言，给CSS赋予动态语言特性<br>动态语言特性：变量、继承、嵌套</p><p>跨域原因：<br>由于前后端分离 &#x3D;&gt; 前后端域名不一致 &#x3D;&gt; 出现跨越访问问题<br>同源策略 &#x3D;&gt; 只有协议 + 主机名 + 端口号相同（允许访问）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>ajax</title>
    <link href="https://superq314.github.io/posts/c5a6a264/"/>
    <id>https://superq314.github.io/posts/c5a6a264/</id>
    <published>2022-09-22T14:46:20.000Z</published>
    <updated>2022-09-30T13:34:43.078Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>AJAX &#x3D;&#x3D;&gt; 创建快速动态网页 &#x3D;&#x3D;&gt; 网页异步更新<br>核心：XMLHttpRequest对象<br>创建过程：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;</span><br><span class="line"><span class="keyword">if</span> (window.XMLHttpRequest) &#123;xhttp = <span class="keyword">new</span> <span class="type">XMLHttpRequest</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// code for IE5,IE6  </span></span><br><span class="line">  xhttp = <span class="keyword">new</span> <span class="type">ActiveXobject</span>(“Microsoft.XMLHTTP”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ajax使用过程（5个步骤）<br>1、创建XMLHTTPRequest对象<br>2、使用open方法创建http请求，并设置请求地址xhr.open(get&#x2F;post, url, asynchronous,true异步, false同步)<br>3、设置发送的数据，用send发送请求<br>4、注册事件（给Ajax设置事件）<br>5、获取响应并更新页面</p><p>AJAX的XMLHttpRequest对象方法</p><table><thead><tr><th align="center">方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">new XMLHttpRequest()</td><td>创建新的XMLHttpRequest对象</td></tr><tr><td align="center">abort()</td><td>取消当前请求</td></tr><tr><td align="center">getAllResponseHeaders()</td><td>返回头部信息</td></tr><tr><td align="center">getResponseHeader()</td><td>返回特定的头部信息</td></tr><tr><td align="center">open(method, url, async, user, psw)</td><td>method：规定请求类型GET或POST<br />url：文件位置<br />async：true(异步)或false(同步)<br />user：可选的用户名<br />psw：可选的密码</td></tr><tr><td align="center">send()</td><td>将请求发送到服务器，用于GET 请求</td></tr><tr><td align="center">send(string)</td><td>将请求发送到服务器，用于POST 请求</td></tr><tr><td align="center">setRequestHeader()</td><td>向要发送的报头添加标签&#x2F;值对</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>class的继承</title>
    <link href="https://superq314.github.io/posts/405302ea/"/>
    <id>https://superq314.github.io/posts/405302ea/</id>
    <published>2022-09-22T14:38:38.000Z</published>
    <updated>2022-09-30T13:34:43.522Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>class的继承<br>JavaScript 实现继承是件麻烦事，构造函数继承有加上原型上的函数不能复用的问题；原型链继承又存在引用值属性的修改不独立的问题；组合继承又存在两次调用构造函数的问题，寄生组合继承，写起来又太麻烦了</p><p>class的继承围绕三点进行展开描述：extends实现继承，super()引用父类的构造函数，多重继承。<br>1、如何实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>通过关键字<span class="keyword">extends</span>实现继承。具体操作步骤如下：</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Site</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sitename</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">present</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我喜欢&#x27;</span> + <span class="variable language_">this</span>.<span class="property">sitename</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Runoob</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Site</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">present</span>() + <span class="string">&#x27;, 它创建了 &#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27; 年。&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> noob = <span class="keyword">new</span> <span class="title class_">Runoob</span>(<span class="string">&quot;菜鸟教程&quot;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>需要注意的点：</p><ul><li>子类必须在constructor方法中调用super方法<br>为什么必须要调用super方法呢？<br>这是因为这里的继承是先塑造父类，再塑造子类。也就是先将父类的东西都拿过来之后，再进行子类的添加。而super负责的就是将父类的东西拿过来。所以必须先调用super。</li><li>调用super之后才能使用this。也就是说在子类构造函数constructor里面，super函数要放在最上面。<br>为什么要这样呢？<br>刚才提到过，class的继承是先将父类拿过来再进行子类的添加，之前在讲借用构造函数实现继承的时候也提到过，如果想要给自身添加属性和方法，需要在调用call或者apply之后添加。否则如果存在同名属性，后面的会覆盖前面的。这里其实也是同样的道理。<br>2、super<br>class里面的super有两种使用方式，一种是当方法用，一种是当对象用。</li><li>当方法用<br>当方法用就像上面提到的，在constructor里面调用，负责将父类的实例属性拿过来。这个时候，super里面的this指向的是子类。<br>为什么这样呢？其实和借用构造函数实现继承是一样的，子类继承超类的实例属性时，就是通过call或者apply在子类调用超类构造函数。这个时候，this自然指向的就是子类。<br>还要注意一点 的是，其实上面也提到了，当方法用的时候，super必须放到constructor构造函数的最上层</li><li>当对象用<br>上一点说了，当方法用是为了将父类的实例属性继承过来(其实就是复制一份过来)。实例属性是拿到了，但方法呢，比如说有时候子类的方法想要调用父类的某个方法，这个时候要如何做？</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;speak&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">sayName</span>() <span class="comment">// Person</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">speak</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">speak</span>() <span class="comment">// speak</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Animal</span>()</span><br><span class="line">a.<span class="title function_">sayName</span>()</span><br><span class="line"><span class="title class_">Animal</span>.<span class="title function_">speak</span>()</span><br></pre></td></tr></table></figure><p>这个时候，super作为对象的所用就体现出来了，通过它可以调用父类的方法(包括静态方法)。<br>注意，不同类型的方法要在不同类型的方法里面调用。有点绕，其实就是子类的静态方法里面通过super只能调用父类的静态方法，不能调用父类的原型方法。同理，子类的原型方法通过super也只能调用父类的原型方法，不能调用父类的静态方法。<br>有点像组合继承，super方法就是借用构造函数继承，继承实例属性，super对象就是原型链继承，继承原型上的属性和方法。也就是说super对象是无法访问父类的实例属性的。<br>那么还有一个问题，通过super调用父类的方法，那么该方法内的this指向的是谁呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Person&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Animal&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">sayName</span>() <span class="comment">// Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/class%E7%9A%84%E7%BB%A7%E6%89%BF/1663857835921.png" alt="1663857835921"><br>结果就是，this指向的是当前类(子类)的实例。所以我们通过super对某个属性进行修改，修改的就是子类实例的属性。<br>3、多重继承<br>有些面向对象编程语言是支持多重继承(即一个子类继承多个父类)，如c++， py。java不支持多继承，但可以通过实现多接口或者内部类的方式实现类似的效果。es6的class继承本质上还是基于原型链的继承，所以也是不支持多继承的。但就像java那样，我们也可以通过其他方式达到相同或者类似的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;Person&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&#x27;18&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;说话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;Animal&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = <span class="string">&#x27;19&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;进食&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mixin</span></span><br><span class="line"><span class="comment">// 多重继承 一个子类继承多个父类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">...mixins</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Mix</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">        <span class="comment">// 拷贝实例属性</span></span><br><span class="line">        <span class="title function_">copyProperties</span>(<span class="variable language_">this</span>, <span class="keyword">new</span> <span class="title function_">mixin</span>())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> mixin <span class="keyword">of</span> mixins) &#123;</span><br><span class="line">    <span class="title function_">copyProperties</span>(<span class="title class_">Mix</span>, mixin) <span class="comment">// 拷贝静态属性</span></span><br><span class="line">    <span class="title function_">copyProperties</span>(<span class="title class_">Mix</span>.<span class="property"><span class="keyword">prototype</span></span>, mixin.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// 拷贝原型属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mix</span>&#125;<span class="keyword">function</span> <span class="title function_">copyProperties</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">  <span class="comment">// Reflect.ownKeys 返回所有属性key</span></span><br><span class="line">  <span class="comment">// Object.keys 返回属性key，不包括不可枚举属性</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="string">&#x27;constructor&#x27;</span> &amp;&amp; key !== <span class="string">&#x27;prototype&#x27;</span> &amp;&amp; key !== <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// Object.getOwnPropertyDescriptor 返回指定对象上一个自有属性对应的属性描述符。</span></span><br><span class="line">      <span class="comment">// 自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性</span></span><br><span class="line">      <span class="comment">// 属性描述符指的是configurable、enumerable、writable、value这些</span></span><br><span class="line">      <span class="keyword">const</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(source, key)</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, desc)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&#125;<span class="keyword">class</span> <span class="title class_">Other</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mixin</span>(<span class="title class_">Animal</span>, <span class="title class_">Person</span>) &#123;&#125;<span class="keyword">const</span> oo = <span class="keyword">new</span> <span class="title class_">Other</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oo)</span><br></pre></td></tr></table></figure><p><img src="/image/class%E7%9A%84%E7%BB%A7%E6%89%BF/1663857864873.png" alt="1663857864873"><br>通过以上方式，也可以间接地实现类似多重继承的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="继承" scheme="https://superq314.github.io/tags/%E7%BB%A7%E6%89%BF/"/>
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="class" scheme="https://superq314.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>class类</title>
    <link href="https://superq314.github.io/posts/7ec024ea/"/>
    <id>https://superq314.github.io/posts/7ec024ea/</id>
    <published>2022-09-22T14:31:56.000Z</published>
    <updated>2022-09-30T13:34:43.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在es5中主要是通过构造函数方式和原型方式来定义一个类<br>在es6中可以通过class来定义类。<br>一个类只能拥有一个名为”constructor”构造函数，不能出现多个；<br>如果没有定义”constructor”构造函数，class会默认添加一个空的“constructor”构造函数。</p><h3 id="1、class类必须进行new调用，不能直接执行"><a href="#1、class类必须进行new调用，不能直接执行" class="headerlink" title="1、class类必须进行new调用，不能直接执行"></a>1、class类必须进行new调用，不能直接执行</h3><p>使用new调用类的构造函数会执行如下操作。<br>1.在内存中创建一个新对象；<br>2.这个新对象内部的[[Prototype]]指针被赋值为构造函数的prototype属性；<br>3.构造函数内部的this被赋值为这个新对象（即this指向新对象）；<br>4.执行构造函数内部的代码（给新对象添加属性）；<br>5.如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象；</p><h3 id="2、class类不存在变量提升"><a href="#2、class类不存在变量提升" class="headerlink" title="2、class类不存在变量提升"></a>2、class类不存在变量提升</h3><h3 id="3、class类无法遍历其实例原型链上的属性和方法"><a href="#3、class类无法遍历其实例原型链上的属性和方法" class="headerlink" title="3、class类无法遍历其实例原型链上的属性和方法"></a>3、class类无法遍历其实例原型链上的属性和方法</h3><p>不可枚举</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ES6</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">newTest</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">newTest2</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">ES6</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// [ ]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">ES6</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">// [&quot;constructor&quot;,&quot;newTest&quot;,&quot;newTest2&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="4、new-target属性"><a href="#4、new-target属性" class="headerlink" title="4、new.target属性"></a>4、new.target属性</h3><p>es6为new命令引入了一个new.target属性，它会返回new命令作用于的那个构造函数。<br>如果不是通过new调用或Reflect.construct()调用的，new.target会返回undefined</p><h3 id="5、class类有static静态方法"><a href="#5、class类有static静态方法" class="headerlink" title="5、class类有static静态方法"></a>5、class类有static静态方法</h3><p>static静态方法只能通过类调用，不会出现在实例上；<br>静态方法包含 this 关键字，这个 this 指的是类，而不是实例<br>static声明的静态属性和方法都可以被子类继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`this <span class="subst">$&#123;<span class="variable language_">this</span>&#125;</span>`</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">baz</span>(); <span class="comment">// 此处的this指向类</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>); <span class="comment">// 不会出现在实例中</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">bar</span>() <span class="comment">// undefined</span></span><br><span class="line">foo.<span class="title function_">baz</span>() <span class="comment">// world</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">bar</span>() <span class="comment">// this Foo hello </span></span><br></pre></td></tr></table></figure><p>getter 与 setter <br>在 class 内部可以使用 get 与 set 关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (test) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">test</span> = test || <span class="string">&#x27;默认值&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    get prop () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">test</span></span><br><span class="line">    &#125;</span><br><span class="line">    set prop (value) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setter prop value: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">test</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.<span class="property">prop</span> <span class="comment">// 1</span></span><br><span class="line">p.<span class="property">prop</span> = <span class="string">&#x27;2&#x27;</span> <span class="comment">// setter prop value: 2</span></span><br><span class="line">p.<span class="property">prop</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>默认严格模式<br>内部定义inside<br>立即执行<br>二次声明<br>实例无法调用static<br>static this指向类<br>继承包含static<br>Class内部只有静态方法，没有静态属性</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="class" scheme="https://superq314.github.io/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>尾调用</title>
    <link href="https://superq314.github.io/posts/44a5189f/"/>
    <id>https://superq314.github.io/posts/44a5189f/</id>
    <published>2022-09-22T13:59:27.000Z</published>
    <updated>2022-09-30T13:34:43.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h2><p>定义：在执行某个函数时，如果最后一步是一个函数调用，并且被调用函数的返回值直接被函数返回，被称为尾调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">g</span>();<span class="comment">// 尾调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下两种情况，都不属于尾调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="title function_">g</span>(x);</span><br><span class="line"><span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">g</span>(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>函数调用会在内存中形成一个”调用记录”，又称”调用帧”，保存调用位置和内部变量等信息。</p><ol><li>函数A内部调用函数B，那么在A的调用记录上方，会形成一个B的调用记录。</li><li>等到B运行结束，将结果返回到函数A，B的调用记录才会消失。</li><li>如果函数B内部还调用了函数C，那还有一个C的调用记录栈，以此类推。</li><li>所有的调用记录形成一个”调用栈”。<br><img src="/image/%E5%B0%BE%E8%B0%83%E7%94%A8/1663855333356.png" alt="1663855333356"><br>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。<br>尾调用的要求</li><li>尾调用不需要访问当前stackframe中的变量，也就是没有闭包。</li><li>返回到尾调用处时，不用再做其他事情。</li><li>尾调用的返回值，直接返回给调用它所在函数的调用者。</li></ol><p>ES6的尾调用优化只在严格模式下开启，正常模式是无效的。</p><blockquote><p>因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><ul><li>arguments：返回调用时函数的参数。</li><li>func.caller：返回调用当前函数的那个函数。<br>严格模式下开启尾调用优化，函数的调用栈会改写，从而会禁用这两个变量，所以尾调用模式仅在严格模式下生效。</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="函数式编程" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="尾调用" scheme="https://superq314.github.io/tags/%E5%B0%BE%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>symbol</title>
    <link href="https://superq314.github.io/posts/ecc836f9/"/>
    <id>https://superq314.github.io/posts/ecc836f9/</id>
    <published>2022-09-22T13:47:38.000Z</published>
    <updated>2022-09-30T13:34:43.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Symbol<br>由于symbol值是唯一的，可以避免<strong>为对象添加属性时 属性名产生冲突</strong>。</p><p>共享Symbol<br>Symbol.for()：在不同的地方使用同一个symbol，用来当作不同对象的唯一标识符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">[uid]:<span class="string">&quot;12345&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object[uid]);<span class="comment">// &quot;12345&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid);<span class="comment">// Symbol(uid)</span></span><br><span class="line"><span class="keyword">let</span> uid2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid === uid2);<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object[uid2]);<span class="comment">// &quot;12345&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid2);<span class="comment">// Symbol(uid)</span></span><br></pre></td></tr></table></figure><p>SymbolkeyFor()：查找和某个symbol关联的key值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(uid));<span class="comment">// &quot;uid&quot;</span></span><br><span class="line"><span class="keyword">let</span> uid2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(uid2));<span class="comment">// &quot;uid&quot;</span></span><br><span class="line"><span class="keyword">let</span> uid3 = <span class="title class_">Symbol</span>(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(uid3));<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>ObjectgetOwnPropertySymbols()：查找对象的symbol属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> object = &#123;[id]:<span class="string">&#x27;123&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> symbols =0bject.<span class="title function_">getOwnPropertySymbols</span>(obiect);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols.<span class="property">length</span>);<span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols[<span class="number">0</span>]);<span class="comment">// Symbol(id)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object[symbols[<span class="number">0</span>]]);<span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><p>es6的内置symbol<br>es6内置了11个symbol，叫well-known symbol,它们都是Symbol函数的属性，指向语言内部使用的方法或属性。通过它们可以更改语言的原生行为。<br><img src="/image/symbol/1663854576292.png" alt="1663854576292"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="Symbol" scheme="https://superq314.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>模板字面量</title>
    <link href="https://superq314.github.io/posts/bb45ebf5/"/>
    <id>https://superq314.github.io/posts/bb45ebf5/</id>
    <published>2022-09-22T13:43:51.000Z</published>
    <updated>2022-09-30T13:34:43.558Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>定义：允许嵌入表达式的字符串字面量，可以使用多行字符串和字符串插值功能。可以保留反引号内的空格和换行符。</p><blockquote><p>开始和结尾的空格换行符可以通过trim方法去除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">hello world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)<span class="comment">// \nhello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>())<span class="comment">// hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>严格意义上来说，模板字面量不是字符串，而是一种特殊的JavaScript表达式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`string text`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text line 1</span></span><br><span class="line"><span class="string">string text line 2`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text`</span></span><br><span class="line">tag <span class="string">`string text <span class="subst">$&#123;expression&#125;</span> string text&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multiLineStr = <span class="string">&#x27;&#x27;</span> + </span><br><span class="line">  <span class="string">`&lt;pre&gt;&#x27; + </span></span><br><span class="line"><span class="string">  `</span>    &lt;code <span class="keyword">class</span>=<span class="string">&quot;sb&quot;</span>&gt;<span class="title class_">This</span> is&lt;/code&gt;<span class="string">` +</span></span><br><span class="line"><span class="string">  `</span>    &lt;code <span class="keyword">class</span>=<span class="string">&quot;sb&quot;</span>&gt;a string&lt;/code&gt;<span class="string">&#x27; + </span></span><br><span class="line"><span class="string">  `    &lt;code class=&quot;sb&quot;&gt;with multiple&lt;/code&gt;&#x27;</span> + </span><br><span class="line">  <span class="string">`    &lt;code class=&quot;sb&quot;&gt;lines&lt;/code&gt;&#x27; + </span></span><br><span class="line"><span class="string">  `</span>    &lt;code <span class="keyword">class</span>=<span class="string">&quot;p&quot;</span>&gt;;&lt;/code&gt;<span class="string">&#x27; + </span></span><br><span class="line"><span class="string">  `&lt;/pre&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>支持所有合法的JavaScript表达式，包括函数调用等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;john&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`my name is <span class="subst">$&#123;getName()&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>插值表达式支持嵌套</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> classes = <span class="string">`header <span class="subst">$&#123; isLargeScreen()</span></span></span><br><span class="line"><span class="subst"><span class="string">? <span class="string">``</span></span></span></span><br><span class="line"><span class="subst"><span class="string">: <span class="string">`icon-<span class="subst">$&#123;(isCollapsed? <span class="string">&#x27;expander`: &#x27;</span>collapser<span class="string">&#x27;)&#125;`&#125;`;</span></span></span></span></span></span><br></pre></td></tr></table></figure><h3 id="模板字面量-tagged-template"><a href="#模板字面量-tagged-template" class="headerlink" title="模板字面量:tagged template"></a>模板字面量:tagged template</h3><p>最前面可以跟一个函数，这个函数叫模板字符串的tag。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">literals, ...substitutions</span>) &#123;</span><br><span class="line">    <span class="comment">// return a string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板字面量:tagged template示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="string">&#x27;Mike&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myTag</span>(<span class="params">strings, personExp,ageExp</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> str0 = strings[<span class="number">0</span>]; <span class="comment">// &quot;that &quot;</span></span><br><span class="line">    <span class="keyword">let</span> str1 = strings[<span class="number">1</span>]; <span class="comment">// &quot; is a &quot;</span></span><br><span class="line">    <span class="comment">// 最后还有一项，不过它的值是空字符串 &#x27; &#x27;</span></span><br><span class="line">    <span class="comment">// let str2 =strings[2];</span></span><br><span class="line">    <span class="keyword">let</span> ageStr;</span><br><span class="line">    <span class="keyword">if</span> (ageExp &gt; <span class="number">99</span>) &#123;</span><br><span class="line">        ageStr = <span class="string">&#x27;centenarian&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ageStr = <span class="string">&#x27;youngster&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str0 + personExp + str1 + ageStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> output = myTag<span class="string">`that <span class="subst">$&#123;person&#125;</span> is a <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(output); <span class="comment">// that Mike is a youngster</span></span><br></pre></td></tr></table></figure><h3 id="模板字面量-原始字符串值-raw-value"><a href="#模板字面量-原始字符串值-raw-value" class="headerlink" title="模板字面量:原始字符串值(raw value)"></a>模板字面量:原始字符串值(raw value)</h3><p>tag函数的第一个参数，还有一个raw属性，它的值是模板字符串被转义之前的值，也可以使用内置的 String.raw方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message1 =<span class="string">`Multiline\nstring`</span>;</span><br><span class="line"><span class="title class_">Let</span> message2 = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Multiline\nstring`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message1);<span class="comment">// &quot;Multiline</span></span><br><span class="line">                        <span class="comment">// string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2);<span class="comment">// &quot;Multilinel\nstring&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="模板字面量" scheme="https://superq314.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Modules</title>
    <link href="https://superq314.github.io/posts/e10a7a4b/"/>
    <id>https://superq314.github.io/posts/e10a7a4b/</id>
    <published>2022-09-22T13:31:55.000Z</published>
    <updated>2022-09-30T13:34:43.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Modules语法-amp-特性"><a href="#Modules语法-amp-特性" class="headerlink" title="Modules语法&amp;特性"></a>Modules语法&amp;特性</h2><p>模块功能主要由两个命令构成：<code>export</code>和 <code>import</code>。<br>**<code>export</code>**命令：规定模块的对外接口<br>**<code>import</code>**命令：输入其他模块提供的功能</p><p>export命令</p><p>一个modules模块就是一个独立的文件。该文件内部的所有变量，外部无法获取到。</p><blockquote><p>如果希望外部能够读取模块内部的某个变量，就必须使用<strong>export</strong>关键字输出该变量。</p></blockquote><p>案例如下，一个JS文件使用<strong>export</strong>命令输出变量。</p><p>写法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br></pre></td></tr></table></figure><p>上面代码是<strong>profile.js</strong>文件，保存了用户信息。</p><blockquote><p>ES6 将其视为一个模块，里面用<strong>export</strong>命令对外部输出了三个变量。</p></blockquote><p>写法二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span>  &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure><p>在<strong>export</strong>命令后面，使用大括号指定所要输出的一组变量。</p><blockquote><p>与写法一（直接放置在<strong>var</strong>语句前）等价</p></blockquote><blockquote><p>但是应该优先考虑使用写法二。</p></blockquote><blockquote><p>因为可以在脚本尾部，直接知道输出了哪些变量。</p></blockquote><p><strong>as</strong>关键字重命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,</span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,</span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h2><p>使用<strong>export</strong>命令定义了模块的对外接口以后，其他 JS 文件就可以通过<strong>import</strong>命令加载这个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<strong>import</strong>命令，用于加载<strong>profile.js</strong>文件，并从中输入变量。</p><p><strong>import</strong>命令接受一对大括号，里面指定要从其他模块导入的变量名。</p><p>大括号里面的变量名，必须与被导入模块（<strong>profile.js</strong>）对外接口的名称相同。</p><p>如果想为输入的变量重新取一个名字，<strong>import</strong>命令要使用<strong>as</strong>关键字，将输入的变量重命名。</p><p><code>import &#123; lastName as surname &#125; from &#39;./profile.js&#39;;</code></p><p><img src="/image/Modules/1663853855311.png" alt="1663853855311"></p><p><img src="/image/Modules/1663853861302.png" alt="1663853861302"></p><p><img src="/image/Modules/1663853869366.png" alt="1663853869366"></p><p><img src="/image/Modules/1663853876561.png" alt="1663853876561"></p><p><img src="/image/Modules/1663853881292.png" alt="1663853881292"></p><p><img src="/image/Modules/1663853886119.png" alt="1663853886119"></p><h2 id="Modules特性"><a href="#Modules特性" class="headerlink" title="Modules特性"></a>Modules特性</h2><ul><li>以接口方式曝露，采用引用的方式;</li><li>Module中也可以import</li><li>模块中this是无意义，且模块单独一作用域，外部不可见</li><li>同一个模块被引用多次，只执行一次</li></ul><h2 id="Modules加载机制"><a href="#Modules加载机制" class="headerlink" title="Modules加载机制"></a>Modules加载机制</h2><p>1、异步加载 async</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对于type=module的时候，默认异步加载 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载完成，渲染引擎就会中断渲染立即执行。此外，执行完成后，再恢复渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、延迟加载 defer</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;test.is&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Modules错误范例和正确实践"><a href="#Modules错误范例和正确实践" class="headerlink" title="Modules错误范例和正确实践"></a>Modules错误范例和正确实践</h2><p>Modules正确实践</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;a, b&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>错误案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="ES新特性" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
    <category term="ES6" scheme="https://superq314.github.io/tags/ES6/"/>
    
    <category term="Modules模块" scheme="https://superq314.github.io/tags/Modules%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>内容布局方式-rem适配布局</title>
    <link href="https://superq314.github.io/posts/7436eeb6/"/>
    <id>https://superq314.github.io/posts/7436eeb6/</id>
    <published>2022-09-16T02:31:18.000Z</published>
    <updated>2022-09-30T13:34:42.981Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>rem适配布局——[混合布局]<br>rem是CSS的长度单位，相当于元素对的font-size的相对值<br>假如</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">  font-size: 20px; </span><br><span class="line">&#125;</span><br><span class="line">=<span class="language-ruby">=&gt; 1rem = 20px</span></span><br></pre></td></tr></table></figure><p>rem会随着设备的大小变化而发生相应的改变<br>解决了流式布局和flex布局不能变化高度的问题</p><ol><li>rem + 媒体查询技术<br>&#x3D;&#x3D;&gt; 实现元素大小动态变化</li><li>rem + flexible.is（淘宝技术）<br>将页面的一行分成10份，可以快速布局<br>&#x3D;&#x3D;&gt; 实现元素大小动态变化</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="rem适配布局" scheme="https://superq314.github.io/tags/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Html-标签粗解</title>
    <link href="https://superq314.github.io/posts/9044f2a4/"/>
    <id>https://superq314.github.io/posts/9044f2a4/</id>
    <published>2022-09-16T01:57:22.000Z</published>
    <updated>2022-09-30T13:34:42.912Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>&lt;a&gt;&lt;/a&gt;</code><br>作用：</p><ul><li>另一个文档</li><li>文档内部</li><li>Email地址</li><li>电话号码</li></ul><p>属性</p><ul><li><code>href</code></li><li><code>target</code></li><li><code>download</code></li><li><code>hreflang</code></li><li><code>rel</code></li><li><code>rev</code></li><li><code>type</code></li><li><code>referrerpolicy</code></li></ul><p>target中属性值</p><ul><li>_self</li><li>_blank</li><li>_parent</li><li>_top</li></ul><p>举例：<br>创建锚点<br><code>&lt;a href=&quot;#&quot;&gt;×××&lt;/a&gt;</code><br>链接Email地址<br><code>&lt;a href=&quot;mailto:1078857679@qq.com&quot;&gt;×××&lt;/a&gt;</code><br>链接电话<br><code>&lt;a href=&quot;tel:15651005256&quot;&gt;×××&lt;/a&gt;</code><br>文件下载<br><code>&lt;a href=&quot;/keyboard-shortcuts.pdf&quot; download&gt;×××&lt;/a&gt;</code><br><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p><ul><li>引用内容</li><li>属性<ul><li>cite<br><code>&lt;em&gt;&lt;/em&gt;</code><br>强调，需要用户着重阅读的内容</li></ul></li><li>默认斜体</li><li>可以嵌套<br><code>&lt;strong&gt;&lt;/strong&gt;</code><br>严重&#x2F;重要&#x2F;紧急的内容</li><li>标题、警告、注意事项、指示性内容</li><li>默认粗体</li><li>可以嵌套<br><code>&lt;span&gt;&lt;/span&gt;</code><br>无任何特殊含义</li><li>行内容器</li><li>样式<br><code>&lt;img&gt;</code><br>图像<br>属性</li><li>src</li><li>alt</li><li>width</li><li>height</li><li>srcset    宽度描述符</li><li>sizes<br>插入图片<br>picture容器 + source<br>source属性</li><li>srcset</li><li>type</li><li>sizes</li><li>media<br>图片热点<br>area属性</li><li>download</li><li>hreflang</li><li>rel</li><li>target</li><li>type</li><li>referrerpolicy<br><code>&lt;video&gt;&lt;/video&gt;</code><br>视频、影片、带字幕的音频<br>属性</li><li>src</li><li>width</li><li>height</li><li>poster</li><li>preload</li><li>autoplay</li><li>loop</li><li>muted</li><li>controls</li><li>crossorigin<br>内嵌标签<br>source</li><li>src</li><li>type<br>track</li><li>kind<ul><li>subtitles</li><li>captions</li><li>descriptions</li><li>chapters</li><li>metadata</li></ul></li><li>srcset</li><li>srclang</li><li>label</li><li>default<br><code>&lt;audio&gt;&lt;/audio&gt;</code><br>音频<br>属性</li><li>src</li><li>preload</li><li>autoplay</li><li>loop</li><li>muted</li><li>controls</li><li>crossorigin<br><code>&lt;iframe&gt;&lt;/iframe&gt;</code><br>内嵌的浏览上下文<br>另一个HTML页面嵌入到当前页面中<br>属性</li><li>src</li><li>width</li><li>height</li><li>name</li><li>sandbox<ul><li>allow-forms</li><li>allow-pointer-lock</li><li>allow-popups</li><li>allow-presentation</li><li>allow-same-origin</li><li>allow-scripts</li><li>allow-top-navigation<br><code>&lt;form&gt;&lt;/form&gt;</code><br>label<br>input<br>fieldset<br>select<br>textarea<br>button<br>output<br>object<br>meter<br>progressimg</li></ul></li><li>label<br>表单控件的标题</li><li>select<br>列表选择器</li><li>不加      默认单选</li><li>multiple  多选模式配置</li><li>size&#x3D;”4”  单选（四选一）</li></ul><p>状态禁用<br>选择器禁用<code>&lt;select disabled&gt;</code><br>选项禁用<code>&lt;option disabled&gt;</code><br>选项组禁用<code>&lt;optgroup disabled&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Html" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Html/"/>
    
    
    <category term="Html" scheme="https://superq314.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://superq314.github.io/posts/20802113/"/>
    <id>https://superq314.github.io/posts/20802113/</id>
    <published>2022-09-14T05:11:25.000Z</published>
    <updated>2022-09-30T13:34:42.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语义话的目的是什么？"><a href="#语义话的目的是什么？" class="headerlink" title="语义话的目的是什么？"></a>语义话的目的是什么？</h3><p>语义化的主要目的可以概括为用正确的标签做正确的事</p><p>HTMl语义化可以让页面的内容结构化，以便于浏览器解析和搜索引擎解析，<br>并且提高了代码的可读性便于代码维护，</p><h3 id="HTML5新增元素"><a href="#HTML5新增元素" class="headerlink" title="HTML5新增元素"></a>HTML5新增元素</h3><p>Canvas绘图以及SVG绘图。<br>拖放（Drag and drop）API<br>语义化标签（header、nav、footer、article、section）<br>音频、视频（audio、video）API<br>地理定位（Geolocation）<br>本地离线存储（localStorage）,长期存储数据，关闭浏览器后不丢失。<br>会话储存（sessionStorage）,数据在关闭浏览器后自动删除。<br>表单控件（calendar、date、time、email、url、search）</p><h3 id="cookie与sessionStorage和localStorage的区别"><a href="#cookie与sessionStorage和localStorage的区别" class="headerlink" title="cookie与sessionStorage和localStorage的区别"></a>cookie与sessionStorage和localStorage的区别</h3><ul><li>保存方式<ul><li>cookie存放在客户的浏览器上。</li><li>session都在客户端中保存，不参与服务器通讯。</li></ul></li><li>生命周期<ul><li>cookie可设置失效时间</li><li>localStorage除非手动清除否则永久保存</li><li>sessionStorage关闭当前页面或浏览器后失效</li></ul></li><li>存储的大小<ul><li>cookie 4kb左右</li><li>session 5M</li></ul></li><li>易用性<ul><li>cookie需自己封装</li><li>session可以接受原生接口</li></ul></li></ul><p>因为cookie每次请求都会携带在http请求中,所以它的主要用来识别用户登录,localStorage可以用来跨页面传参,sessionStorage可以用来保留一些临时数据。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS有哪些基本的选择器，执行先后顺序？"><a href="#CSS有哪些基本的选择器，执行先后顺序？" class="headerlink" title="CSS有哪些基本的选择器，执行先后顺序？"></a>CSS有哪些基本的选择器，执行先后顺序？</h3><p>id选择器 &#x3D;&gt; #myId {}<br>类选择器 &#x3D;&gt; .myClass {}<br>标签选择器 &#x3D;&gt; p,h1 {}<br>后代选择器 &#x3D;&gt; div h1 {}<br>子选择器 &#x3D;&gt; div&gt;h1 {}<br>兄弟选择器(所有的兄弟) &#x3D;&gt; ul~h1 {}<br>相邻兄弟选择器 &#x3D;&gt; ul+h1 {}<br>属性选择器 &#x3D;&gt; li[name&#x3D;’sss’] {}<br>伪类选择器 &#x3D;&gt; h1:hover {}<br>伪元素选择器 &#x3D;&gt; h1::before{}<br>通配符选择器* &#x3D;&gt; * {}</p><p>!important&gt;内联样式（非选择器）&gt;ID选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器（*）</p><h3 id="垂直水平居中方式有哪些？"><a href="#垂直水平居中方式有哪些？" class="headerlink" title="垂直水平居中方式有哪些？"></a>垂直水平居中方式有哪些？</h3><h3 id="常用布局方式有哪些？什么是盒模型？"><a href="#常用布局方式有哪些？什么是盒模型？" class="headerlink" title="常用布局方式有哪些？什么是盒模型？"></a>常用布局方式有哪些？什么是盒模型？</h3><h3 id="常用的块元素与行内元素有哪些？有什么特征"><a href="#常用的块元素与行内元素有哪些？有什么特征" class="headerlink" title="常用的块元素与行内元素有哪些？有什么特征"></a>常用的块元素与行内元素有哪些？有什么特征</h3><p>块元素：div、h1~h6、ul、li、table、p、br、form。<br>特征：独占一行，换行显示，可以设置宽高，可以嵌套块和行</p><p>行内元素：span、a、img、textarea、select、option、input。<br>特征：只有在行内显示，内容撑开宽、高，不可以设置宽、高（img、input、textarea等除外）。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>父级div定义overflow:hidden（如果父级元素有定位元素超出父级，超出部分会隐藏，）<br>给浮动元素父级增加标签（由于新增标签会造成不必要的渲染，不建议使用）<br>伪元素清除浮动：给浮动元素父级增加 .clearfix::after（content: ‘’; display: table;<br>clear: both;）（不会新增标签，不会有其他影响，）</p><h3 id="CSS3新特征"><a href="#CSS3新特征" class="headerlink" title="CSS3新特征"></a>CSS3新特征</h3><p>圆角（border-radius）<br>阴影（box-shadow）<br>文字特效(text-shadow)<br>线性渐变（gradient）<br>变换(transform)<br>更多的CSS选择器<br>更多背景设置（background）<br>色彩模式（rgba）<br>伪元素（::selection）<br>媒体查询（@media）<br>多栏布局（column）<br>图片边框（border-image）</p><h3 id="CSS中有哪些长度单位？"><a href="#CSS中有哪些长度单位？" class="headerlink" title="CSS中有哪些长度单位？"></a>CSS中有哪些长度单位？</h3><p>绝对长度单位：px<br>百分比: %<br>相对父元素字体大小单位: em<br>相对于根元素字体大小的单位: rem<br>相对于视口<em>宽度的百分比（100vw即视窗宽度的100%）: vw<br>相对于视口</em>高度的百分比（100vh即视窗高度的100%）: vh</p><h3 id="px、em、rem的区别"><a href="#px、em、rem的区别" class="headerlink" title="px、em、rem的区别"></a>px、em、rem的区别</h3><h3 id="display-none和visibility-hidden的区别"><a href="#display-none和visibility-hidden的区别" class="headerlink" title="display:none和visibility:hidden的区别"></a>display:none和visibility:hidden的区别</h3><p>display:none：隐藏元素，在文档布局中不在给它分配空间（从文档中移除），会引起回流（重排）<br>visibility:hidden: 隐藏元素，但是在文档布局中仍保留原来的空间（还在文档中），不会引起回流（重绘）</p><h3 id="用CSS-实现三角形"><a href="#用CSS-实现三角形" class="headerlink" title="用CSS 实现三角形"></a>用CSS 实现三角形</h3><h3 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h3><h3 id="什么是重绘，重排？如何解决？"><a href="#什么是重绘，重排？如何解决？" class="headerlink" title="什么是重绘，重排？如何解决？"></a>什么是重绘，重排？如何解决？</h3><h4 id="重绘（repaint-x2F-redraw）"><a href="#重绘（repaint-x2F-redraw）" class="headerlink" title="重绘（repaint&#x2F;redraw）"></a>重绘（repaint&#x2F;redraw）</h4><p>某个dom节点的颜色，背景颜色变了，字体大小，只影响自己，不影响其他元素。</p><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p><h4 id="重排（回流-x2F-reflow-x2F-重构）"><a href="#重排（回流-x2F-reflow-x2F-重构）" class="headerlink" title="重排（回流&#x2F;reflow&#x2F;重构）"></a>重排（回流&#x2F;reflow&#x2F;重构）</h4><p>某个dom节点的宽高，布局，隐藏等发生改变，不仅自身发生了改变，而且其他元素也会受到影响随之发生改变。每个页面最少一次回流，就是页面第一次加载的时候。</p><h4 id="触发重排的原因"><a href="#触发重排的原因" class="headerlink" title="触发重排的原因"></a>触发重排的原因</h4><p>页面初始化渲染（无可避免）<br>添加或删除可见的DOM元素<br>元素尺寸的改变——大小，外边距；边框<br>浏览器窗口尺寸的变化<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变<br>读取某些元素属性：（offsetLeft&#x2F;Top&#x2F;Height&#x2F;Width,　clientTop&#x2F;Left&#x2F;Width&#x2F;Height,　scrollTop&#x2F;Left&#x2F;Width&#x2F;Height,　width&#x2F;height,　getComputedStyle(), currentStyle(IE))</p><blockquote><p>1.重绘不一定重排，但是重排一定会重绘<br>2.重绘和重排的成本都是非常高的，要尽量减少dom的增删改</p></blockquote><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>不要直接操作样式，先设置好class，然后修改DOM的className;<br>position:absolute 与flex 不会导致重排<br>不要把DOM 节点的属性放在一个循环当成循环的变量；<br>需要动画的元素脱离文档流；<br>不使用table 布局，<br>尽量不修改影响范围比较大的DOM;<br>如果要多次添加DOM,先使用  document.createDocumentFragment() 创建一个盒子，完盒子里面先添加子元素，添加完成在插入元素中；</p><h3 id="transition-都有哪些过度属性？"><a href="#transition-都有哪些过度属性？" class="headerlink" title="transition 都有哪些过度属性？"></a>transition 都有哪些过度属性？</h3><h3 id="link和-import的区别？"><a href="#link和-import的区别？" class="headerlink" title="link和@import的区别？"></a>link和@import的区别？</h3><p>link属于html标签，而@import是css提供的。<br>页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载的。<br>兼容性问题：@import只在IE5以上才能识别，而link是html标签，无兼容性问题。<br>权重问题:@import的权重要高于link。<br>DOM操作:DOM可以操作link中的样式，而不可以操作@import中的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- link 方式，推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @import 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(style.css);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用的动画库有哪些？"><a href="#常用的动画库有哪些？" class="headerlink" title="常用的动画库有哪些？"></a>常用的动画库有哪些？</h3><h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><h3 id="href与src的区别"><a href="#href与src的区别" class="headerlink" title="href与src的区别"></a>href与src的区别</h3><h3 id="如何让-CSS-只在当前组件中起作用？"><a href="#如何让-CSS-只在当前组件中起作用？" class="headerlink" title="如何让 CSS 只在当前组件中起作用？"></a>如何让 CSS 只在当前组件中起作用？</h3><p>将当前组件的 <code>&lt;style&gt;</code>修改为 <code>&lt;style scoped&gt;</code>。</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><h3 id="call、apply、bind-作用和区别（改变this指向）"><a href="#call、apply、bind-作用和区别（改变this指向）" class="headerlink" title="call、apply、bind 作用和区别（改变this指向）"></a>call、apply、bind 作用和区别（改变this指向）</h3><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><h3 id="JS基本数据类型"><a href="#JS基本数据类型" class="headerlink" title="JS基本数据类型"></a>JS基本数据类型</h3><h3 id="export和export-default的区别"><a href="#export和export-default的区别" class="headerlink" title="export和export default的区别"></a>export和export default的区别</h3><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ul><li>语法更加简洁、清晰，&#x3D;&gt;()</li><li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li><li>箭头函数不能使用arguments，而用reat参数…解决</li><li>箭头函数没有自己的this,会捕获其所在的上下文的this值,并且不能通过call()和apply()来改变其this</li><li>箭头函数没有原型</li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><h3 id="forEach和map的区别"><a href="#forEach和map的区别" class="headerlink" title="forEach和map的区别"></a>forEach和map的区别</h3><h3 id="对象的继承"><a href="#对象的继承" class="headerlink" title="对象的继承"></a>对象的继承</h3><p>常见的：<br>    原型链继承<br>    借用构造函数继承<br>    原型链 + 借用构造函数的组合继承（使用 call 或 applay 方法）<br>    ES6中class 的继承（class可以通过extends关键字实现继承）</p><h3 id="简述一下你理解的面向对象"><a href="#简述一下你理解的面向对象" class="headerlink" title="简述一下你理解的面向对象"></a>简述一下你理解的面向对象</h3><p>面向对象是基于万物皆对象这个哲学观点. 把一个对象抽象成类，具体上就是把一个对象的静态特征和动态特征抽象成属性和方法，也就是把一类事物的算法和数据结构封装在一个类之中,程序就是多个对象和互相之间的通信组成的。</p><p><strong>面向对象具有封装性,继承性,多态性。</strong></p><p>封装：隐蔽了对象内部不需要暴露的细节,使得内部细节的变动跟外界脱离,只依靠接口进行通信.封装性降低了编程的复杂性。<br>继承：使得新建一个类变得容易,一个类从派生类那里获得其非私有的方法和公用属性的繁琐工作交给了编译器。<br>多态：继承和实现接口和运行时的类型绑定机制所产生的多态，使得不同的类所产生的对象能够对相同的消息作出不同的反应,极大地提高了代码的通用性.。</p><h3 id="x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;的区别"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;的区别</h3><h3 id="数组有哪些方法？"><a href="#数组有哪些方法？" class="headerlink" title="数组有哪些方法？"></a>数组有哪些方法？</h3><h3 id="数组去重（笔试一般都会有）"><a href="#数组去重（笔试一般都会有）" class="headerlink" title="数组去重（笔试一般都会有）"></a>数组去重（笔试一般都会有）</h3><h3 id="JS中new操作符有什么用？"><a href="#JS中new操作符有什么用？" class="headerlink" title="JS中new操作符有什么用？"></a>JS中new操作符有什么用？</h3><p>创建临时对象，并将this指向临时对象<br>将构造函数的原型属性和方法挂载到新对象的__proto__(原型指针)上<br>return 临时对象</p><h3 id="JS获取HTML-DOM元素的方法"><a href="#JS获取HTML-DOM元素的方法" class="headerlink" title="JS获取HTML DOM元素的方法"></a>JS获取HTML DOM元素的方法</h3><p>通过ID获取（getElementById）<br>通过name属性（getElementsByName）<br>通过标签名（getElementsByTagName）<br>通过类名（getElementsByClassName）<br>获取html的方法（document.documentElement）<br>获取body的方法（document.body）<br>通过选择器获取一个元素（querySelector）<br>通过选择器获取一组元素（querySelectorAll）</p><h3 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h3><ul><li>事件捕获和事件冒泡主要解决了页面事件流的问题。页面的事件流经过了三个阶段，分别是事件捕获、目标阶段和事件冒泡阶段。</li><li>事件捕获是由外向内；而事件冒泡则是由内向外。</li><li>event.stopPropagation() 可以阻止事件流的进一步传播。</li><li>采用事件代理的方式，能够节省内存消耗，对于动态改变子元素的时候，也非常有利，避免了很多麻烦的步骤，比如重新绑定事件。（把子元素的事件委托给父元素来处理）</li></ul><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>定义：虚拟DOM就是普通的js对象。用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。<br>作用：虚拟dom可以很好地跟踪当前dom状态，因为它会根据当前数据生成一个描述当前dom结构的虚拟dom，然后数据发生变化时，有生成一个新的虚拟dom，而两个虚拟dom恰好保存了变化前后的状态。然后通过diff算法，计算出当前两个虚拟dom之间的差异，得出一个更好的替换方案。</p><h3 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h3><p>冒泡排序：比较所有相邻元素,如果第一个比第二个大，则交换它们。<br>选择排序：找到数组中的最小值，选中它并将其放置在第一位。<br>插入排序：从第二个数开始往前比，比它大就往后排。<br>归并排序：把数组劈成两半，再递归地对数组进行“分”操作，直到分成一个个单独的数。<br>快速排序：从数组中任意选择一个基准，所有比基准小的元素放到基准前面，比基准大的元素放到基准的后面。</p><h3 id="数组操作方法会改变原数组"><a href="#数组操作方法会改变原数组" class="headerlink" title="数组操作方法会改变原数组"></a>数组操作方法会改变原数组</h3><p>会改变：push()，pop(),shift(),unshift() ,splice(),sort(),reverse()。<br>不变：concat(),split(),slice()。</p><h3 id="JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用"><a href="#JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用" class="headerlink" title="JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用"></a>JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用</h3><h3 id="JS有几种方法判断变量的类型？"><a href="#JS有几种方法判断变量的类型？" class="headerlink" title="JS有几种方法判断变量的类型？"></a>JS有几种方法判断变量的类型？</h3><p>typeof：</p><pre><code>判断基本数据类型，对于引用数据类型除了function返回’function‘，其余全部返回’object’。</code></pre><p>instanceof：</p><pre><code>区分引用数据类型，检测方法是检测的类型在当前实例的原型链上，用其检测出来的结果都是true，不太适合用于简单数据类型的检测，检测过程繁琐且对于简单数据类型中的undefined, null, symbol检测不出来。</code></pre><p>instanceof的实现原理：</p><pre><code>验证当前类的原型prototype是否会出现在实例的原型链__proto__上，只要在它的原型链上，则结果都为true。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，找到返回true，未找到返回false。</code></pre><p>constructor：</p><pre><code>检测引用数据类型，检测方法是获取实例的构造函数判断和某个类是否相同，如果相同就说明该数据是符合那个数据类型的，这种方法不会把原型链上的其他类也加入进来，避免了原型链的干扰。</code></pre><p>Object.prototype.toString.call()：</p><pre><code>适用于所有类型的判断检测，检测方法是Object.prototype.toString.call(数据) 返回的是该数据类型的字符串。(举例：字符串返回的是[object String])</code></pre><p>Object.prototype.toString.call原理：</p><pre><code>Object.prototype.toString 表示一个返回对象类型的字符串，call()方法可以改变this的指向，那么把Object.prototype.toString()方法指向不同的数据类型上面，返回不同的结果</code></pre><h3 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h3><p>null和undefined 区别为：undefined是表示变量声明过但并未赋过值，它是所有未赋值变量默认值；null表示一个变量将来可能指向一个对象，一般用于主动释放指向对象的引用。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>（1）undefined：是所有没有赋值变量的默认值，自动赋值<br>（2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址</p><h4 id="null与undefined的异同点是什么呢？"><a href="#null与undefined的异同点是什么呢？" class="headerlink" title="null与undefined的异同点是什么呢？"></a>null与undefined的异同点是什么呢？</h4><p>共同点： 都是原始类型，保存在栈中变量本地<br>不同点：<br>（1）undefined——表示变量声明过但并未赋过值。<br>它是所有未赋值变量默认值。<br>例如：var a; &#x2F;&#x2F;a自动被赋值为undefined<br>（2）null——表示一个变量将来可能指向一个对象。<br>一般用于主动释放指向对象的引用。</p><h4 id="何时使用null"><a href="#何时使用null" class="headerlink" title="何时使用null?"></a>何时使用null?</h4><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为null</p><h3 id="什么是跨域？及跨域解决方法"><a href="#什么是跨域？及跨域解决方法" class="headerlink" title="什么是跨域？及跨域解决方法"></a>什么是跨域？及跨域解决方法</h3><h3 id="防抖和节流的使用及区别"><a href="#防抖和节流的使用及区别" class="headerlink" title="防抖和节流的使用及区别"></a>防抖和节流的使用及区别</h3><h3 id="栈内存和堆内存的区别与原理"><a href="#栈内存和堆内存的区别与原理" class="headerlink" title="栈内存和堆内存的区别与原理"></a>栈内存和堆内存的区别与原理</h3><h3 id="深拷贝和浅拷贝的区别和与原理"><a href="#深拷贝和浅拷贝的区别和与原理" class="headerlink" title="深拷贝和浅拷贝的区别和与原理"></a>深拷贝和浅拷贝的区别和与原理</h3><h3 id="webpack是怎么打包的，babel又是什么"><a href="#webpack是怎么打包的，babel又是什么" class="headerlink" title="webpack是怎么打包的，babel又是什么"></a>webpack是怎么打包的，babel又是什么</h3><p>Webpack：把所有依赖打包成一个 bundle.js文件，通过代码分割成单元片段并按需加载。Webpack是以公共JS的形式来书写脚本的，但对AMD&#x2F;CMD的支持也很全面，方便旧项目进行代码迁移。<br>把项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><p>babel将es6、es7、es8等语法转换成浏览器可识别的es5或es3语法。</p><h3 id="git-和-svn的区别"><a href="#git-和-svn的区别" class="headerlink" title="git 和 svn的区别"></a>git 和 svn的区别</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，首先要从中央服务器哪里得到最新的版本，干完活后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作（如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了）</p><p>Git是分布式版本控制系统，没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="webSocket"><a href="#webSocket" class="headerlink" title="webSocket"></a>webSocket</h3><p>webSocket： 可以让服务器主动向客户端发送消息，适合开发聊天室，多人游戏等协作应用。</p><p>WebSocket协议是基于TCP的一种新的网络协议。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><h3 id="require和import区别"><a href="#require和import区别" class="headerlink" title="require和import区别"></a>require和import区别</h3><ul><li><p>调用时间</p><p>require运行时调用，理论上可以运用在代码任何地，甚至不需要赋值给某个变量之后再使用。<br>lmport是编译时候调用，必须放在文件开头，而且使用格式也是确定的。</p></li><li><p>遵循规范</p><p>require 是 AMD规范引入方式<br>import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p></li><li><p>本质<br>require是赋值过程，其实require 的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量。<br>import是解构过程。</p></li></ul><p>通过require 引入基础数据类型时，属于复制该变量。<br>通过require 引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时,会输出已经执行的模块,而未执行的模块不输出(比较复杂）。CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p><p>ES6 模块语法是 JavaScript 模块的标准写法，坚持使用这种写法，取代 Node.js 的 CommonJS 语法。<br>使用import取代require()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS 的写法</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.<span class="property">func1</span>;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.<span class="property">func2</span>;</span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用export取代module.exports。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonJS 的写法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Breadcrumbs</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;nav /&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Breadcrumbs</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Breadcrumbs</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;nav /&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Breadcrumbs</span>;</span><br></pre></td></tr></table></figure><h3 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a>事件循环（Event Loop）</h3><p>原因：JavaScript是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。</p><p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。<br>同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务：不进入主线程、而进入”任务队列”的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>同步和异步任务分别进入不同的执行环境， 先执行同步任务，把异步任务放入循环队列当中挂起，等待同步任务执行完，再执行队列中的异步任务。异步任务先执行微观任务，再执行宏观任务。一直这样循环，反复执行。</p><p>微任务：Promise.then、catch、finally、async&#x2F;await。<br>宏任务：整体代码 Script、UI 渲染、setTimeout、setInterval、Dom事件、ajax事件。</p><h3 id="宏任务、微任务是怎么执行的？"><a href="#宏任务、微任务是怎么执行的？" class="headerlink" title="宏任务、微任务是怎么执行的？"></a>宏任务、微任务是怎么执行的？</h3><p>执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</p><h3 id="什么是单页面应用（SPA）"><a href="#什么是单页面应用（SPA）" class="headerlink" title="什么是单页面应用（SPA）"></a>什么是单页面应用（SPA）</h3><p>一个系统只加载一次资源，之后的操作交互、数据交互是通过路由、ajax来进行，页面并没有刷新。<br>在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。</p><p>优点：<br>前后端分离<br>良好的交互体验——用户不用刷新页面，页面显示流畅<br>减轻服务器压力——服务器只出数据<br>共用一套后端代码——多个客户端可共用一套后端代码<br>加载速度快,内容的改变不需要重新加载整个页面,对服务器压力小<br>缺点：<br>SEO难度高——数据渲染在前端进行<br>页面初次加载比较慢,页面复杂提高很多<br>多页面： 一个应用多个页面,页面跳转时整个页面都刷新,每次都请求一个新的页面<br>有点:SEO效果好</p><p>缺点： 页面切换慢,每次切换页面需要选择性的重新加载公共资源</p><h3 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h3><p>渐进增强（Progressive Enhancement）： 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。<br>优雅降级（Graceful Degradation）： 一开始就构建站点的完整功能，然后针对浏览器测试和修复。</p><p>在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的。</p><p>二者区别：<br>1、优雅降级和渐进增强只是看待同种事物的两种观点。<br>2、优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。<br>3、渐进增强观点则认为应关注于内容本身。</p><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><p>新增块级作用域let定义变量和const定义常量<br>变量的解构赋值<br>模板字符串 （‘${}’）<br>默认参数（key&#x3D;value）<br>箭头函数（&#x3D;&gt;）<br>扩展运算符（…）<br>模块（import&#x2F;export）<br>类（class&#x2F;extends）<br>Promise<br>Proxy<br>Symbol</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>含义： 异步编程的一种解决方案，用来解决回调地狱。<br>三种状态： pending（进行中）、fulfilled（已成功）和rejected（已失败） （Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。）</p><p>resolved函数作用：将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved）。<br>reject函数的作用：将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected）。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。<br>then: Promise 实例添加状态改变时的回调函数。可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。</p><p>缺点： 无法取消Promise，一旦新建它就会立即执行，无法中途取消。如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</p><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="MVVM、MVC-和-MVP-的区别是什么？各自有什么应用场景？"><a href="#MVVM、MVC-和-MVP-的区别是什么？各自有什么应用场景？" class="headerlink" title="MVVM、MVC 和 MVP 的区别是什么？各自有什么应用场景？"></a>MVVM、MVC 和 MVP 的区别是什么？各自有什么应用场景？</h3><p>MVC</p><ul><li>Model(模型)：负责从数据库中取数据</li><li>View(视图)：负责展示数据的地方</li><li>Controller(控制器)：用户交互的地方，例如点击事件</li><li>思想：Controller将Model的数据展示在View上</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4636ebbfa25049179c27a6b5ab8bb308~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>MVVM</p><ul><li>VM：也就是View-Model，做了两件事达到了数据的双向绑定<ul><li>一、将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。</li><li>二、将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li></ul></li><li>思想：实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应Vue数据驱动的思想）</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aac31b27392b4b0e90ca2f67c64c59c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>区别</p><p>整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性</p><h3 id="如何理解-Vue-是一个渐进式框架？"><a href="#如何理解-Vue-是一个渐进式框架？" class="headerlink" title="如何理解 Vue 是一个渐进式框架？"></a>如何理解 Vue 是一个渐进式框架？</h3><p>Vue是MVVM框架，但是不是严格符合MVVM，因为MVVM规定Model和View不能直接通信，而Vue的 <code>ref</code>可以做到这点</p><h3 id="Vue的优点？Vue的缺点？"><a href="#Vue的优点？Vue的缺点？" class="headerlink" title="Vue的优点？Vue的缺点？"></a>Vue的优点？Vue的缺点？</h3><p>优点：渐进式，组件化，轻量级，虚拟dom，响应式，单页面路由，数据与视图分开</p><p>缺点：单页面不利于seo，不支持IE8以下，首屏加载时间长</p><h3 id="Vue和React的异同点？"><a href="#Vue和React的异同点？" class="headerlink" title="Vue和React的异同点？"></a>Vue和React的异同点？</h3><p>相同点：</p><ul><li>使用虚拟dom</li><li>组件化开发</li><li>单向数据流(父子组件之间，不建议子修改父传递的数据)</li><li>支持服务端渲染</li></ul><p>不同点：</p><ul><li>React的JSX，Vue的template</li><li>数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty)</li><li>React单向绑定，Vue双向绑定</li><li>React的Redux，Vue的Vuex</li></ul><h3 id="Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？"><a href="#Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？" class="headerlink" title="Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？"></a>Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？</h3><ul><li>jQuery直接操作DOM，Vue不直接操作DOM，Vue的数据与视图是分开的，Vue只需要操作数据即可</li><li>在操作DOM频繁的场景里，jQuery的操作DOM行为是频繁的，而Vue利用虚拟DOM的技术，大大提高了更新DOM时的性能</li><li>Vue中不倡导直接操作DOM，开发者只需要把大部分精力放在数据层面上</li><li>Vue集成的一些库，大大提高开发效率，比如Vuex，Router等</li></ul><h3 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h3><p>通过数据劫持结合发布—订阅模式，通过Object.defineProperty()为各个属性定义get、set方法，在数据发生改变时给订阅者发布消息，触发相应的事件回调。</p><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/892fde0e56324868921d0e924c84858a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。</p><ul><li><p>beforeCreate</p><p>创建前。此时，组件实例刚刚创建，还未进行数据观测和事件配置，拿不到任何数据。</p></li><li><p>created</p><p>创建完成。vue 实例已经完成了数据观测，属性和方法的计算(比如props、methods、data、computed和watch此时已经拿得到)，未挂载到DOM，不能访问到el属性，el属性，ref属性内容为空数组常用于简单的ajax请求，页面的初始化。</p></li><li><p>beforeMount</p><p>挂载前。挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM）。编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上。</p></li><li><p>mounted</p><p>挂载完成。也就是模板中的HTML渲染到HTML页面中，此时可以通过DOM API获取到DOM节点，$ref属性可以访问常用于获取VNode信息和操作，ajax请求，mounted只会执行一次。</p></li><li><p>beforeUpdate</p><p>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，不会触发附加地重渲染过程。</p></li><li><p>updated</p><p>更新后。在由于数据更改导致地虚拟DOM重新渲染和打补丁之后调用，</p></li><li><p>beforeDestroy</p><p>销毁前。在实例销毁之前调用，实例仍然完全可用。（一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件）</p></li><li><p>destroyed</p><p>销毁后。在实例销毁之后调用，调用后，vue实列指示的所有东西都会解绑，所有的事件监听器会被移除。<br>其他：</p></li><li><p>activated</p><p>在keep-alive组件激活时调用</p></li><li><p>deactivated</p><p>在keep-alive组件停用时调用</p></li></ul><h3 id="vuex的有哪些属性？用处是什么？"><a href="#vuex的有哪些属性？用处是什么？" class="headerlink" title="vuex的有哪些属性？用处是什么？"></a>vuex的有哪些属性？用处是什么？<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9566927e955c4d0ba19df942534e5b53~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></h3><h3 id="为什么使用虚拟DOM-常问"><a href="#为什么使用虚拟DOM-常问" class="headerlink" title="为什么使用虚拟DOM(常问)"></a>为什么使用虚拟DOM(常问)</h3><p>创建真实DOM的代价高：真实的 DOM 节点 node 实现的属性很多，而 vnode 仅仅实现一些必要的属性，相比起来，创建一个 vnode 的成本比较低。<br>触发多次浏览器重绘及回流：使用 vnode ，相当于加了一个缓冲，让一次数据变动所带来的所有 node 变化，先在 vnode 中进行修改，然后 diff 之后对所有产生差异的节点集中一次对 DOM tree 进行修改，以减少浏览器的重绘及回流。<br>虚拟dom由于本质是一个js对象，因此天生具备跨平台的能力，可以实现在不同平台的准确显示。<br>Virtual DOM 在性能上的收益并不是最主要的，更重要的是它使得 Vue 具备了现代框架应有的高级特性。</p><h3 id="v-if-和-v-show的作用和区别"><a href="#v-if-和-v-show的作用和区别" class="headerlink" title="v-if 和 v-show的作用和区别"></a>v-if 和 v-show的作用和区别</h3><ul><li><code>v-if</code>：通过控制dom元素的删除和生成来实现显隐，每一次显隐都会使组件重新跑一遍生命周期，因为显隐决定了组件的生成和销毁</li><li><code>v-show</code>：通过控制dom元素的css样式来实现显隐，不会销毁</li><li>频繁或者大数量显隐使用 <code>v-show</code>，否则使用 <code>v-if</code></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">无论v-<span class="built_in">show</span>的值为<span class="literal">true</span>或者<span class="literal">false</span>,元素都会存在于html页面中; 而v-<span class="keyword">if</span>的值为<span class="literal">true</span>时,元素才会存在于html页面中。</span><br><span class="line">v-<span class="built_in">show</span>指令是通过修改元素的<span class="built_in">display</span>属性来实现的。</span><br><span class="line">v-<span class="keyword">if</span>是动态地向DOM树内添加或者删除DOM元素,v-<span class="built_in">show</span>是通过设置DOM元素的<span class="built_in">display</span>样式属性控制显隐的。</span><br><span class="line">v-<span class="keyword">if</span>是<span class="string">&quot;真正的&quot;</span>条件渲染,因为它会确保在奇幻过程中条件快内的事件监听器和子组件适当的销毁和重建。</span><br><span class="line">v-<span class="keyword">if</span>也是惰性的,如果在初始渲染时条件为假,则什么也不做,直到条件第一次变为真时,才开始渲染条件块。</span><br><span class="line">v-<span class="built_in">show</span>不管初始条件是什么,元素总会背渲染,并且只是简单地基于css进行切换。</span><br><span class="line">一般来说,v-<span class="keyword">if</span>有更高的切换开销,而v-<span class="built_in">show</span>则有更高的初始渲染开销</span><br></pre></td></tr></table></figure><p>因此,如果需要非常频繁地切换,使用v-show比较好,如果在运行时条件不会改变时,用v-if比较好</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">切换时生命周期函数的执行</span><br><span class="line">v-<span class="keyword">if</span></span><br><span class="line">初始渲染</span><br><span class="line">初始值为<span class="keyword">false</span>时,不会渲染(所谓惰性),生命周期函数不会执行</span><br><span class="line">初始值为<span class="keyword">true</span>时,组件开始渲染,依次执行beforCreate,created,beforeMount,mounted等生命周期</span><br><span class="line"></span><br><span class="line">切换时</span><br><span class="line">从<span class="keyword">false</span>到<span class="keyword">true</span>:依次执行beforeCreate,created,beforeMount,moynted</span><br><span class="line">从<span class="keyword">true</span>到<span class="keyword">false</span>:依次执行beforeDestroy,destroyed</span><br><span class="line"></span><br><span class="line">v-<span class="keyword">show</span></span><br><span class="line">初始渲染</span><br><span class="line">无论初始状态为<span class="keyword">true</span>还是<span class="keyword">false</span>,组件都会渲染,依次执行beforeCreate,created,beforeMount,mounted</span><br><span class="line"></span><br><span class="line">切换</span><br><span class="line">基于css进行切换,对生命周期函数无影响.</span><br></pre></td></tr></table></figure><h3 id="Vue-2-x-模板中的指令是如何解析实现的？"><a href="#Vue-2-x-模板中的指令是如何解析实现的？" class="headerlink" title="Vue 2.x 模板中的指令是如何解析实现的？"></a>Vue 2.x 模板中的指令是如何解析实现的？</h3><h3 id="简要说明-Vue-2-x-的全链路运作机制？"><a href="#简要说明-Vue-2-x-的全链路运作机制？" class="headerlink" title="简要说明 Vue 2.x 的全链路运作机制？"></a>简要说明 Vue 2.x 的全链路运作机制？</h3><h3 id="Vue-里实现跨组件通信的方式有哪些？"><a href="#Vue-里实现跨组件通信的方式有哪些？" class="headerlink" title="Vue 里实现跨组件通信的方式有哪些？"></a>Vue 里实现跨组件通信的方式有哪些？</h3><h3 id="Vue-中响应式数据是如何做到对某个对象的深层次属性的监听的？"><a href="#Vue-中响应式数据是如何做到对某个对象的深层次属性的监听的？" class="headerlink" title="Vue 中响应式数据是如何做到对某个对象的深层次属性的监听的？"></a>Vue 中响应式数据是如何做到对某个对象的深层次属性的监听的？</h3><h3 id="用过vue的哪些组件？"><a href="#用过vue的哪些组件？" class="headerlink" title="用过vue的哪些组件？"></a>用过vue的哪些组件？</h3><p>1、vue-route<br>2、axios<br>3、vuex<br>4、Element UI<br>5、swiper<br>6、vue-echarts<br>7、vue-video-player<br>8、vue-photo-preview等等</p><h3 id="相同的路由组件如何重新渲染？"><a href="#相同的路由组件如何重新渲染？" class="headerlink" title="相同的路由组件如何重新渲染？"></a>相同的路由组件如何重新渲染？</h3><blockquote><p>开发人员经常遇到的情况是，多个路由解析为同一个Vue组件。问题是，Vue出于性能原因，默认情况下共享组件将不会重新渲染，如果你尝试在使用相同组件的路由之间进行切换，则不会发生任何变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/a&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">MyComponent</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/b&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">MyComponent</span></span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>如果依然想重新渲染，怎么办呢？可以使用 <code>key</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">&quot;$route.path&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-router-的路由模式有？"><a href="#vue-router-的路由模式有？" class="headerlink" title="vue-router 的路由模式有？"></a>vue-router 的路由模式有？</h3><p>1、hash模式，用URL hash值来做路由，支持所有浏览器；该模式实现的路由，在通过链接后面添加““#”+路由名字”，触发 <code>hashchange</code>事件，实现路由切换<br>2、history模式，由h5提供的history对象实现，依赖H5 History API和服务器配置，通过 <code>pushState</code>和 <code>replaceState</code>切换url，实现路由切换，需要后端配合<br>3、abstract模式，支持所有JS运行环境，如Node服务器端，如果发现没有浏览器的API，路由会自动强制进入该模式。</p><h3 id="组件之间如何传值"><a href="#组件之间如何传值" class="headerlink" title="组件之间如何传值"></a>组件之间如何传值</h3><ul><li>Vue父子 组件之间传值<ul><li>子组件通过 <code>props</code>来接受数据</li><li>子组件通过 <code>$emit</code>来触发父组件的自定义事件（即传值）</li></ul></li><li>组件中可以使用 <code>$parent</code>和 <code>$children</code>获取到父组件实例和子组件实例，进而获取数据</li><li>使用 <code>$attrs</code>和 <code>$listeners</code>，在对一些组件进行二次封装时可以方便传值，例如A-&gt;B-&gt;C</li><li>使用 <code>$refs</code>获取组件实例，进而获取数据</li><li>使用 <code>Vuex</code>进行状态管理</li><li>使用 <code>eventBus</code>进行跨组件触发事件，进而传递数据</li><li>使用 <code>provide</code>和 <code>inject</code>，官方建议我们不要用这个，我在看 <code>ElementUI</code>源码时发现大量使用</li><li>使用浏览器本地缓存，例如 <code>localStorage</code></li></ul><h3 id="路由之间如何传参"><a href="#路由之间如何传参" class="headerlink" title="路由之间如何传参"></a>路由之间如何传参</h3><ul><li>通过router-link路由导航跳转传递<br><code>&lt;router-link to=</code>&#x2F;a&#x2F;${id}<code>&gt;routerlink传参&lt;/router-link&gt;</code></li><li>跳转时使用push方法拼接携带参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">`/getlist/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过路由属性中的name来确定匹配的路由，通过params来传递参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Getlist&#x27;</span>,</span><br><span class="line">   <span class="attr">params</span>: &#123;</span><br><span class="line">     <span class="attr">id</span>: id</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><ul><li>使用path来匹配路由，然后通过query来传递参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&#x27;/getlist&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：query有点像ajax中的get请求，而params像post请求。</p></blockquote><p>params在地址栏中不显示参数，刷新页面，参数丢失,<br>其余方法在地址栏中显示传递的参数，刷新页面，参数不丢失。</p><h3 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h3><p>原理：Vuex是专门为vue.js应用程序设计的状态管理工具。</p><p>1、state   保存vuex中的数据源，通过this.$store.state获取</p><p>2、getters用于监听state中的值的变化，返回计算后的结果。getter的返回值会根据它的依赖被缓存起来</p><p>3、mutations  是修改store中的值得唯一方式&#x2F;&#x2F;this.$store.commit(‘add’)</p><p>4、action 官方建议提交一个actions，在actions中提交mutations再去修改状态值。this.$store.dispatch(‘add’)</p><p>5、modules 模块化</p><h3 id="如何解决vuex页面刷新数据丢失问题？"><a href="#如何解决vuex页面刷新数据丢失问题？" class="headerlink" title="如何解决vuex页面刷新数据丢失问题？"></a>如何解决vuex页面刷新数据丢失问题？</h3><p>原因：因为vuex里的数据是保存在运行内存中的，当页面刷新时，页面会重新加载vue实例，vuex里面的数据就会被清空。<br>解决方法：将vuex中的数据直接保存到浏览器缓存中。（一般是用sessionStorage）</p><h3 id="computed和watch的区别？"><a href="#computed和watch的区别？" class="headerlink" title="computed和watch的区别？"></a>computed和watch的区别？</h3><p>computed值有缓存、触发条件是依赖值发生更改、 watch无缓存支持异步、监听数据变化</p><p>computed： 是计算属性，依赖其它属性值，并且computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><p>watch： 更多的是观察的作用，支持异步，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><p>computed应用场景：需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</p><p>watch应用场景：需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><ul><li><code>computed</code>是依赖已有的变量来计算一个目标变量，大多数情况都是 <code>多个变量</code>凑在一起计算出 <code>一个变量</code>，并且 <code>computed</code>具有 <code>缓存机制</code>，依赖值不变的情况下其会直接读取缓存进行复用，<code>computed</code>不能进行 <code>异步操作</code></li><li><code>watch</code>是监听某一个变量的变化，并执行相应的回调函数，通常是 <code>一个变量</code>的变化决定 <code>多个变量</code>的变化，<code>watch</code>可以进行 <code>异步操作</code></li><li>简单记就是：一般情况下 <code>computed</code>是 <code>多对一</code>，<code>watch</code>是 <code>一对多</code></li></ul><h3 id="computed如何实现传参？"><a href="#computed如何实现传参？" class="headerlink" title="computed如何实现传参？"></a>computed如何实现传参？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div&gt;&#123;&#123; <span class="title function_">total</span>(<span class="number">3</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> n * <span class="variable language_">this</span>.<span class="property">num</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="watch有哪些属性，分别有什么用？"><a href="#watch有哪些属性，分别有什么用？" class="headerlink" title="watch有哪些属性，分别有什么用？"></a>watch有哪些属性，分别有什么用？</h3><p>当我们监听一个基本数据类型时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    value () &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们监听一个引用数据类型时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">obj</span>: &#123;</span><br><span class="line">       handler () &#123; <span class="comment">// 执行回调</span></span><br><span class="line">           <span class="comment">// do something</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 是否进行深度监听</span></span><br><span class="line">       <span class="attr">immediate</span>: <span class="literal">true</span> <span class="comment">// 是否初始执行handler函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch的immediate属性有什么用？"><a href="#watch的immediate属性有什么用？" class="headerlink" title="watch的immediate属性有什么用？"></a>watch的immediate属性有什么用？</h3><blockquote><p>比如平时created时要请求一次数据，并且当搜索值改变，也要请求数据，我们会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">searchInputValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>immediate</code>完全可以这么写，当它为 <code>true</code>时，会初始执行一次</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">searchInputValue</span>:&#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="string">&#x27;getList&#x27;</span>,</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch监听一个对象时，如何排除某些属性的监听"><a href="#watch监听一个对象时，如何排除某些属性的监听" class="headerlink" title="watch监听一个对象时，如何排除某些属性的监听"></a>watch监听一个对象时，如何排除某些属性的监听</h3><blockquote><p>下面代码是，params发生改变就重新请求数据，无论是a，b，c，d属性改变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是如果我只想要a，b改变时重新请求，c，d改变时不重新请求呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">params</span>)</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> ![<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>].<span class="title function_">includes</span>(_)) <span class="comment">// 排除对c，d属性的监听</span></span><br><span class="line">      .<span class="title function_">forEach</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$watch(<span class="function">(<span class="params">vm</span>) =&gt;</span> vm.<span class="property">params</span>[_], handler, &#123;</span><br><span class="line">          <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="route和router的区别"><a href="#route和router的区别" class="headerlink" title="route和router的区别"></a>route和router的区别</h3><p>route:是路由信息对象，包括“path,parms,hash,name“等路由信息参数。<br>router:是路由实例对象，包括了路由跳转方法，钩子函数等。</p><h3 id="vue中数据变了但是视图不跟新怎么解决？"><a href="#vue中数据变了但是视图不跟新怎么解决？" class="headerlink" title="vue中数据变了但是视图不跟新怎么解决？"></a>vue中数据变了但是视图不跟新怎么解决？</h3><p>vue不能检测以下变动的数组：</p><p>1、当你利用索引直接设置一个项时，vm.items[indexOfItem] &#x3D; newValue<br>2、当你修改数组的长度时，例如： vm.items.length &#x3D; newLength</p><p>对象属性的添加或删除</p><p>由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p><p>解决办法：</p><p>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上<br>Vue.set(vm.someObject, ‘b’, 2) 或者 this.$set(this.someObject,‘b’,2) （这也是全局 Vue.set 方法的别名）</p><p>异步更新队列</p><p>在最新的项目中遇到了这种情况，数据第一次获取到了，也渲染了，但是第二次之后数据只有在再一次渲染页面的时候更新，并不能实时更新。</p><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p><p>解决办法：</p><p>可在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数在 DOM 更新完成后就会调用</p><h3 id="vue中data为什么是函数而不是对象？"><a href="#vue中data为什么是函数而不是对象？" class="headerlink" title="vue中data为什么是函数而不是对象？"></a>vue中data为什么是函数而不是对象？</h3><p>vue组件是可复用的vue实例，一个组件被创建好之后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的data数据都应该是相互隔离，互不影响的.</p><p>基于这一理念，组件每复用一次，data数据就会被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响。</p><p>如果data是对象的话，每当被复用是，复用的对象和源对象都会指向同一个内存地址（浅拷贝），互相之间相互影响，所以要是函数</p><h3 id="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"><a href="#vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）" class="headerlink" title="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"></a>vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）</h3><p>首先了解父子组件生命周期执行顺序<br>加载渲染数据过程<br>父组件 beforeCreate<br>父组件 created<br>父组件 beforeMount<br>子组件 beforeCreate<br>子组件 created<br>子组件 beforeMount<br>子组件 mounted<br>父组件 mounted</p><p>原因：因为生命周期只会执行一次，数据是要等到异步请求以后才能拿到，那么子组件的mounted钩子执行的时候，还没有拿到父组件传递过来的数据，但是又必须要打印出来结果，那这样的话，就只能去打印props中的默认值空字符串了，所以打印的结果是一个空字符串。</p><p>解决办法：</p><p>1、使用v-if控制组件渲染的时机</p><p>初始还没拿到后端接口的异步数据的时候，不让组件渲染，等拿到的时候再去渲染组件。使用v-if&#x3D;”变量”去控制，初始让这个变量为false，这样的话，子组件就不会去渲染，等拿到数据的时候，再让这个变量变成true，</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isTrue</span>:<span class="literal">false</span> <span class="comment">// 初始为false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">monted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$post</span>.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="title function_">getData</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">result</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isTrue</span> = <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用watch监听数据的变化</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">tableData</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">default</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">   <span class="title function_">tableData</span>(<span class="params">val</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3、使用VueX</p><h3 id="Vue-路由跳转方式"><a href="#Vue-路由跳转方式" class="headerlink" title="Vue 路由跳转方式"></a>Vue 路由跳转方式</h3><p>router-link 标签跳转<br>this.$router.push()<br>this.$router.replace()<br>this.$router.go(n)：（0：当前页，-1上一页，+1下一页，n代表整数）</p><h3 id="Vue-中-for循环为什么加-key？"><a href="#Vue-中-for循环为什么加-key？" class="headerlink" title="Vue 中 for循环为什么加 key？"></a>Vue 中 for循环为什么加 key？</h3><p>为了性能优化， 因为vue是虚拟DOM，更新DOM时用diff算法对节点进行一一比对，比如有很多li元素，要在某个位置插入一个li元素，但没有给li上加key，那么在进行运算的时候，就会将所有li元素重新渲染一遍，但是如果有key，那么它就会按照key一一比对li元素，只需要创建新的li元素，插入即可，不需要对其他元素进行修改和重新渲染。<br>key也不能是li元素的index，因为假设我们给数组前插入一个新元素，它的下标是0，那么和原来的第一个元素重复了，整个数组的key都发生了改变，这样就跟没有key的情况一样了。</p><h3 id="vue路由守卫有哪些？"><a href="#vue路由守卫有哪些？" class="headerlink" title="vue路由守卫有哪些？"></a>vue路由守卫有哪些？</h3><p>路由守卫分为三种 ——分别是：全局路由守卫、组件路由守卫、独享路由守卫。</p><p>全局守卫<br>全局守卫又分为全局前置守卫、和后置守卫</p><ol><li>router.beforeEach((to,from,next)&#x3D;&gt;{})</li></ol><p>回调函数中的参数，to：进入到哪个路由去，from：从哪个路由离开，next：函数，决定是否展示你要看到的路由页面。</p><p>从名字全局前置守卫不难理解，它是全局的，即对 整个单页应用（SPA） 中的所有路由都生效，所以当定义了全局的前置守卫，在进入每一个路由之前都会调用这个回调，那么如果你在回调中对路由的跳转条件判断出错，简单点就是死循环…因为你遗漏了某种路由跳转的情况，守卫会一直执行。所以在使用全局前置守卫的时候一定要判断清楚可能会出现的路由跳转的情况。</p><p>2.router.afterEach((to, from) &#x3D;&gt; {}）</p><p>只有两个参数，to：进入到哪个路由去，from：从哪个路由离。</p><p>理解了全局前置守卫，那么全局后置守卫也就那么一回事。全局后置守卫是整个单页应用中每一次路由跳转后都会执行其中的回调。所以多用于路由跳转后的相应页面操作，并不像全局前置守卫那样会在回调中进行页面的重定向或跳转。</p><p>组件内的守卫<br>组件路由守卫分为到达这个组件时，离开这个组件时</p><ol><li>beforeRouteEnter:(to,from,next)&#x3D;&gt;{}——到达</li></ol><p>to，from参数与上面使用方法一致。next回调函数略有不同。<br>1<br>2.beforeRouteUpdate:(to,from,next)&#x3D;&gt;{}——更新</p><ol start="3"><li>beforeRouteLeave:(to,from,next)&#x3D;&gt;{}——离开</li></ol><p>点击其他组件时，判断是否确认离开。确认执行next()；取消执行next(false)，留在当前页面。<br>1<br>路由独享的守卫</p><ol><li>beforeEnter:(to,from,next)&#x3D;&gt;{}</li></ol><p>与全局路由守卫用法一致，但是只能针对一个页面使用<br>1</p><h3 id="vue常⽤的修饰符"><a href="#vue常⽤的修饰符" class="headerlink" title="vue常⽤的修饰符"></a>vue常⽤的修饰符</h3><p>.stop:等统⼀JavaScript中的event.stopPropagation(),防⽌事件冒泡<br>.prevent:等同于JavaScript中的event。preventDefault(),防⽌执⾏预设的⾏为(如果事件可<br>取消，则取消该事件，⽽不停⽌事件的进⼀步传播)；<br>.capture:与事件冒泡的⽅向相反，事件捕获由外到内<br>.self:只会触发⾃⼰范围内的事件，不包含⼦元素；<br>.once:只会触发⼀次。</p><h3 id="vue的两个核⼼点"><a href="#vue的两个核⼼点" class="headerlink" title="vue的两个核⼼点"></a>vue的两个核⼼点</h3><p>数据驱动：ViewModel，保证数据和视图的⼀致性<br>组件系统：应⽤类UI可以看做全部是由组件树构成的</p><h3 id="delete和Vue-delete删除数组的区别"><a href="#delete和Vue-delete删除数组的区别" class="headerlink" title="delete和Vue.delete删除数组的区别"></a>delete和Vue.delete删除数组的区别</h3><p>delete只是被删除的元素变成了empty&#x2F;undefined其他的元素的键值还是不变。<br>Vue.delete直接删除了数组 改变了数组的键值</p><h3 id="vue常⽤的UI组件库"><a href="#vue常⽤的UI组件库" class="headerlink" title="vue常⽤的UI组件库"></a>vue常⽤的UI组件库</h3><p>Mint UI，element，VUX</p><h3 id="简单介绍一下-Element-UI-的框架设计？"><a href="#简单介绍一下-Element-UI-的框架设计？" class="headerlink" title="简单介绍一下 Element UI 的框架设计？"></a>简单介绍一下 Element UI 的框架设计？</h3><h3 id="Vue首页白屏是什么问题引起的？如何解决呢？"><a href="#Vue首页白屏是什么问题引起的？如何解决呢？" class="headerlink" title="Vue首页白屏是什么问题引起的？如何解决呢？"></a>Vue首页白屏是什么问题引起的？如何解决呢？</h3><h3 id="为什么data是个函数并且返回一个对象呢？"><a href="#为什么data是个函数并且返回一个对象呢？" class="headerlink" title="为什么data是个函数并且返回一个对象呢？"></a>为什么data是个函数并且返回一个对象呢？</h3><p><code>data</code>之所以是一个函数，是因为一个组件可能会多处调用，而每一次调用就会执行 <code>data函数</code>并返回新的数据对象，这样，可以避免多处调用之间的 <code>数据污染</code>。</p><h3 id="如何获取data中某一个数据的初始状态？"><a href="#如何获取data中某一个数据的初始状态？" class="headerlink" title="如何获取data中某一个数据的初始状态？"></a>如何获取data中某一个数据的初始状态？</h3><blockquote><p>在开发中，有时候需要拿初始状态去计算。例如</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">howMuch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 计算出num增加了多少，那就是1000 - 初始值</span></span><br><span class="line">        <span class="comment">// 可以通过this.$options.data().xxx来获取初始值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1000</span> - <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>().<span class="property">num</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Vue的修饰符"><a href="#Vue的修饰符" class="headerlink" title="Vue的修饰符"></a>Vue的修饰符</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a1c911988f74cea91da79af3c6049c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="截屏2021-07-11 下午9.56.53.png"></p><h3 id="Vue的内部指令"><a href="#Vue的内部指令" class="headerlink" title="Vue的内部指令"></a>Vue的内部指令</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d39d348e686b449e8931f5a85802e3c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="动态指令和参数使用过吗？"><a href="#动态指令和参数使用过吗？" class="headerlink" title="动态指令和参数使用过吗？"></a>动态指令和参数使用过吗？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;aButton @[someEvent]=<span class="string">&quot;handleSomeEvent()&quot;</span> :[someProps]=<span class="string">&quot;1000&quot;</span> /&gt;...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ...</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">someEvent</span>: someCondition ? <span class="string">&quot;click&quot;</span> : <span class="string">&quot;dbclick&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">someProps</span>: someCondition ? <span class="string">&quot;num&quot;</span> : <span class="string">&quot;price&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">handleSomeEvent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// handle some event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="如何设置动态class，动态style？"><a href="#如何设置动态class，动态style？" class="headerlink" title="如何设置动态class，动态style？"></a>如何设置动态class，动态style？</h3><ul><li><p>动态class对象：</p><p><code>&lt;div :class=&quot;&#123; &#39;is-active&#39;: true, &#39;red&#39;: isRed &#125;&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态class数组：</p><p><code>&lt;div :class=&quot;[&#39;is-active&#39;, isRed ? &#39;red&#39; : &#39;&#39; ]&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态style对象：</p><p><code>&lt;div :style=&quot;&#123; color: textColor, fontSize: &#39;18px&#39; &#125;&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态style数组：</p></li></ul><p><code>&lt;div :style=&quot;[&#123; color: textColor, fontSize: &#39;18px&#39; &#125;, &#123; fontWeight: &#39;300&#39; &#125;]&quot;&gt;&lt;/div&gt;</code></p><h3 id="为什么v-if和v-for不建议用在同一标签？"><a href="#为什么v-if和v-for不建议用在同一标签？" class="headerlink" title="为什么v-if和v-for不建议用在同一标签？"></a>为什么v-if和v-for不建议用在同一标签？</h3><p>在Vue2中，<code>v-for</code>优先级是高于 <code>v-if</code>的，咱们来看例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;item in [1, 2, 3, 4, 5, 6, 7]&quot;</span> v-<span class="keyword">if</span>=<span class="string">&quot;item !== 3&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面的写法是 <code>v-for</code>和 <code>v-if</code>同时存在，会先把7个元素都遍历出来，然后再一个个判断是否为3，并把3给隐藏掉，这样的坏处就是，渲染了无用的3节点，增加无用的dom操作，建议使用computed来解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">computed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">list</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="number">3</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。"><a href="#State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。" class="headerlink" title="* State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。"></a>* State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</h3><ul><li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li><li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li><li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li><li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li></ul><h3 id="不需要响应式的数据应该怎么处理？"><a href="#不需要响应式的数据应该怎么处理？" class="headerlink" title="不需要响应式的数据应该怎么处理？"></a>不需要响应式的数据应该怎么处理？</h3><p>在我们的Vue开发中，会有一些数据，从始至终都 <code>未曾改变过</code>，这种 <code>死数据</code>，既然 <code>不改变</code>，那也就 <code>不需要对他做响应式处理</code>了，不然只会做一些无用功消耗性能，比如一些写死的下拉框，写死的表格数据，这些数据量大的 <code>死数据</code>，如果都进行响应式处理，那会消耗大量性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：将数据定义在data之外</span></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list1</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list2</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list3</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list4</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list5</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 方法二：Object.freeze()</span></span><br><span class="line">data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">list1</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;),</span><br><span class="line">        <span class="attr">list2</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;),</span><br><span class="line">        <span class="attr">list3</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;),</span><br><span class="line">        <span class="attr">list4</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;),</span><br><span class="line">        <span class="attr">list5</span>: <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;xxxxxxxxxxxxxxxxxxxxxxxx&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"><a href="#对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？" class="headerlink" title="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"></a>对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？</h3><ul><li>原因：<code>Object.defineProperty</code>没有对对象的新属性进行属性劫持</li><li>对象新属性无法更新视图：使用 <code>Vue.$set(obj, key, value)</code>，组件中 <code>this.$set(obj, key, value)</code></li><li>删除属性无法更新视图：使用 <code>Vue.$delete(obj, key)</code>，组件中 <code>this.$delete(obj, key)</code></li></ul><h3 id="直接arr-index-x3D-xxx无法更新视图怎么办？为什么？怎么办？"><a href="#直接arr-index-x3D-xxx无法更新视图怎么办？为什么？怎么办？" class="headerlink" title="直接arr[index] &#x3D; xxx无法更新视图怎么办？为什么？怎么办？"></a>直接arr[index] &#x3D; xxx无法更新视图怎么办？为什么？怎么办？</h3><ul><li>原因：Vue没有对数组进行 <code>Object.defineProperty</code>的属性劫持，所以直接arr[index] &#x3D; xxx是无法更新视图的</li><li>使用数组的splice方法，<code>arr.splice(index, 1, item)</code></li><li>使用 <code>Vue.$set(arr, index, value)</code></li></ul><h3 id="为什么不建议用index做key，为什么不建议用随机数做key？"><a href="#为什么不建议用index做key，为什么不建议用随机数做key？" class="headerlink" title="为什么不建议用index做key，为什么不建议用随机数做key？"></a>为什么不建议用index做key，为什么不建议用随机数做key？</h3><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item.<span class="property">name</span>&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">list</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;124&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;125&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">渲染为</span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小明&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">现在我执行 </span><br><span class="line">list.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;122&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">渲染为</span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">新旧对比</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小明&lt;<span class="regexp">/div&gt;  &lt;div key=&quot;0&quot;&gt;小林&lt;/</span>div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                         <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">可以看出，如果用index做key的话，其实是更新了原有的三项，并新增了小花，虽然达到了渲染目的，但是损耗性能</span><br><span class="line"></span><br><span class="line">现在我们使用id来做key，渲染为</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;123&quot;</span>&gt;小明&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">现在我执行 list.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;122&#x27;</span> &#125;)，渲染为</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;122&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">新旧对比</span><br><span class="line"></span><br><span class="line">                           &lt;div key=<span class="string">&quot;122&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">可以看出，原有的三项都不变，只是新增了小林这个人，这才是最理想的结果</span><br></pre></td></tr></table></figure><p>用 <code>index</code>和用 <code>随机数</code>都是同理，<code>随机数</code>每次都在变，做不到专一性，很 <code>渣男</code>，也很消耗性能，所以，拒绝 <code>渣男</code>，选择 <code>老实人</code></p><h3 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = []; <span class="comment">//回调函数</span></span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pending = <span class="literal">false</span>; <span class="comment">//把标志还原为false</span></span><br><span class="line">    <span class="comment">// 依次执行回调</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; callbacks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        callbacks[i]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timerFunc; <span class="comment">//先采用微任务并按照优先级优雅降级的方式实现异步刷新</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果支持promise</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// MutationObserver 主要是监听dom变化 也是一个异步方法</span></span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks);</span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line">    observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">        <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果前面都不支持 判断setImmediate</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setImmediate</span>(flushCallbacks);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 最后降级采用setTimeout</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    callbacks.<span class="title function_">push</span>(cb);</span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">        pending = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">timerFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nextTick的用处"><a href="#nextTick的用处" class="headerlink" title="nextTick的用处"></a>nextTick的用处</h3><p>我举个例子，在vue中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><p>我们修改了三个变量，那问题来了，是每修改一次，DOM就更新一次吗？不是的，Vue采用的是 <code>异步更新</code>的策略，通俗点说就是，<code>同一事件循环内</code>多次修改，会 <code>统一</code>进行一次 <code>视图更新</code>，这样才能节省性能嘛</p><p>看懂了上面，那你应该也看得懂下面的例子了吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="string">&quot;testDiv&quot;</span>&gt;&#123;&#123;name&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">testDiv</span>.<span class="property">innerHTML</span>) <span class="comment">// 这里是啥呢</span></span><br></pre></td></tr></table></figure><p>答案是“小林”，前面说了，Vue是 <code>异步更新</code>，所以数据一更新，视图却还没更新，所以拿到的还是上一次的旧视图数据，那么想要拿到最新视图数据怎么办呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">testDiv</span>.<span class="property">innerHTML</span>) <span class="comment">// 林三心</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue的SSR是什么？有什么好处？"><a href="#Vue的SSR是什么？有什么好处？" class="headerlink" title="Vue的SSR是什么？有什么好处？"></a>Vue的SSR是什么？有什么好处？</h3><ul><li><code>SSR</code>就是服务端渲染</li><li>基于 <code>nodejs serve</code>服务环境开发，所有 <code>html</code>代码在服务端渲染</li><li>数据返回给前端，然后前端进行“激活”，即可成为浏览器识别的html代码</li><li><code>SSR</code>首次加载更快，有更好的用户体验，有更好的seo优化，因为爬虫能看到整个页面的内容，如果是vue项目，由于数据还要经过解析，这就造成爬虫并不会等待你的数据加载完成，所以其实Vue项目的seo体验并不是很好</li></ul><h3 id="Vue响应式是怎么实现的？"><a href="#Vue响应式是怎么实现的？" class="headerlink" title="Vue响应式是怎么实现的？"></a>Vue响应式是怎么实现的？</h3><p>整体思路：数据劫持+观察者模式</p><p>对象内部通过 <code> defineReactive</code> 方法，使用 <code>Object.defineProperty</code> 将属性进行劫持（只会劫持已经存在的属性），数组则是通过重写数组方法来实现。当页面使用对应属性时，每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的 <code> watcher</code>（依赖收集），当属性变化后会通知自己对应的 <code> watcher</code> 去更新(派发更新)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; arrayMethods &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./array&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">            <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            value.<span class="property">__proto__</span> = arrayMethods</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> key = keys[i]</span><br><span class="line">            <span class="keyword">const</span> value = data[key]</span><br><span class="line">            <span class="title function_">defineReactive</span>(data, key, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">observeArray</span>(<span class="params">items</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="title function_">observe</span>(items[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">data, key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> childOb = <span class="title function_">observe</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取值&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">                dep.<span class="title function_">depend</span>()</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">                    childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">                        <span class="title function_">dependArray</span>(value)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newVal === value) <span class="keyword">return</span></span><br><span class="line">            <span class="title function_">observe</span>(newVal)</span><br><span class="line">            value = newVal</span><br><span class="line">            dep.<span class="title function_">notify</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) === <span class="string">&#x27;[object Object]&#x27;</span> || <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dependArray</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> e, i = <span class="number">0</span>, l = value.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        e = value[i]</span><br><span class="line"></span><br><span class="line">        e &amp;&amp; e.<span class="property">__ob__</span> &amp;&amp; e.<span class="property">__ob__</span>.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(e)) &#123;</span><br><span class="line">            <span class="title function_">dependArray</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array.js</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;reverse&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sort&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    arrayMethods[method] = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = arrayProto[method].<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> inserted</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">                inserted = args</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">                inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inserted) ob.<span class="title function_">observeArray</span>(inserted)</span><br><span class="line"></span><br><span class="line">        ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为什么只对对象劫持，而要对数组进行方法重写？"><a href="#为什么只对对象劫持，而要对数组进行方法重写？" class="headerlink" title="为什么只对对象劫持，而要对数组进行方法重写？"></a>为什么只对对象劫持，而要对数组进行方法重写？</h3><p>因为对象最多也就几十个属性，拦截起来数量不多，但是数组可能会有几百几千项，拦截起来非常耗性能，所以直接重写数组原型上的方法，是比较节省性能的方案</p><h3 id="Vue-set方法的原理"><a href="#Vue-set方法的原理" class="headerlink" title="Vue.set方法的原理"></a>Vue.set方法的原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否是数组</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">        <span class="comment">// 判断谁大谁小</span></span><br><span class="line">        target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key)</span><br><span class="line">        <span class="comment">// 执行splice</span></span><br><span class="line">        target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ob = target.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果此对象没有不是响应式对象，直接设置并返回</span></span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> target.<span class="property"><span class="keyword">prototype</span></span>) || !ob) &#123;</span><br><span class="line">        target[key] = val</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则，新增属性，并响应式处理</span></span><br><span class="line">    <span class="title function_">defineReactive</span>(target, key, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-delete方法的原理？"><a href="#Vue-delete方法的原理？" class="headerlink" title="Vue.delete方法的原理？"></a>Vue.delete方法的原理？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">del</span> (target, key) &#123;</span><br><span class="line">    <span class="comment">// 判断是否为数组</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">        <span class="comment">// 执行splice</span></span><br><span class="line">        target.<span class="title function_">splice</span>(key, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ob = target.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象本身就没有这个属性，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> target)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 否则，删除这个属性</span></span><br><span class="line">    <span class="keyword">delete</span> target[key]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否是响应式对象，不是的话，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!ob) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 是的话，删除后要通知视图更新</span></span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果子组件改变props里的数据会发生什么"><a href="#如果子组件改变props里的数据会发生什么" class="headerlink" title="如果子组件改变props里的数据会发生什么"></a>如果子组件改变props里的数据会发生什么</h3><ul><li>改变的props数据是基本类型</li></ul><blockquote><p>如果修改的是基本类型，则会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/047859eda3bf47a5930dd0b28e842017~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="0458e2ff1538ee85d42953cec9a94ca.png"></p><ul><li>改变的props数据是引用类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">item</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 不报错，并且父级数据会跟着变</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">name</span> = <span class="string">&#x27;sanxin&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 会报错，跟基础类型报错一样</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">item</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="props怎么自定义验证"><a href="#props怎么自定义验证" class="headerlink" title="props怎么自定义验证"></a>props怎么自定义验证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">num</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">          <span class="comment">// 返回值为false则验证不通过，报错</span></span><br><span class="line">          <span class="keyword">return</span> [</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">          ].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="审查元素时发现data-v-xxxxx，这是啥？"><a href="#审查元素时发现data-v-xxxxx，这是啥？" class="headerlink" title="审查元素时发现data-v-xxxxx，这是啥？"></a>审查元素时发现data-v-xxxxx，这是啥？</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff63f90f2d924ff6b20622a2d05ba367~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><blockquote><p>这是在标记vue文件中css时使用scoped标记产生的，因为要保证各文件中的css不相互影响，给每个component都做了唯一的标记，所以每引入一个component就会出现一个新的’data-v-xxx’标记</p></blockquote><h3 id="vue的hook的使用"><a href="#vue的hook的使用" class="headerlink" title="vue的hook的使用"></a>vue的hook的使用</h3><ul><li>同一组件中使用</li></ul><blockquote><p>这是我们常用的使用定时器的方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="attr">timer</span>:<span class="literal">null</span>  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//具体执行内容</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面做法不好的地方在于：得全局多定义一个timer变量，可以使用hook这么做：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//具体执行代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">      &#125;,<span class="number">1000</span>);</span><br><span class="line">      <span class="variable language_">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>7.2 父子组件使用</li></ul><blockquote><p>如果子组件需要在mounted时触发父组件的某一个函数，平时都会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;rl-child @childMounted=<span class="string">&quot;childMountedHandle&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">method () &#123;</span><br><span class="line">  <span class="title function_">childMountedHandle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;childMounted&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用hook的话可以更方便：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;rl-child @<span class="attr">hook</span>:mounted=<span class="string">&quot;childMountedHandle&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">method () &#123;</span><br><span class="line">  <span class="title function_">childMountedHandle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide和inject是响应式的吗？"><a href="#provide和inject是响应式的吗？" class="headerlink" title="provide和inject是响应式的吗？"></a>provide和inject是响应式的吗？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">   <span class="comment">// keyName: &#123; name: this.name &#125;, // value 是对象才能实现响应式，也就是引用类型</span></span><br><span class="line">      <span class="attr">keyName</span>: <span class="variable language_">this</span>.<span class="property">changeValue</span> <span class="comment">// 通过函数的方式也可以[注意，这里是把函数作为value，而不是this.changeValue()]</span></span><br><span class="line">   <span class="comment">// keyName: &#x27;test&#x27; value 如果是基本类型，就无法实现响应式</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">changeValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;改变后的名字-李四&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 后代组件</span></span><br><span class="line">  <span class="attr">inject</span>:[<span class="string">&#x27;keyName&#x27;</span>]</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">keyName</span>) <span class="comment">// 改变后的名字-李四</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue的el属性和-mount优先级？"><a href="#Vue的el属性和-mount优先级？" class="headerlink" title="Vue的el属性和$mount优先级？"></a>Vue的el属性和$mount优先级？</h3><blockquote><p>比如下面这种情况，Vue会渲染到哪个节点上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#ggg&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这是官方的一张图，可以看出 <code>el</code>和 <code>$mount</code>同时存在时，<code>el优先级</code> &gt; <code>$mount</code></p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da6331091cb145459e0b543c76e9bfc6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="自定义v-model"><a href="#自定义v-model" class="headerlink" title="自定义v-model"></a>自定义v-model</h3><blockquote><p>默认情况下，v-model 是 @input 事件侦听器和 :value 属性上的语法糖。但是，你可以在你的Vue组件中指定一个模型属性来定义使用什么事件和value属性——非常棒！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="attr">default</span>: &#123;</span><br><span class="line">  <span class="attr">model</span>: &#123;</span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span>,</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;checked&#x27;</span>  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算变量时，methods和computed哪个好？"><a href="#计算变量时，methods和computed哪个好？" class="headerlink" title="计算变量时，methods和computed哪个好？"></a>计算变量时，methods和computed哪个好？</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">howMuch1</span>()&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">howMuch2</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">data: () &#123;</span></span><br><span class="line"><span class="language-xml">    return &#123;</span></span><br><span class="line"><span class="language-xml">         index: 0</span></span><br><span class="line"><span class="language-xml">       &#125;</span></span><br><span class="line"><span class="language-xml">     &#125;</span></span><br><span class="line"><span class="language-xml">methods: &#123;</span></span><br><span class="line"><span class="language-xml">    howMuch1() &#123;</span></span><br><span class="line"><span class="language-xml">        return this.num + this.price</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">computed: &#123;</span></span><br><span class="line"><span class="language-xml">    howMuch2() &#123;</span></span><br><span class="line"><span class="language-xml">        return this.num + this.price</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>computed</code>会好一些，因为computed会有 <code>缓存</code>。例如index由0变成1，那么会触发视图更新，这时候methods会重新执行一次，而computed不会，因为computed依赖的两个变量num和price都没变。</p></blockquote><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h3><p>生命周期是什么？<br>react 实例的生命周期，就是react实例从初始化，更新，到销毁的过程</p><p>react实例生命周期经历三个阶段<br>初始化阶段：完成从react组件创建到首次渲染的过程</p><p>更新阶段：当调用setState函数时，会引起组件的重新渲染</p><p>销毁阶段：完成组件的销毁</p><p>三个阶段分别对应的构造函数有<br>初始化阶段：<br>constructor<br>构造函数里，可以做状态的初始化，接收props的传值<br>componentWillMount： 在渲染前调用，相当于vue中的beforeMount</p><p>render<br>渲染函数，不要在这里修改数据。 vue中也有render函数。</p><p>componentDidMount<br>渲染完毕，在第一次渲染后调用。</p><p>运行中阶段（更新）<br>当组件的 props 或 state 发生变化时会触发更新（严谨的说，是只要调用了setState（）或者改变了props时）。组件更新的生命周期调用顺序如下：</p><p>shouldComponentUpdate<br>是否更新？ 需要返回true或者false。如果是false，那么组件就不会继续更新了。</p><p>componentWillUpdate<br>即将更新。<br>componentWillReceiveProps(nextProps)： 在组件接收到一个新的 prop (更新后)时被调用。<br>这个方法在初始化render时不会被调用。nextProps 是props的新值，而 this.props是旧值。</p><p>render<br>不要在这里修改数据</p><p>componentDidUpdate<br>在组件完成更新后立即调用。在初始化时不会被调用。 相当于vue中的updated</p><p>销毁阶段（卸载）<br>componentWillUnmount()<br>即将卸载，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p><h3 id="为什么虚拟DOM-会提高性能"><a href="#为什么虚拟DOM-会提高性能" class="headerlink" title="为什么虚拟DOM 会提高性能"></a>为什么虚拟DOM 会提高性能</h3><p> 首先，（虚拟DOM是什么） 虚拟DOM就是一个JavaScript对象。通过这个JavaScript对象来描述真实DOM</p><p> 如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tagName</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;width:200px;height: 100px;&quot;</span>,</span><br><span class="line">    <span class="attr">innerHTML</span>: <span class="string">&quot;我是p&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其次，操作虚拟DOM，就是在操作javascript对象，所以，并不会引起页面的重绘和重排。而操作真实DOM是会引起页面的重绘和重排的。</p><h3 id="React的diff原理"><a href="#React的diff原理" class="headerlink" title="React的diff原理"></a>React的diff原理</h3><p>传统diff算法<br>需要遍历整棵树的节点然后进行比较，是一个深度递归的过程，运算复杂度常常是O(n^3)</p><p>react diff的优化策略<br>DOM节点跨层级的操作不做优化，因为很少这么做，这是针对的tree层级的策略；<br>对于同一个类的组件，会生成相似的树形结构，对于不同类的组件，生成不同的树形结构，这是针对conponent层级的策略；<br>对于同一级的子节点，拥有同层唯一的key值，来做删除、插入、移动的操作，这是针对element层级的策略；</p><h3 id="调用setState之后，发生了什么？"><a href="#调用setState之后，发生了什么？" class="headerlink" title="调用setState之后，发生了什么？"></a>调用setState之后，发生了什么？</h3><p>合并state<br>把传入setState（）里的参数对象和当前的state进行（属性）合并。 触发调和过程<br>（Reconciliation）</p><p>重新渲染组件<br>React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面<br>React 会自动计算出新的树与老树的节点差异（用diff算法），然后根据差异对界面进行最小化重<br>渲染</p><h3 id="state和props的区别"><a href="#state和props的区别" class="headerlink" title="state和props的区别"></a>state和props的区别</h3><p>state是组件的状态，也叫组件内部的数据</p><p>props是组件的属性，也可以认为是外部给组件传入的数据</p><h3 id="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"><a href="#React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？" class="headerlink" title="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"></a>React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？</h3><p>setState是异步的。</p><p>如果要拿到修改后的状态，需要使用回调函数的方式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变状态后想做一些事情：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  属性名:属性值</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//一般是用于在setState之后做一些操作</span></span><br><span class="line">  <span class="comment">//this.state == 修改之后的state</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为什么不能直接用以下办法更新state"><a href="#为什么不能直接用以下办法更新state" class="headerlink" title="为什么不能直接用以下办法更新state"></a>为什么不能直接用以下办法更新state</h3><p>this.state.msg &#x3D; “hello”;</p><p>因为，这样不会引起组件的重新渲染，所以，数据修改后没法 呈现在页面上。</p><p>而调用setState()函数，会引起组件的重新渲染，这样更新的数据就会呈现在页面上。</p><h3 id="React-Class-组件有哪些周期函数？分别有什么作用？"><a href="#React-Class-组件有哪些周期函数？分别有什么作用？" class="headerlink" title="React Class 组件有哪些周期函数？分别有什么作用？"></a>React Class 组件有哪些周期函数？分别有什么作用？</h3><h3 id="React-Class-组件中请求可以在-componentWillMount-中发起吗？为什么？"><a href="#React-Class-组件中请求可以在-componentWillMount-中发起吗？为什么？" class="headerlink" title="React Class 组件中请求可以在 componentWillMount 中发起吗？为什么？"></a>React Class 组件中请求可以在 componentWillMount 中发起吗？为什么？</h3><h3 id="React-Class-组件和-React-Hook-的区别有哪些？"><a href="#React-Class-组件和-React-Hook-的区别有哪些？" class="headerlink" title="React Class 组件和 React Hook 的区别有哪些？"></a>React Class 组件和 React Hook 的区别有哪些？</h3><h3 id="React-中高阶函数和自定义-Hook-的优缺点？"><a href="#React-中高阶函数和自定义-Hook-的优缺点？" class="headerlink" title="React 中高阶函数和自定义 Hook 的优缺点？"></a>React 中高阶函数和自定义 Hook 的优缺点？</h3><h3 id="简要说明-React-Hook-中-useState-和-useEffect-的运行原理？"><a href="#简要说明-React-Hook-中-useState-和-useEffect-的运行原理？" class="headerlink" title="简要说明 React Hook 中 useState 和 useEffect 的运行原理？"></a>简要说明 React Hook 中 useState 和 useEffect 的运行原理？</h3><h3 id="React-如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？"><a href="#React-如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？" class="headerlink" title="React 如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？"></a>React 如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？</h3><h3 id="React-Hook-中-useEffect-有哪些参数，如何检测数组依赖项的变化？"><a href="#React-Hook-中-useEffect-有哪些参数，如何检测数组依赖项的变化？" class="headerlink" title="React Hook 中 useEffect 有哪些参数，如何检测数组依赖项的变化？"></a>React Hook 中 useEffect 有哪些参数，如何检测数组依赖项的变化？</h3><h3 id="React-的-useEffect-是如何监听数组依赖项的变化的？"><a href="#React-的-useEffect-是如何监听数组依赖项的变化的？" class="headerlink" title="React 的 useEffect 是如何监听数组依赖项的变化的？"></a>React 的 useEffect 是如何监听数组依赖项的变化的？</h3><h3 id="React-Hook-和闭包有什么关联关系？"><a href="#React-Hook-和闭包有什么关联关系？" class="headerlink" title="React Hook 和闭包有什么关联关系？"></a>React Hook 和闭包有什么关联关系？</h3><h3 id="React-中-useState-是如何做数据初始化的？"><a href="#React-中-useState-是如何做数据初始化的？" class="headerlink" title="React 中 useState 是如何做数据初始化的？"></a>React 中 useState 是如何做数据初始化的？</h3><h3 id="列举你常用的-React-性能优化技巧？"><a href="#列举你常用的-React-性能优化技巧？" class="headerlink" title="列举你常用的 React 性能优化技巧？"></a>列举你常用的 React 性能优化技巧？</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>VScode快捷键</title>
    <link href="https://superq314.github.io/posts/af83e57c/"/>
    <id>https://superq314.github.io/posts/af83e57c/</id>
    <published>2022-09-13T06:35:15.000Z</published>
    <updated>2022-09-30T13:34:42.111Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>col1</th><th>col2</th></tr></thead><tbody><tr><td>单词跳跃</td><td>Alt</td></tr><tr><td>单词选中</td><td>Alt+shift</td></tr><tr><td>注释</td><td>ctrl+’&#x2F;‘</td></tr><tr><td>代码块注释</td><td>Alt+shift+’A’</td></tr><tr><td>tab对齐</td><td>Alt+shift+’F’</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="VScode" scheme="https://superq314.github.io/categories/VScode/"/>
    
    
  </entry>
  
</feed>
