<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>superQ的个人小站</title>
  <icon>https://www.gravatar.com/avatar/53ec4cae8bfa9696385d334042db5c18</icon>
  <subtitle>山海无畏</subtitle>
  <link href="https://superq314.github.io/atom.xml" rel="self"/>
  
  <link href="https://superq314.github.io/"/>
  <updated>2022-09-20T02:32:34.560Z</updated>
  <id>https://superq314.github.io/</id>
  
  <author>
    <name>superQ</name>
    <email>220202090@seu.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内容布局方式-rem适配布局</title>
    <link href="https://superq314.github.io/2022/09/16/frontEnd/2CSS/%E5%86%85%E5%AE%B9%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/"/>
    <id>https://superq314.github.io/2022/09/16/frontEnd/2CSS/%E5%86%85%E5%AE%B9%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/</id>
    <published>2022-09-16T02:31:18.000Z</published>
    <updated>2022-09-20T02:32:34.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>rem适配布局——[混合布局]<br>rem是CSS的长度单位，相当于元素对的font-size的相对值<br>假如</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">  font-size: 20px; </span><br><span class="line">&#125;</span><br><span class="line">=<span class="language-ruby">=&gt; 1rem = 20px</span></span><br></pre></td></tr></table></figure><p>rem会随着设备的大小变化而发生相应的改变<br>解决了流式布局和flex布局不能变化高度的问题</p><ol><li>rem + 媒体查询技术<br>&#x3D;&#x3D;&gt; 实现元素大小动态变化</li><li>rem + flexible.is（淘宝技术）<br>将页面的一行分成10份，可以快速布局<br>&#x3D;&#x3D;&gt; 实现元素大小动态变化</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Html-标签粗解</title>
    <link href="https://superq314.github.io/2022/09/16/frontEnd/1Html/Html-%E6%A0%87%E7%AD%BE%E7%B2%97%E8%A7%A3/"/>
    <id>https://superq314.github.io/2022/09/16/frontEnd/1Html/Html-%E6%A0%87%E7%AD%BE%E7%B2%97%E8%A7%A3/</id>
    <published>2022-09-16T01:57:22.000Z</published>
    <updated>2022-09-16T02:29:34.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>&lt;a&gt;&lt;/a&gt;</code><br>作用：</p><ul><li>另一个文档</li><li>文档内部</li><li>Email地址</li><li>电话号码</li></ul><p>属性</p><ul><li>href</li><li>target</li><li>download</li><li>hreflang</li><li>rel</li><li>rev</li><li>type</li><li>referrerpolicy</li></ul><p>target中属性值</p><ul><li>_self</li><li>_blank</li><li>_parent</li><li>_top</li></ul><p>举例：<br>创建锚点<br><code>&lt;a href=&quot;#&quot;&gt;×××&lt;/a&gt;</code><br>链接Email地址<br><code>&lt;a href=&quot;mailto:1078857679@qq.com&quot;&gt;×××&lt;/a&gt;</code><br>链接电话<br><code>&lt;a href=&quot;tel:15651005256&quot;&gt;×××&lt;/a&gt;</code><br>文件下载<br><code>&lt;a href=&quot;/keyboard-shortcuts.pdf&quot; download&gt;×××&lt;/a&gt;</code><br><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p><ul><li>引用内容</li><li>属性<ul><li>cite<br><code>&lt;em&gt;&lt;/em&gt;</code><br>强调，需要用户着重阅读的内容</li></ul></li><li>默认斜体</li><li>可以嵌套<br><code>&lt;strong&gt;&lt;/strong&gt;</code><br>严重&#x2F;重要&#x2F;紧急的内容</li><li>标题、警告、注意事项、指示性内容</li><li>默认粗体</li><li>可以嵌套<br><code>&lt;span&gt;&lt;/span&gt;</code><br>无任何特殊含义</li><li>行内容器</li><li>样式<br><code>&lt;img&gt;</code><br>图像<br>属性</li><li>src</li><li>alt</li><li>width</li><li>height</li><li>srcset    宽度描述符</li><li>sizes<br>插入图片<br>picture容器 + source<br>source属性</li><li>srcset</li><li>type</li><li>sizes</li><li>media<br>图片热点<br>area属性</li><li>download</li><li>hreflang</li><li>rel</li><li>target</li><li>type</li><li>referrerpolicy<br><code>&lt;video&gt;&lt;/video&gt;</code><br>视频、影片、带字幕的音频<br>属性</li><li>src</li><li>width</li><li>height</li><li>poster</li><li>preload</li><li>autoplay</li><li>loop</li><li>muted</li><li>controls</li><li>crossorigin<br>内嵌标签<br>source</li><li>src</li><li>type<br>track</li><li>kind<ul><li>subtitles</li><li>captions</li><li>descriptions</li><li>chapters</li><li>metadata</li></ul></li><li>srcset</li><li>srclang</li><li>label</li><li>default<br><code>&lt;audio&gt;&lt;/audio&gt;</code><br>音频<br>属性</li><li>src</li><li>preload</li><li>autoplay</li><li>loop</li><li>muted</li><li>controls</li><li>crossorigin<br><code>&lt;iframe&gt;&lt;/iframe&gt;</code><br>内嵌的浏览上下文<br>另一个HTML页面嵌入到当前页面中<br>属性</li><li>src</li><li>width</li><li>height</li><li>name</li><li>sandbox<ul><li>allow-forms</li><li>allow-pointer-lock</li><li>allow-popups</li><li>allow-presentation</li><li>allow-same-origin</li><li>allow-scripts</li><li>allow-top-navigation<br><code>&lt;form&gt;&lt;/form&gt;</code><br>label<br>input<br>fieldset<br>select<br>textarea<br>button<br>output<br>object<br>meter<br>progressimg</li></ul></li><li>label<br>表单控件的标题</li><li>select<br>列表选择器</li><li>不加      默认单选</li><li>multiple  多选模式配置</li><li>size&#x3D;”4”  单选（四选一）</li></ul><p>状态禁用<br>选择器禁用<select disabled><br>选项禁用<option disabled><br>选项组禁用<optgroup disabled></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://superq314.github.io/2022/09/14/frontEnd/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/09/14/frontEnd/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-09-14T05:11:25.000Z</published>
    <updated>2022-09-14T05:44:36.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="语义话的目的是什么？"><a href="#语义话的目的是什么？" class="headerlink" title="语义话的目的是什么？"></a>语义话的目的是什么？</h3><p>语义化的主要目的可以概括为用正确的标签做正确的事</p><p>HTMl语义化可以让页面的内容结构化，以便于浏览器解析和搜索引擎解析，<br>并且提高了代码的可读性便于代码维护，</p><h3 id="HTML5新增元素"><a href="#HTML5新增元素" class="headerlink" title="HTML5新增元素"></a>HTML5新增元素</h3><p>Canvas绘图以及SVG绘图。<br>拖放（Drag and drop）API<br>语义化标签（header、nav、footer、article、section）<br>音频、视频（audio、video）API<br>地理定位（Geolocation）<br>本地离线存储（localStorage）,长期存储数据，关闭浏览器后不丢失。<br>会话储存（sessionStorage）,数据在关闭浏览器后自动删除。<br>表单控件（calendar、date、time、email、url、search）</p><h3 id="cookie与sessionStorage和localStorage的区别"><a href="#cookie与sessionStorage和localStorage的区别" class="headerlink" title="cookie与sessionStorage和localStorage的区别"></a>cookie与sessionStorage和localStorage的区别</h3><ul><li>保存方式<ul><li>cookie存放在客户的浏览器上。</li><li>session都在客户端中保存，不参与服务器通讯。</li></ul></li><li>生命周期<ul><li>cookie可设置失效时间</li><li>localStorage除非手动清除否则永久保存</li><li>sessionStorage关闭当前页面或浏览器后失效</li></ul></li><li>存储的大小<ul><li>cookie 4kb左右</li><li>session 5M</li></ul></li><li>易用性<ul><li>cookie需自己封装</li><li>session可以接受原生接口</li></ul></li></ul><p>因为cookie每次请求都会携带在http请求中,所以它的主要用来识别用户登录,localStorage可以用来跨页面传参,sessionStorage可以用来保留一些临时数据。</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="CSS有哪些基本的选择器，执行先后顺序？"><a href="#CSS有哪些基本的选择器，执行先后顺序？" class="headerlink" title="CSS有哪些基本的选择器，执行先后顺序？"></a>CSS有哪些基本的选择器，执行先后顺序？</h3><p>id选择器 &#x3D;&gt; #myId {}<br>类选择器 &#x3D;&gt; .myClass {}<br>标签选择器 &#x3D;&gt; p,h1 {}<br>后代选择器 &#x3D;&gt; div h1 {}<br>子选择器 &#x3D;&gt; div&gt;h1 {}<br>兄弟选择器(所有的兄弟) &#x3D;&gt; ul~h1 {}<br>相邻兄弟选择器 &#x3D;&gt; ul+h1 {}<br>属性选择器 &#x3D;&gt; li[name&#x3D;’sss’] {}<br>伪类选择器 &#x3D;&gt; h1:hover {}<br>伪元素选择器 &#x3D;&gt; h1::before{}<br>通配符选择器* &#x3D;&gt; * {}</p><p>!important&gt;内联样式（非选择器）&gt;ID选择器&gt;类选择器&gt;标签选择器&gt;通配符选择器（*）</p><h3 id="垂直水平居中方式有哪些？"><a href="#垂直水平居中方式有哪些？" class="headerlink" title="垂直水平居中方式有哪些？"></a>垂直水平居中方式有哪些？</h3><h3 id="常用布局方式有哪些？什么是盒模型？"><a href="#常用布局方式有哪些？什么是盒模型？" class="headerlink" title="常用布局方式有哪些？什么是盒模型？"></a>常用布局方式有哪些？什么是盒模型？</h3><h3 id="常用的块元素与行内元素有哪些？有什么特征"><a href="#常用的块元素与行内元素有哪些？有什么特征" class="headerlink" title="常用的块元素与行内元素有哪些？有什么特征"></a>常用的块元素与行内元素有哪些？有什么特征</h3><p>块元素：div、h1~h6、ul、li、table、p、br、form。<br>特征：独占一行，换行显示，可以设置宽高，可以嵌套块和行</p><p>行内元素：span、a、img、textarea、select、option、input。<br>特征：只有在行内显示，内容撑开宽、高，不可以设置宽、高（img、input、textarea等除外）。</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>父级div定义overflow:hidden（如果父级元素有定位元素超出父级，超出部分会隐藏，）<br>给浮动元素父级增加标签（由于新增标签会造成不必要的渲染，不建议使用）<br>伪元素清除浮动：给浮动元素父级增加 .clearfix::after（content: ‘’; display: table;<br>clear: both;）（不会新增标签，不会有其他影响，）</p><h3 id="CSS3新特征"><a href="#CSS3新特征" class="headerlink" title="CSS3新特征"></a>CSS3新特征</h3><p>圆角（border-radius）<br>阴影（box-shadow）<br>文字特效(text-shadow)<br>线性渐变（gradient）<br>变换(transform)<br>更多的CSS选择器<br>更多背景设置（background）<br>色彩模式（rgba）<br>伪元素（::selection）<br>媒体查询（@media）<br>多栏布局（column）<br>图片边框（border-image）</p><h3 id="CSS中有哪些长度单位？"><a href="#CSS中有哪些长度单位？" class="headerlink" title="CSS中有哪些长度单位？"></a>CSS中有哪些长度单位？</h3><p>绝对长度单位：px<br>百分比: %<br>相对父元素字体大小单位: em<br>相对于根元素字体大小的单位: rem<br>相对于视口<em>宽度的百分比（100vw即视窗宽度的100%）: vw<br>相对于视口</em>高度的百分比（100vh即视窗高度的100%）: vh</p><h3 id="px、em、rem的区别"><a href="#px、em、rem的区别" class="headerlink" title="px、em、rem的区别"></a>px、em、rem的区别</h3><h3 id="display-none和visibility-hidden的区别"><a href="#display-none和visibility-hidden的区别" class="headerlink" title="display:none和visibility:hidden的区别"></a>display:none和visibility:hidden的区别</h3><p>display:none：隐藏元素，在文档布局中不在给它分配空间（从文档中移除），会引起回流（重排）<br>visibility:hidden: 隐藏元素，但是在文档布局中仍保留原来的空间（还在文档中），不会引起回流（重绘）</p><h3 id="用CSS-实现三角形"><a href="#用CSS-实现三角形" class="headerlink" title="用CSS 实现三角形"></a>用CSS 实现三角形</h3><h3 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h3><h3 id="什么是重绘，重排？如何解决？"><a href="#什么是重绘，重排？如何解决？" class="headerlink" title="什么是重绘，重排？如何解决？"></a>什么是重绘，重排？如何解决？</h3><h4 id="重绘（repaint-x2F-redraw）"><a href="#重绘（repaint-x2F-redraw）" class="headerlink" title="重绘（repaint&#x2F;redraw）"></a>重绘（repaint&#x2F;redraw）</h4><p>某个dom节点的颜色，背景颜色变了，字体大小，只影响自己，不影响其他元素。</p><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p><h4 id="重排（回流-x2F-reflow-x2F-重构）"><a href="#重排（回流-x2F-reflow-x2F-重构）" class="headerlink" title="重排（回流&#x2F;reflow&#x2F;重构）"></a>重排（回流&#x2F;reflow&#x2F;重构）</h4><p>某个dom节点的宽高，布局，隐藏等发生改变，不仅自身发生了改变，而且其他元素也会受到影响随之发生改变。每个页面最少一次回流，就是页面第一次加载的时候。</p><h4 id="触发重排的原因"><a href="#触发重排的原因" class="headerlink" title="触发重排的原因"></a>触发重排的原因</h4><p>页面初始化渲染（无可避免）<br>添加或删除可见的DOM元素<br>元素尺寸的改变——大小，外边距；边框<br>浏览器窗口尺寸的变化<br>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变<br>读取某些元素属性：（offsetLeft&#x2F;Top&#x2F;Height&#x2F;Width,　clientTop&#x2F;Left&#x2F;Width&#x2F;Height,　scrollTop&#x2F;Left&#x2F;Width&#x2F;Height,　width&#x2F;height,　getComputedStyle(), currentStyle(IE))</p><blockquote><p>1.重绘不一定重排，但是重排一定会重绘<br>2.重绘和重排的成本都是非常高的，要尽量减少dom的增删改</p></blockquote><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>不要直接操作样式，先设置好class，然后修改DOM的className;<br>position:absolute 与flex 不会导致重排<br>不要把DOM 节点的属性放在一个循环当成循环的变量；<br>需要动画的元素脱离文档流；<br>不使用table 布局，<br>尽量不修改影响范围比较大的DOM;<br>如果要多次添加DOM,先使用  document.createDocumentFragment() 创建一个盒子，完盒子里面先添加子元素，添加完成在插入元素中；</p><h3 id="transition-都有哪些过度属性？"><a href="#transition-都有哪些过度属性？" class="headerlink" title="transition 都有哪些过度属性？"></a>transition 都有哪些过度属性？</h3><h3 id="link和-import的区别？"><a href="#link和-import的区别？" class="headerlink" title="link和@import的区别？"></a>link和@import的区别？</h3><p>link属于html标签，而@import是css提供的。<br>页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载的。<br>兼容性问题：@import只在IE5以上才能识别，而link是html标签，无兼容性问题。<br>权重问题:@import的权重要高于link。<br>DOM操作:DOM可以操作link中的样式，而不可以操作@import中的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- link 方式，推荐 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @import 方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@import</span> url(style.css);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用的动画库有哪些？"><a href="#常用的动画库有哪些？" class="headerlink" title="常用的动画库有哪些？"></a>常用的动画库有哪些？</h3><h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><h3 id="href与src的区别"><a href="#href与src的区别" class="headerlink" title="href与src的区别"></a>href与src的区别</h3><h3 id="如何让-CSS-只在当前组件中起作用？"><a href="#如何让-CSS-只在当前组件中起作用？" class="headerlink" title="如何让 CSS 只在当前组件中起作用？"></a>如何让 CSS 只在当前组件中起作用？</h3><p>将当前组件的<code>&lt;style&gt;</code>修改为<code>&lt;style scoped&gt;</code>。</p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><h3 id="call、apply、bind-作用和区别（改变this指向）"><a href="#call、apply、bind-作用和区别（改变this指向）" class="headerlink" title="call、apply、bind 作用和区别（改变this指向）"></a>call、apply、bind 作用和区别（改变this指向）</h3><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><h3 id="JS基本数据类型"><a href="#JS基本数据类型" class="headerlink" title="JS基本数据类型"></a>JS基本数据类型</h3><h3 id="export和export-default的区别"><a href="#export和export-default的区别" class="headerlink" title="export和export default的区别"></a>export和export default的区别</h3><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ul><li>语法更加简洁、清晰，&#x3D;&gt;()</li><li>箭头函数是匿名函数，不能作为构造函数，不能使用new</li><li>箭头函数不能使用arguments，而用reat参数…解决</li><li>箭头函数没有自己的this,会捕获其所在的上下文的this值,并且不能通过call()和apply()来改变其this</li><li>箭头函数没有原型</li></ul><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><h3 id="forEach和map的区别"><a href="#forEach和map的区别" class="headerlink" title="forEach和map的区别"></a>forEach和map的区别</h3><h3 id="对象的继承"><a href="#对象的继承" class="headerlink" title="对象的继承"></a>对象的继承</h3><p>常见的：<br>    原型链继承<br>    借用构造函数继承<br>    原型链 + 借用构造函数的组合继承（使用 call 或 applay 方法）<br>    ES6中class 的继承（class可以通过extends关键字实现继承）</p><h3 id="简述一下你理解的面向对象"><a href="#简述一下你理解的面向对象" class="headerlink" title="简述一下你理解的面向对象"></a>简述一下你理解的面向对象</h3><p>面向对象是基于万物皆对象这个哲学观点. 把一个对象抽象成类，具体上就是把一个对象的静态特征和动态特征抽象成属性和方法，也就是把一类事物的算法和数据结构封装在一个类之中,程序就是多个对象和互相之间的通信组成的。</p><p><strong>面向对象具有封装性,继承性,多态性。</strong></p><p>封装：隐蔽了对象内部不需要暴露的细节,使得内部细节的变动跟外界脱离,只依靠接口进行通信.封装性降低了编程的复杂性。<br>继承：使得新建一个类变得容易,一个类从派生类那里获得其非私有的方法和公用属性的繁琐工作交给了编译器。<br>多态：继承和实现接口和运行时的类型绑定机制所产生的多态，使得不同的类所产生的对象能够对相同的消息作出不同的反应,极大地提高了代码的通用性.。</p><h3 id="x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;的区别"></a>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;的区别</h3><h3 id="数组有哪些方法？"><a href="#数组有哪些方法？" class="headerlink" title="数组有哪些方法？"></a>数组有哪些方法？</h3><h3 id="数组去重（笔试一般都会有）"><a href="#数组去重（笔试一般都会有）" class="headerlink" title="数组去重（笔试一般都会有）"></a>数组去重（笔试一般都会有）</h3><h3 id="JS中new操作符有什么用？"><a href="#JS中new操作符有什么用？" class="headerlink" title="JS中new操作符有什么用？"></a>JS中new操作符有什么用？</h3><p>创建临时对象，并将this指向临时对象<br>将构造函数的原型属性和方法挂载到新对象的__proto__(原型指针)上<br>return 临时对象</p><h3 id="JS获取HTML-DOM元素的方法"><a href="#JS获取HTML-DOM元素的方法" class="headerlink" title="JS获取HTML DOM元素的方法"></a>JS获取HTML DOM元素的方法</h3><p>通过ID获取（getElementById）<br>通过name属性（getElementsByName）<br>通过标签名（getElementsByTagName）<br>通过类名（getElementsByClassName）<br>获取html的方法（document.documentElement）<br>获取body的方法（document.body）<br>通过选择器获取一个元素（querySelector）<br>通过选择器获取一组元素（querySelectorAll）</p><h3 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h3><ul><li>事件捕获和事件冒泡主要解决了页面事件流的问题。页面的事件流经过了三个阶段，分别是事件捕获、目标阶段和事件冒泡阶段。</li><li>事件捕获是由外向内；而事件冒泡则是由内向外。</li><li>event.stopPropagation() 可以阻止事件流的进一步传播。</li><li>采用事件代理的方式，能够节省内存消耗，对于动态改变子元素的时候，也非常有利，避免了很多麻烦的步骤，比如重新绑定事件。（把子元素的事件委托给父元素来处理）</li></ul><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>定义：虚拟DOM就是普通的js对象。用来描述真实dom结构的js对象，因为它不是真实的dom，所以才叫做虚拟dom。<br>作用：虚拟dom可以很好地跟踪当前dom状态，因为它会根据当前数据生成一个描述当前dom结构的虚拟dom，然后数据发生变化时，有生成一个新的虚拟dom，而两个虚拟dom恰好保存了变化前后的状态。然后通过diff算法，计算出当前两个虚拟dom之间的差异，得出一个更好的替换方案。</p><h3 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h3><p>冒泡排序：比较所有相邻元素,如果第一个比第二个大，则交换它们。<br>选择排序：找到数组中的最小值，选中它并将其放置在第一位。<br>插入排序：从第二个数开始往前比，比它大就往后排。<br>归并排序：把数组劈成两半，再递归地对数组进行“分”操作，直到分成一个个单独的数。<br>快速排序：从数组中任意选择一个基准，所有比基准小的元素放到基准前面，比基准大的元素放到基准的后面。</p><h3 id="数组操作方法会改变原数组"><a href="#数组操作方法会改变原数组" class="headerlink" title="数组操作方法会改变原数组"></a>数组操作方法会改变原数组</h3><p>会改变：push()，pop(),shift(),unshift() ,splice(),sort(),reverse()。<br>不变：concat(),split(),slice()。</p><h3 id="JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用"><a href="#JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用" class="headerlink" title="JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用"></a>JS中substr（）、substring（）、slice（）、splice（）、split（）的区别与作用</h3><h3 id="JS有几种方法判断变量的类型？"><a href="#JS有几种方法判断变量的类型？" class="headerlink" title="JS有几种方法判断变量的类型？"></a>JS有几种方法判断变量的类型？</h3><p>typeof：</p><pre><code>判断基本数据类型，对于引用数据类型除了function返回’function‘，其余全部返回’object’。</code></pre><p>instanceof：</p><pre><code>区分引用数据类型，检测方法是检测的类型在当前实例的原型链上，用其检测出来的结果都是true，不太适合用于简单数据类型的检测，检测过程繁琐且对于简单数据类型中的undefined, null, symbol检测不出来。</code></pre><p>instanceof的实现原理：</p><pre><code>验证当前类的原型prototype是否会出现在实例的原型链__proto__上，只要在它的原型链上，则结果都为true。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，找到返回true，未找到返回false。</code></pre><p>constructor：</p><pre><code>检测引用数据类型，检测方法是获取实例的构造函数判断和某个类是否相同，如果相同就说明该数据是符合那个数据类型的，这种方法不会把原型链上的其他类也加入进来，避免了原型链的干扰。</code></pre><p>Object.prototype.toString.call()：</p><pre><code>适用于所有类型的判断检测，检测方法是Object.prototype.toString.call(数据) 返回的是该数据类型的字符串。(举例：字符串返回的是[object String])</code></pre><p>Object.prototype.toString.call原理：</p><pre><code>Object.prototype.toString 表示一个返回对象类型的字符串，call()方法可以改变this的指向，那么把Object.prototype.toString()方法指向不同的数据类型上面，返回不同的结果</code></pre><h3 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h3><p>null和undefined 区别为：undefined是表示变量声明过但并未赋过值，它是所有未赋值变量默认值；null表示一个变量将来可能指向一个对象，一般用于主动释放指向对象的引用。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>（1）undefined：是所有没有赋值变量的默认值，自动赋值<br>（2）null：主动释放一个变量引用的对象，表示一个变量不再指向任何对象地址</p><h4 id="null与undefined的异同点是什么呢？"><a href="#null与undefined的异同点是什么呢？" class="headerlink" title="null与undefined的异同点是什么呢？"></a>null与undefined的异同点是什么呢？</h4><p>共同点： 都是原始类型，保存在栈中变量本地<br>不同点：<br>（1）undefined——表示变量声明过但并未赋过值。<br>它是所有未赋值变量默认值。<br>例如：var a; &#x2F;&#x2F;a自动被赋值为undefined<br>（2）null——表示一个变量将来可能指向一个对象。<br>一般用于主动释放指向对象的引用。</p><h4 id="何时使用null"><a href="#何时使用null" class="headerlink" title="何时使用null?"></a>何时使用null?</h4><p>当使用完一个比较大的对象时，需要对其进行释放内存时，设置为null</p><h3 id="什么是跨域？及跨域解决方法"><a href="#什么是跨域？及跨域解决方法" class="headerlink" title="什么是跨域？及跨域解决方法"></a>什么是跨域？及跨域解决方法</h3><h3 id="防抖和节流的使用及区别"><a href="#防抖和节流的使用及区别" class="headerlink" title="防抖和节流的使用及区别"></a>防抖和节流的使用及区别</h3><h3 id="栈内存和堆内存的区别与原理"><a href="#栈内存和堆内存的区别与原理" class="headerlink" title="栈内存和堆内存的区别与原理"></a>栈内存和堆内存的区别与原理</h3><h3 id="深拷贝和浅拷贝的区别和与原理"><a href="#深拷贝和浅拷贝的区别和与原理" class="headerlink" title="深拷贝和浅拷贝的区别和与原理"></a>深拷贝和浅拷贝的区别和与原理</h3><h2 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h2><p>新增块级作用域let定义变量和const定义常量<br>变量的解构赋值<br>模板字符串 （‘${}’）<br>默认参数（key&#x3D;value）<br>箭头函数（&#x3D;&gt;）<br>扩展运算符（…）<br>模块（import&#x2F;export）<br>类（class&#x2F;extends）<br>Promise<br>Proxy<br>Symbol</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>含义： 异步编程的一种解决方案，用来解决回调地狱。<br>三种状态： pending（进行中）、fulfilled（已成功）和rejected（已失败） （Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。）</p><p>resolved函数作用：将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved）。<br>reject函数的作用：将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected）。</p><p>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。<br>then: Promise 实例添加状态改变时的回调函数。可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。</p><p>缺点： 无法取消Promise，一旦新建它就会立即执行，无法中途取消。如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</p><h2 id="计算机网络知识"><a href="#计算机网络知识" class="headerlink" title="计算机网络知识"></a>计算机网络知识</h2><h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><p>HTTP：客户端与服务器之间数据传输的格式规范，表示“超文本传输协议”。<br>HTTPS：在HTTP与TCP之间添加的安全协议层。<br>默认端口号：HTTP：80，HTTPS：443。<br>传输方式：http是明文传输，https则是具有安全性的ssl加密传输协议。<br>连接方式：http的是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h3 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h3><p>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。<br>TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信TCP首部开销20字节;UDP的首部开销小，只有8个字节。<br>TCP提供可靠的服务。UDP适用于一次只传少量数据、对可靠要求不高的环境。</p><h3 id="HTTP常见的状态码"><a href="#HTTP常见的状态码" class="headerlink" title="HTTP常见的状态码"></a>HTTP常见的状态码</h3><ul><li>1 开头的状态码(信息类)<br>100，接受的请求正在处理，信息类状态码</li><li>2 开头的状态码(成功类)<br>2xx(成功)表示成功处理了请求的状态码<br>200(成功)服务器已成功处理了请求。</li><li>3 开头的状态码(重定向)<br>3xx(重定向)表示要完成请求，需要进一步操作。通常这些状态代码用来重定向。<br>301，永久性重定向，表示资源已被分配了新的 URL<br>302，临时性重定向，表示资源临时被分配了新的 URL<br>303，表示资源存在另一个URL，用GET方法获取资源<br>304，(未修改)自从上次请求后，请求网页未修改过。服务器返回此响应时，不会返回网页内容</li><li>4 开头的状态码(客户端错误)<br>4xx(请求错误)这些状态码表示请求可能出错，妨碍了服务器的处理<br>400(错误请求)服务器不理解请求的语法<br>401表示发送的请求需要有通过HTTP认证的认证信息<br>403(禁止)服务器拒绝请求<br>404(未找到)服务器找不到请求网页</li><li>5 开头的状态码(服务器错误)<br>5xx(服务器错误)这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器<br>本身的错误，而不是请求的错误<br>500，(服务器内部错误)服务器遇到错误，无法完成请求<br>503，表示服务器处于停机维护或超负载，无法处理请求</li></ul><h3 id="浏览器从输入url到页面加载发生了什么"><a href="#浏览器从输入url到页面加载发生了什么" class="headerlink" title="浏览器从输入url到页面加载发生了什么"></a>浏览器从输入url到页面加载发生了什么</h3><p>1、浏览器的地址栏输入URL并按下回车。<br>2、浏览器查找当前URL是否存在缓存，并比较缓存是否过期。<br>3、DNS解析URL对应的IP。<br>4、根据IP建立TCP连接（三次握手）。<br>5、HTTP发起请求。<br>6、服务器处理请求，浏览器接收HTTP响应。<br>7、渲染页面，构建DOM树。<br>8、关闭TCP连接（四次挥手）。</p><h3 id="HTTP-传输过程"><a href="#HTTP-传输过程" class="headerlink" title="HTTP 传输过程"></a>HTTP 传输过程</h3><p>含义：从建立连接到断开连接一共七个步骤，就是三次招手四次挥手</p><p>TCP 建立连接<br>浏览器发送请求命令<br>浏览器发送请求头<br>服务器应答<br>服务器回应信息<br>服务器发送数据<br>断开TCP连接</p><h3 id="浏览器如何渲染页面的？"><a href="#浏览器如何渲染页面的？" class="headerlink" title="浏览器如何渲染页面的？"></a>浏览器如何渲染页面的？</h3><p>浏览器解析html源码，将HTML转换成dom树，将CSS样式转换成stylesheet（CSS规则树），浏览器会将CSS规则树附着在DOM树上，并结合两者生成渲染树（Render Tree）生成布局（flow），浏览器通过解析计算出每一个渲染树节点的位置和大小，在屏幕上画出渲染树的所有节点合成绘制生成页面。</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>减少http请求次数<br>减少DNS查找<br>避免重定向<br>使用Ajax缓存<br>少用全局变量、减少DOM操作的使用<br>优化图片大小，通过CSS Sprites（精灵图）优化图片，<br>将css放在顶部，将js放在底部</p><h3 id="webpack是怎么打包的，babel又是什么"><a href="#webpack是怎么打包的，babel又是什么" class="headerlink" title="webpack是怎么打包的，babel又是什么"></a>webpack是怎么打包的，babel又是什么</h3><p>Webpack：把所有依赖打包成一个 bundle.js文件，通过代码分割成单元片段并按需加载。Webpack是以公共JS的形式来书写脚本的，但对AMD&#x2F;CMD的支持也很全面，方便旧项目进行代码迁移。<br>把项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p><p>babel将es6、es7、es8等语法转换成浏览器可识别的es5或es3语法。</p><h3 id="git-和-svn的区别"><a href="#git-和-svn的区别" class="headerlink" title="git 和 svn的区别"></a>git 和 svn的区别</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，首先要从中央服务器哪里得到最新的版本，干完活后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作（如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了）</p><p>Git是分布式版本控制系统，没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="webSocket"><a href="#webSocket" class="headerlink" title="webSocket"></a>webSocket</h3><p>webSocket： 可以让服务器主动向客户端发送消息，适合开发聊天室，多人游戏等协作应用。</p><p>WebSocket协议是基于TCP的一种新的网络协议。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><h3 id="require和import区别"><a href="#require和import区别" class="headerlink" title="require和import区别"></a>require和import区别</h3><ul><li><p>调用时间</p><p>  require运行时调用，理论上可以运用在代码任何地，甚至不需要赋值给某个变量之后再使用。<br>  lmport是编译时候调用，必须放在文件开头，而且使用格式也是确定的。</p></li><li><p>遵循规范</p><p>  require 是 AMD规范引入方式<br>  import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p></li><li><p>本质<br>  require是赋值过程，其实require 的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量。<br>  import是解构过程。</p></li></ul><p>通过require 引入基础数据类型时，属于复制该变量。<br>通过require 引入复杂数据类型时，数据浅拷贝该对象。<br>出现模块之间的循环引用时,会输出已经执行的模块,而未执行的模块不输出(比较复杂）。CommonJS模块默认export的是一个对象，即使导出的是基础数据类型。</p><p>ES6 模块语法是 JavaScript 模块的标准写法，坚持使用这种写法，取代 Node.js 的 CommonJS 语法。<br>使用import取代require()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS 的写法</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;moduleA&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.<span class="property">func1</span>;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.<span class="property">func2</span>;</span><br><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleA&#x27;</span>;</span><br></pre></td></tr></table></figure><p>使用export取代module.exports。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonJS 的写法</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">React</span> = <span class="built_in">require</span>(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Breadcrumbs</span> = <span class="title class_">React</span>.<span class="title function_">createClass</span>(&#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;nav /&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Breadcrumbs</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 的写法</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Breadcrumbs</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;nav /&gt;`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Breadcrumbs</span>;</span><br></pre></td></tr></table></figure><h3 id="事件循环（Event-Loop）"><a href="#事件循环（Event-Loop）" class="headerlink" title="事件循环（Event Loop）"></a>事件循环（Event Loop）</h3><p>原因：JavaScript是单线程，所有任务需要排队，前一个任务结束，才会执行后一个任务。</p><p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。<br>同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br>异步任务：不进入主线程、而进入”任务队列”的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>同步和异步任务分别进入不同的执行环境， 先执行同步任务，把异步任务放入循环队列当中挂起，等待同步任务执行完，再执行队列中的异步任务。异步任务先执行微观任务，再执行宏观任务。一直这样循环，反复执行。</p><p>微任务：Promise.then、catch、finally、async&#x2F;await。<br>宏任务：整体代码 Script、UI 渲染、setTimeout、setInterval、Dom事件、ajax事件。</p><h3 id="宏任务、微任务是怎么执行的？"><a href="#宏任务、微任务是怎么执行的？" class="headerlink" title="宏任务、微任务是怎么执行的？"></a>宏任务、微任务是怎么执行的？</h3><p>执行顺序：先执行同步代码，遇到异步宏任务则将异步宏任务放入宏任务队列中，遇到异步微任务则将异步微任务放入微任务队列中，当所有同步代码执行完毕后，再将异步微任务从队列中调入主线程执行，微任务执行完毕后再将异步宏任务从队列中调入主线程执行，一直循环直至所有任务执行完毕。</p><h3 id="什么是单页面应用（SPA）"><a href="#什么是单页面应用（SPA）" class="headerlink" title="什么是单页面应用（SPA）"></a>什么是单页面应用（SPA）</h3><p>一个系统只加载一次资源，之后的操作交互、数据交互是通过路由、ajax来进行，页面并没有刷新。<br>在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。</p><p>优点：<br>前后端分离<br>良好的交互体验——用户不用刷新页面，页面显示流畅<br>减轻服务器压力——服务器只出数据<br>共用一套后端代码——多个客户端可共用一套后端代码<br>加载速度快,内容的改变不需要重新加载整个页面,对服务器压力小<br>缺点：<br>SEO难度高——数据渲染在前端进行<br>页面初次加载比较慢,页面复杂提高很多<br>多页面： 一个应用多个页面,页面跳转时整个页面都刷新,每次都请求一个新的页面<br>有点:SEO效果好</p><p>缺点： 页面切换慢,每次切换页面需要选择性的重新加载公共资源</p><h3 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h3><p>渐进增强（Progressive Enhancement）： 一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。<br>优雅降级（Graceful Degradation）： 一开始就构建站点的完整功能，然后针对浏览器测试和修复。</p><p>在传统软件开发中，经常会提到向上兼容和向下兼容的概念。渐进增强相当于向上兼容，而优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本的或者说后期开发的版本支持和兼容早期开发的版本，向上兼容的很少。大多数软件都是向下兼容的。</p><p>二者区别：<br>1、优雅降级和渐进增强只是看待同种事物的两种观点。<br>2、优雅降级观点认为应该针对那些最高级、最完善的浏览器来设计网站。<br>3、渐进增强观点则认为应关注于内容本身。</p><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="MVC和MVVM的理解"><a href="#MVC和MVVM的理解" class="headerlink" title="MVC和MVVM的理解"></a>MVC和MVVM的理解</h3><p>M:model(数据模型)，V：view(视图)，C：controller(逻辑处理)，VM：(连接model和view)<br>MVC:单向通信。必须通过controller来承上启下。<br>MVVM：数据双向绑定，数据改变视图，视图改变数据。</p><h3 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h3><p>通过数据劫持结合发布—订阅模式，通过Object.defineProperty()为各个属性定义get、set方法，在数据发生改变时给订阅者发布消息，触发相应的事件回调。</p><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。</p><ul><li><p>beforeCreate</p><p>  创建前。此时，组件实例刚刚创建，还未进行数据观测和事件配置，拿不到任何数据。</p></li><li><p>created</p><p>  创建完成。vue 实例已经完成了数据观测，属性和方法的计算(比如props、methods、data、computed和watch此时已经拿得到)，未挂载到DOM，不能访问到el属性，el属性，ref属性内容为空数组常用于简单的ajax请求，页面的初始化。</p></li><li><p>beforeMount</p><p>  挂载前。挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM）。编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上。</p></li><li><p>mounted</p><p>  挂载完成。也就是模板中的HTML渲染到HTML页面中，此时可以通过DOM API获取到DOM节点，$ref属性可以访问常用于获取VNode信息和操作，ajax请求，mounted只会执行一次。</p></li><li><p>beforeUpdate</p><p>  在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，不会触发附加地重渲染过程。</p></li><li><p>updated</p><p>  更新后。在由于数据更改导致地虚拟DOM重新渲染和打补丁之后调用，</p></li><li><p>beforeDestroy</p><p>  销毁前。在实例销毁之前调用，实例仍然完全可用。（一般在这一步做一些重置的操作，比如清除掉组件中的定时器 和 监听的dom事件）</p></li><li><p>destroyed</p><p>  销毁后。在实例销毁之后调用，调用后，vue实列指示的所有东西都会解绑，所有的事件监听器会被移除。</p></li></ul><p>其他：</p><ul><li><p>activated</p><p>  在keep-alive组件激活时调用</p></li><li><p>deactivated</p><p>  在keep-alive组件停用时调用</p></li></ul><h3 id="为什么使用虚拟DOM-常问"><a href="#为什么使用虚拟DOM-常问" class="headerlink" title="为什么使用虚拟DOM(常问)"></a>为什么使用虚拟DOM(常问)</h3><p>创建真实DOM的代价高：真实的 DOM 节点 node 实现的属性很多，而 vnode 仅仅实现一些必要的属性，相比起来，创建一个 vnode 的成本比较低。<br>触发多次浏览器重绘及回流：使用 vnode ，相当于加了一个缓冲，让一次数据变动所带来的所有 node 变化，先在 vnode 中进行修改，然后 diff 之后对所有产生差异的节点集中一次对 DOM tree 进行修改，以减少浏览器的重绘及回流。<br>虚拟dom由于本质是一个js对象，因此天生具备跨平台的能力，可以实现在不同平台的准确显示。<br>Virtual DOM 在性能上的收益并不是最主要的，更重要的是它使得 Vue 具备了现代框架应有的高级特性。</p><h3 id="v-if-和-v-show的作用和区别"><a href="#v-if-和-v-show的作用和区别" class="headerlink" title="v-if 和 v-show的作用和区别"></a>v-if 和 v-show的作用和区别</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">无论v-<span class="built_in">show</span>的值为<span class="literal">true</span>或者<span class="literal">false</span>,元素都会存在于html页面中; 而v-<span class="keyword">if</span>的值为<span class="literal">true</span>时,元素才会</span><br><span class="line">存在于html页面中。</span><br><span class="line">v-<span class="built_in">show</span>指令是通过修改元素的<span class="built_in">display</span>属性来实现的。</span><br><span class="line">v-<span class="keyword">if</span>是动态地向DOM树内添加或者删除DOM元素,v-<span class="built_in">show</span>是通过设置DOM元素的<span class="built_in">display</span>样式属性控制显隐的。</span><br><span class="line">v-<span class="keyword">if</span>是<span class="string">&quot;真正的&quot;</span>条件渲染,因为它会确保在奇幻过程中条件快内的事件监听器和子组件适当的销毁和重建。</span><br><span class="line">v-<span class="keyword">if</span>也是惰性的,如果在初始渲染时条件为假,则什么也不做,直到条件第一次变为真时,才开始渲染条件块。</span><br><span class="line">v-<span class="built_in">show</span>不管初始条件是什么,元素总会背渲染,并且只是简单地基于css进行切换。</span><br><span class="line">一般来说,v-<span class="keyword">if</span>有更高的切换开销,而v-<span class="built_in">show</span>则有更高的初始渲染开销</span><br></pre></td></tr></table></figure><p>因此,如果需要非常频繁地切换,使用v-show比较好,如果在运行时条件不会改变时,用v-if比较好</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">切换时生命周期函数的执行</span><br><span class="line">v-<span class="keyword">if</span></span><br><span class="line">初始渲染</span><br><span class="line">初始值为<span class="keyword">false</span>时,不会渲染(所谓惰性),生命周期函数不会执行</span><br><span class="line">初始值为<span class="keyword">true</span>时,组件开始渲染,依次执行beforCreate,created,beforeMount,mounted等生命周期</span><br><span class="line"></span><br><span class="line">切换时</span><br><span class="line">从<span class="keyword">false</span>到<span class="keyword">true</span>:依次执行beforeCreate,created,beforeMount,moynted</span><br><span class="line">从<span class="keyword">true</span>到<span class="keyword">false</span>:依次执行beforeDestroy,destroyed</span><br><span class="line"></span><br><span class="line">v-<span class="keyword">show</span></span><br><span class="line">初始渲染</span><br><span class="line">无论初始状态为<span class="keyword">true</span>还是<span class="keyword">false</span>,组件都会渲染,依次执行beforeCreate,created,beforeMount,mounted</span><br><span class="line"></span><br><span class="line">切换</span><br><span class="line">基于css进行切换,对生命周期函数无影响.</span><br></pre></td></tr></table></figure><h3 id="用过vue的哪些组件？"><a href="#用过vue的哪些组件？" class="headerlink" title="用过vue的哪些组件？"></a>用过vue的哪些组件？</h3><p>1、vue-route<br>2、axios<br>3、vuex<br>4、Element UI<br>5、swiper<br>6、vue-echarts<br>7、vue-video-player<br>8、vue-photo-preview等等</p><h3 id="vue-router-的模式有？"><a href="#vue-router-的模式有？" class="headerlink" title="vue-router 的模式有？"></a>vue-router 的模式有？</h3><p>1、hash模式，用URL hash值来做路由，支持所有浏览器；该模式实现的路由，在通过链接后面添加““#”+路由名字”。<br>2、history模式，由h5提供的history对象实现，依赖H5 History API和服务器配置。<br>3、abstract模式，支持所有JS运行环境，如Node服务器端，如果发现没有浏览器的API，路由会自动强制进入该模式。</p><h3 id="组件之间如何传值"><a href="#组件之间如何传值" class="headerlink" title="组件之间如何传值"></a>组件之间如何传值</h3><ul><li><p>Vue父子 组件之间传值<br>子组件通过props来接受数据和通过$emit来触发父组件的自定义事件</p></li><li><p>兄弟组件之间的传值<br>建一个公共组件bus.js.。传递方通过事件触发bus.$emit。接收方通过在mounted（）{}生命周期里触发bus.$on。</p></li><li><p>可以通过VUEX 来跨组件传参</p></li><li><p>父孙传值 $attrs（向下）$listeners（向上）</p></li><li><p>祖先和子孙传值provide&#x2F;inject</p></li><li><p>获取父组件实例this.$parent</p></li></ul><h3 id="路由之间如何传参"><a href="#路由之间如何传参" class="headerlink" title="路由之间如何传参"></a>路由之间如何传参</h3><ul><li><p>通过router-link路由导航跳转传递<br><code>&lt;router-link to=</code>&#x2F;a&#x2F;${id}<code>&gt;routerlink传参&lt;/router-link&gt;</code></p></li><li><p>跳转时使用push方法拼接携带参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">`/getlist/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>通过路由属性中的name来确定匹配的路由，通过params来传递参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Getlist&#x27;</span>,</span><br><span class="line">   <span class="attr">params</span>: &#123;</span><br><span class="line">     <span class="attr">id</span>: id</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用path来匹配路由，然后通过query来传递参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&#x27;/getlist&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：query有点像ajax中的get请求，而params像post请求。</p></blockquote><p>params在地址栏中不显示参数，刷新页面，参数丢失,<br>其余方法在地址栏中显示传递的参数，刷新页面，参数不丢失。</p><h3 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h3><p>原理：Vuex是专门为vue.js应用程序设计的状态管理工具。</p><p>1、state   保存vuex中的数据源，通过this.$store.state获取</p><p>2、getters用于监听state中的值的变化，返回计算后的结果。getter的返回值会根据它的依赖被缓存起来</p><p>3、mutations  是修改store中的值得唯一方式&#x2F;&#x2F;this.$store.commit(‘add’)</p><p>4、action 官方建议提交一个actions，在actions中提交mutations再去修改状态值。this.$store.dispatch(‘add’)</p><p>5、modules 模块化</p><h3 id="如何解决vuex页面刷新数据丢失问题？"><a href="#如何解决vuex页面刷新数据丢失问题？" class="headerlink" title="如何解决vuex页面刷新数据丢失问题？"></a>如何解决vuex页面刷新数据丢失问题？</h3><p>原因：因为vuex里的数据是保存在运行内存中的，当页面刷新时，页面会重新加载vue实例，vuex里面的数据就会被清空。<br>解决方法：将vuex中的数据直接保存到浏览器缓存中。（一般是用sessionStorage）</p><h3 id="computed和watch的区别？"><a href="#computed和watch的区别？" class="headerlink" title="computed和watch的区别？"></a>computed和watch的区别？</h3><p>computed值有缓存、触发条件是依赖值发生更改、 watch无缓存支持异步、监听数据变化</p><p>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生<br>改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><p>watch： 更多的是观察的作用，支持异步，类似于某些数据的监听回调 ，每当监听的数据变化时都<br>会执行回调进行后续操作；</p><p>computed应用场景：需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以<br>利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</p><p>watch应用场景：需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch<br>选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结<br>果前，设置中间状态。这些都是计算属性无法做到的。</p><h3 id="route和router的区别"><a href="#route和router的区别" class="headerlink" title="route和router的区别"></a>route和router的区别</h3><p>route:是路由信息对象，包括“path,parms,hash,name“等路由信息参数。<br>router:是路由实例对象，包括了路由跳转方法，钩子函数等。</p><h3 id="vue中数据变了但是视图不跟新怎么解决？"><a href="#vue中数据变了但是视图不跟新怎么解决？" class="headerlink" title="vue中数据变了但是视图不跟新怎么解决？"></a>vue中数据变了但是视图不跟新怎么解决？</h3><p>vue不能检测以下变动的数组：</p><p>1、当你利用索引直接设置一个项时，vm.items[indexOfItem] &#x3D; newValue<br>2、当你修改数组的长度时，例如： vm.items.length &#x3D; newLength</p><p>对象属性的添加或删除</p><p>由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p><p>解决办法：</p><p>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上<br>Vue.set(vm.someObject, ‘b’, 2) 或者 this.$set(this.someObject,‘b’,2) （这也是全局 Vue.set 方法的别名）</p><p>异步更新队列</p><p>在最新的项目中遇到了这种情况，数据第一次获取到了，也渲染了，但是第二次之后数据只有在再一次渲染页面的时候更新，并不能实时更新。</p><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p><p>解决办法：</p><p>可在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数在 DOM 更新完成后就会调用</p><h3 id="vue中data为什么是函数而不是对象？"><a href="#vue中data为什么是函数而不是对象？" class="headerlink" title="vue中data为什么是函数而不是对象？"></a>vue中data为什么是函数而不是对象？</h3><p>vue组件是可复用的vue实例，一个组件被创建好之后，就可能被用在各个地方，而组件不管被复用了多少次，组件中的data数据都应该是相互隔离，互不影响的.</p><p>基于这一理念，组件每复用一次，data数据就会被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响。</p><p>如果data是对象的话，每当被复用是，复用的对象和源对象都会指向同一个内存地址（浅拷贝），互相之间相互影响，所以要是函数</p><h3 id="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"><a href="#vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）" class="headerlink" title="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"></a>vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）</h3><p>首先了解父子组件生命周期执行顺序<br>加载渲染数据过程<br>父组件 beforeCreate<br>父组件 created<br>父组件 beforeMount<br>子组件 beforeCreate<br>子组件 created<br>子组件 beforeMount<br>子组件 mounted<br>父组件 mounted</p><p>原因：因为生命周期只会执行一次，数据是要等到异步请求以后才能拿到，那么子组件的mounted钩子执行的时候，还没有拿到父组件传递过来的数据，但是又必须要打印出来结果，那这样的话，就只能去打印props中的默认值空字符串了，所以打印的结果是一个空字符串。</p><p>解决办法：</p><p>1、使用v-if控制组件渲染的时机</p><p>初始还没拿到后端接口的异步数据的时候，不让组件渲染，等拿到的时候再去渲染组件。使用v-if&#x3D;”变量”去控制，初始让这个变量为false，这样的话，子组件就不会去渲染，等拿到数据的时候，再让这个变量变成true，</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isTrue</span>:<span class="literal">false</span> <span class="comment">// 初始为false</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">monted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$post</span>.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="title function_">getData</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">result</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isTrue</span> = <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、使用watch监听数据的变化</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">tableData</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">default</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">   <span class="title function_">tableData</span>(<span class="params">val</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3、使用VueX</p><h3 id="Vue-路由跳转方式"><a href="#Vue-路由跳转方式" class="headerlink" title="Vue 路由跳转方式"></a>Vue 路由跳转方式</h3><p>router-link 标签跳转<br>this.$router.push()<br>this.$router.replace()<br>this.$router.go(n)：（0：当前页，-1上一页，+1下一页，n代表整数）</p><h3 id="Vue-中-for循环为什么加-key？"><a href="#Vue-中-for循环为什么加-key？" class="headerlink" title="Vue 中 for循环为什么加 key？"></a>Vue 中 for循环为什么加 key？</h3><p>为了性能优化， 因为vue是虚拟DOM，更新DOM时用diff算法对节点进行一一比对，比如有很多li元素，要在某个位置插入一个li元素，但没有给li上加key，那么在进行运算的时候，就会将所有li元素重新渲染一遍，但是如果有key，那么它就会按照key一一比对li元素，只需要创建新的li元素，插入即可，不需要对其他元素进行修改和重新渲染。<br>key也不能是li元素的index，因为假设我们给数组前插入一个新元素，它的下标是0，那么和原来的第一个元素重复了，整个数组的key都发生了改变，这样就跟没有key的情况一样了。</p><h3 id="vue路由守卫有哪些？"><a href="#vue路由守卫有哪些？" class="headerlink" title="vue路由守卫有哪些？"></a>vue路由守卫有哪些？</h3><p>路由守卫分为三种 ——分别是：全局路由守卫、组件路由守卫、独享路由守卫。</p><p>全局守卫<br>全局守卫又分为全局前置守卫、和后置守卫</p><ol><li>router.beforeEach((to,from,next)&#x3D;&gt;{})</li></ol><p>回调函数中的参数，to：进入到哪个路由去，from：从哪个路由离开，next：函数，决定是否展示你要看到的路由页面。</p><p>从名字全局前置守卫不难理解，它是全局的，即对 整个单页应用（SPA） 中的所有路由都生效，所以当定义了全局的前置守卫，在进入每一个路由之前都会调用这个回调，那么如果你在回调中对路由的跳转条件判断出错，简单点就是死循环…因为你遗漏了某种路由跳转的情况，守卫会一直执行。所以在使用全局前置守卫的时候一定要判断清楚可能会出现的路由跳转的情况。</p><p>2.router.afterEach((to, from) &#x3D;&gt; {}）</p><p>只有两个参数，to：进入到哪个路由去，from：从哪个路由离。</p><p>理解了全局前置守卫，那么全局后置守卫也就那么一回事。全局后置守卫是整个单页应用中每一次路由跳转后都会执行其中的回调。所以多用于路由跳转后的相应页面操作，并不像全局前置守卫那样会在回调中进行页面的重定向或跳转。</p><p>组件内的守卫<br>组件路由守卫分为到达这个组件时，离开这个组件时</p><ol><li>beforeRouteEnter:(to,from,next)&#x3D;&gt;{}——到达</li></ol><p>to，from参数与上面使用方法一致。next回调函数略有不同。<br>1<br>2.beforeRouteUpdate:(to,from,next)&#x3D;&gt;{}——更新</p><ol start="3"><li>beforeRouteLeave:(to,from,next)&#x3D;&gt;{}——离开</li></ol><p>点击其他组件时，判断是否确认离开。确认执行next()；取消执行next(false)，留在当前页面。<br>1<br>路由独享的守卫</p><ol><li>beforeEnter:(to,from,next)&#x3D;&gt;{}</li></ol><p>与全局路由守卫用法一致，但是只能针对一个页面使用<br>1</p><h3 id="vue常⽤的修饰符"><a href="#vue常⽤的修饰符" class="headerlink" title="vue常⽤的修饰符"></a>vue常⽤的修饰符</h3><p>.stop:等统⼀JavaScript中的event.stopPropagation(),防⽌事件冒泡<br>.prevent:等同于JavaScript中的event。preventDefault(),防⽌执⾏预设的⾏为(如果事件可<br>取消，则取消该事件，⽽不停⽌事件的进⼀步传播)；<br>.capture:与事件冒泡的⽅向相反，事件捕获由外到内<br>.self:只会触发⾃⼰范围内的事件，不包含⼦元素；<br>.once:只会触发⼀次。</p><h3 id="vue的两个核⼼点"><a href="#vue的两个核⼼点" class="headerlink" title="vue的两个核⼼点"></a>vue的两个核⼼点</h3><p>数据驱动：ViewModel，保证数据和视图的⼀致性<br>组件系统：应⽤类UI可以看做全部是由组件树构成的</p><h3 id="delete和Vue-delete删除数组的区别"><a href="#delete和Vue-delete删除数组的区别" class="headerlink" title="delete和Vue.delete删除数组的区别"></a>delete和Vue.delete删除数组的区别</h3><p>delete只是被删除的元素变成了empty&#x2F;undefined其他的元素的键值还是不变。<br>Vue.delete直接删除了数组 改变了数组的键值</p><h3 id="vue常⽤的UI组件库"><a href="#vue常⽤的UI组件库" class="headerlink" title="vue常⽤的UI组件库"></a>vue常⽤的UI组件库</h3><p>Mint UI，element，VUX</p><h3 id="Vue首页白屏是什么问题引起的？如何解决呢？"><a href="#Vue首页白屏是什么问题引起的？如何解决呢？" class="headerlink" title="Vue首页白屏是什么问题引起的？如何解决呢？"></a>Vue首页白屏是什么问题引起的？如何解决呢？</h3><h3 id="性能优化篇"><a href="#性能优化篇" class="headerlink" title="性能优化篇"></a>性能优化篇</h3><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h3><p>生命周期是什么？<br>react 实例的生命周期，就是react实例从初始化，更新，到销毁的过程</p><p>react实例生命周期经历三个阶段<br>初始化阶段：完成从react组件创建到首次渲染的过程</p><p>更新阶段：当调用setState函数时，会引起组件的重新渲染</p><p>销毁阶段：完成组件的销毁</p><p>三个阶段分别对应的构造函数有<br>初始化阶段：<br>constructor<br>构造函数里，可以做状态的初始化，接收props的传值<br>componentWillMount： 在渲染前调用，相当于vue中的beforeMount</p><p>render<br>渲染函数，不要在这里修改数据。 vue中也有render函数。</p><p>componentDidMount<br>渲染完毕，在第一次渲染后调用。</p><p>运行中阶段（更新）<br>当组件的 props 或 state 发生变化时会触发更新（严谨的说，是只要调用了setState（）或者改变了props时）。组件更新的生命周期调用顺序如下：</p><p>shouldComponentUpdate<br>是否更新？ 需要返回true或者false。如果是false，那么组件就不会继续更新了。</p><p>componentWillUpdate<br>即将更新。<br>componentWillReceiveProps(nextProps)： 在组件接收到一个新的 prop (更新后)时被调用。<br>这个方法在初始化render时不会被调用。nextProps 是props的新值，而 this.props是旧值。</p><p>render<br>不要在这里修改数据</p><p>componentDidUpdate<br>在组件完成更新后立即调用。在初始化时不会被调用。 相当于vue中的updated</p><p>销毁阶段（卸载）<br>componentWillUnmount()<br>即将卸载，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p><h3 id="为什么虚拟DOM-会提高性能"><a href="#为什么虚拟DOM-会提高性能" class="headerlink" title="为什么虚拟DOM 会提高性能"></a>为什么虚拟DOM 会提高性能</h3><p> 首先，（虚拟DOM是什么） 虚拟DOM就是一个JavaScript对象。通过这个JavaScript对象来描述真实DOM</p><p> 如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tagName</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;width:200px;height: 100px;&quot;</span>,</span><br><span class="line">    <span class="attr">innerHTML</span>: <span class="string">&quot;我是p&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其次，操作虚拟DOM，就是在操作javascript对象，所以，并不会引起页面的重绘和重排。而操作真实DOM是会引起页面的重绘和重排的。</p><h3 id="React的diff原理"><a href="#React的diff原理" class="headerlink" title="React的diff原理"></a>React的diff原理</h3><p>传统diff算法<br>需要遍历整棵树的节点然后进行比较，是一个深度递归的过程，运算复杂度常常是O(n^3)</p><p>react diff的优化策略<br>DOM节点跨层级的操作不做优化，因为很少这么做，这是针对的tree层级的策略；<br>对于同一个类的组件，会生成相似的树形结构，对于不同类的组件，生成不同的树形结构，这是针对conponent层级的策略；<br>对于同一级的子节点，拥有同层唯一的key值，来做删除、插入、移动的操作，这是针对element层级的策略；</p><h3 id="调用setState之后，发生了什么？"><a href="#调用setState之后，发生了什么？" class="headerlink" title="调用setState之后，发生了什么？"></a>调用setState之后，发生了什么？</h3><p>合并state<br>把传入setState（）里的参数对象和当前的state进行（属性）合并。 触发调和过程<br>（Reconciliation）</p><p>重新渲染组件<br>React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面<br>React 会自动计算出新的树与老树的节点差异（用diff算法），然后根据差异对界面进行最小化重<br>渲染</p><h3 id="state和props的区别"><a href="#state和props的区别" class="headerlink" title="state和props的区别"></a>state和props的区别</h3><p>state是组件的状态，也叫组件内部的数据</p><p>props是组件的属性，也可以认为是外部给组件传入的数据</p><h3 id="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"><a href="#React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？" class="headerlink" title="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"></a>React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？</h3><p>setState是异步的。</p><p>如果要拿到修改后的状态，需要使用回调函数的方式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改变状态后想做一些事情：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  属性名:属性值</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//一般是用于在setState之后做一些操作</span></span><br><span class="line">  <span class="comment">//this.state == 修改之后的state</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为什么不能直接用以下办法更新state"><a href="#为什么不能直接用以下办法更新state" class="headerlink" title="为什么不能直接用以下办法更新state"></a>为什么不能直接用以下办法更新state</h3><p>this.state.msg &#x3D; “hello”;</p><p>因为，这样不会引起组件的重新渲染，所以，数据修改后没法 呈现在页面上。</p><p>而调用setState()函数，会引起组件的重新渲染，这样更新的数据就会呈现在页面上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VScode快捷键</title>
    <link href="https://superq314.github.io/2022/09/13/VScode/VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://superq314.github.io/2022/09/13/VScode/VScode%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-09-13T06:35:15.000Z</published>
    <updated>2022-09-13T07:22:31.242Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>col1</th><th>col2</th></tr></thead><tbody><tr><td>单词跳跃</td><td>Alt</td></tr><tr><td>单词选中</td><td>Alt+shift</td></tr><tr><td>注释</td><td>ctrl+’&#x2F;‘</td></tr><tr><td>代码块注释</td><td>Alt+shift+’A’</td></tr><tr><td>tab对齐</td><td>Alt+shift+’F’</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前沿知识</title>
    <link href="https://superq314.github.io/2022/09/13/frontEnd/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/"/>
    <id>https://superq314.github.io/2022/09/13/frontEnd/%E5%89%8D%E6%B2%BF%E7%9F%A5%E8%AF%86/</id>
    <published>2022-09-13T06:25:30.000Z</published>
    <updated>2022-09-16T02:29:36.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>动态网页技术</p><ul><li>JSP</li><li>ASP</li><li>PHP</li></ul><p>MVC template：分层技术</p><p>平台兼容</p><p>&#x3D;&#x3D;&gt; prototype、jQuery、MooTools、Dojo、modernizer</p><p>UI组件化</p><p>&#x3D;&#x3D;&gt; Bindows、YUII、jQuery UI、Ext、Bootstrap、Semantic UI</p><p>分层模块化</p><p>&#x3D;&#x3D;&gt; JavaScript MVC、BackBone、Knockout、Vue、EmberJS、Angular、React</p><p>相对地址：</p><pre><code>当前目录./上一级目录../下一级./imgs</code></pre><p>绝对地址</p><p>引用地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浏览器输入url回车之后发生了什么</title>
    <link href="https://superq314.github.io/2022/09/10/computerBasics/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://superq314.github.io/2022/09/10/computerBasics/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2022-09-10T11:23:12.000Z</published>
    <updated>2022-09-10T12:31:17.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ul><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li><li>URL 解析</li><li>地址解析：</li></ul><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><p>HSTS</p><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：你所不知道的 HSTS。</p><p>其他操作</p><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><p>检查缓存</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter.png"></p><h2 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h2><p>基本步骤</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_baisc_process.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">浏览器缓存</button></li><li class="tab"><button type="button" data-href="#super-2">操作系统缓存</button></li><li class="tab"><button type="button" data-href="#super-3">路由器缓存</button></li><li class="tab"><button type="button" data-href="#super-4">ISP DNS 缓存</button></li><li class="tab"><button type="button" data-href="#super-5">根域名服务器查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>路由器也有自己的缓存。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：<br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_dns.png"></p><blockquote><p>根域名服务器：维基百科<br>需要注意的点</p></blockquote><ol><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li>迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li>什么是 DNS 劫持</li><li>前端 dns-prefetch 优化</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h2><p>TCP&#x2F;IP 分为四层，在发送数据时，每层都要对数据进行封装：<br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_tcp.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">应用层：发送 HTTP 请求</button></li><li class="tab"><button type="button" data-href="#super-2">传输层：TCP 传输报文</button></li><li class="tab"><button type="button" data-href="#super-3">网络层：IP 协议查询 Mac 地址</button></li><li class="tab"><button type="button" data-href="#super-4">链路层：以太网协议</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够準确地还原报文信息。<br>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP&#x2F;IP 三次握手，网上已经有很多段子和图片生动地描述了。<br>相关知识点：</p><ol><li>SYN 泛洪攻击</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP&#x2F;IP 中，它位于网络层。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">以太网协议</button></li><li class="tab"><button type="button" data-href="#super-2">Mac 地址</button></li><li class="tab"><button type="button" data-href="#super-3">广播</button></li><li class="tab"><button type="button" data-href="#super-4">服务器接受请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>根据以太网协议将数据分为以 “帧” 为单位的数据包，每一帧分为两个部分：</p><ul><li>标头：数据包的发送者、接受者、数据类型</li><li>数据：数据包具体内容</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>以太网规定了连入网络的所有设备都必须具备 “网卡” 接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p>注意：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li>ARP 攻击</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>接受过程就是把以上步骤逆转过来，参见上图。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h2><p>大致流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_1.png"></p><p>HTTPD</p><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><p>处理请求</p><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>验证是否配置虚拟主机</li><li>验证虚拟主机是否接受此方法</li><li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><p>重定向</p><p>假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：详见这篇文章</p></blockquote><p>URL 重写</p><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="浏览器接受响应"><a href="#浏览器接受响应" class="headerlink" title="浏览器接受响应"></a>浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h2 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h2><p>浏览器内核</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_broswer.png"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p>基本流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_2.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">HTML 解析</button></li><li class="tab"><button type="button" data-href="#super-2">CSS 解析</button></li><li class="tab"><button type="button" data-href="#super-3">渲染树</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">1. 解码（encoding）</button></li><li class="tab"><button type="button" data-href="#super-2">2. 预解析（pre-parsing）</button></li><li class="tab"><button type="button" data-href="#super-3">3.1 符号化（Tokenization）</button></li><li class="tab"><button type="button" data-href="#super-4">3.2 构建树（tree construction）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到&lt;，&gt;状态都会产生变化。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建DOM对象并把这些符号插入到DOM对象中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_html.png"></p><p>浏览器容错进制</p><p>你从来没有在浏览器看过类似” 语法无效” 的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p>事件</p><p>当整个解析的过程完成以后，浏览器会通过DOMContentLoaded事件来通知DOM解析完成。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p>CSS 匹配规则</p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了display:none的节点。</p></blockquote><p>计算</p><p>通过计算让任何尺寸值都减少到三个可能之一：auto、百分比、px，比如把rem转化为px。</p><p>级联</p><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做specificity的公式，这个公式会通过：</p><ol><li>标签名、class、id</li><li>是否内联样式</li><li>!important</li></ol><p>然后得出一个权重值，取最高的那个。</p><p>渲染阻塞</p><p>当遇到一个script标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>CSS 会阻塞 JS 执行</li><li>JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>CSS 资源排在 JavaScript 资源前面</li><li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：这篇文章</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">佈局与绘製</button></li><li class="tab"><button type="button" data-href="#super-2">合并渲染层</button></li><li class="tab"><button type="button" data-href="#super-3">回流与重绘</button></li><li class="tab"><button type="button" data-href="#super-4">JavaScript 编译执行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>把以上绘制的所有图片合并，最终输出一张图片。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>回流 (reflow)</p><p>当浏览器发现某个部分发现变化影响了佈局时，需要倒回去重新渲染，会从html标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p>重绘 (repaint)</p><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li>display:none 会触发回流，而 visibility:hidden 只会触发重绘。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>大致流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_3.png"></p><p>可以分为三个阶段：</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">词法分析</button></li><li class="tab"><button type="button" data-href="#super-2">预编译</button></li><li class="tab"><button type="button" data-href="#super-3">执行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出 “语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>分词，例如将var a &#x3D; 2，，分成var、a、&#x3D;、2这样的词法单元。</li><li>解析，将词法单元转换成抽象语法树（AST）。</li><li>代码生成，将抽象语法树转换成机器指令。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>JS 有三种运行环境：</p><ul><li>全局环境</li><li>函数环境</li><li>eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p>创建执行上下文</p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>确认当前执行环境是否能访问变量</li></ul></li><li>确定 This 指向</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>JS 线程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_7.png"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>定时器触发线程：主要控制setInterval和setTimeout，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p>注：浏览器对同一域名的併发连接数是有限的，通常为 6 个。</p><p>宏任务</p><p>分为：</p><ul><li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p>微任务</p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：Promise，process.nextTick。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png"></p><p>代码例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 宏任务 异步</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>) <span class="comment">// 微任务</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>) <span class="comment">// 宏任务 同步</span></span><br></pre></td></tr></table></figure><p>以上代码输出顺序为：1,3,5,4,2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>chrome调试</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/0-0grammar/chrome%E8%B0%83%E8%AF%95/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/0-0grammar/chrome%E8%B0%83%E8%AF%95/</id>
    <published>2022-09-10T11:14:55.000Z</published>
    <updated>2022-09-13T07:22:30.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开调试器F12,或者点击鼠标右键，选择检查或检查属性</p><p>Elements[元素]：这里就是html和css了，我们经常在这里进行样式css调试</p><p>Console[控制台]：这里是打印器，可以理解为一个记录日志，所有的报错信息会在这里体现</p><ul><li>查看信息</li><li>运行脚本</li></ul><p>Sources[源代码]：这里是断点调试，也就是debugger，不明的话在你的js里面打上一个debugger试试就知道了，方便按步执行代码，找出代码在那一步出的错</p><ul><li>调试脚本</li><li>查看变量</li><li>查看堆栈</li><li>其他资源调试</li></ul><p>Network[网络]：这里是http请求的调试器，在这里可以查看所有的http请求，包括你的请求头，请求路径，请求参数，后台返回的数据还有请求的状态等等</p><ul><li>查看页面所有资源请求</li><li>查看单独资源信息</li><li>过滤和排序信息</li></ul><p>Performance[性能]：</p><p>Memory[内存]：</p><p>application[应用程序]：这里就是我们说的浏览器缓存了，存放着缓存的数据，缓存分两种</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue实现网易云音乐</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/6Vue/vue%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/6Vue/vue%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</id>
    <published>2022-09-10T11:08:45.000Z</published>
    <updated>2022-09-10T11:11:05.008Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="技术基础"><a href="#技术基础" class="headerlink" title="技术基础"></a>技术基础</h2><p>Vue(2.5) + vuex + vue-router + vue-axios +better-scroll + Scss + ES6</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>开发一款移动端webAPP，</p><p>UI界面参考安卓版的网易云音乐，</p><p>flex布局适配常见移动端</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>Vue：用于构建用户界面的 MVVM 框架</p><p>vue-router：为单页面应用提供的路由系统，使用了 Lazy Loading Routes 技术来实现异步加载优化性能</p><p>vuex：Vue 集中状态管理，在多个组件共享某些状态时非常便捷</p><p>vue-lazyload：实现图片懒加载，节省用户流量，优化页面加载速度</p><p>better-scroll：解决移动端各种滚动场景需求的插件，使移动端滑动体验更加流畅</p><p>SCSS：css 预编译处理器</p><p>ES6：ECMAScript 新一代语法，模块化、解构赋值、Promise、Class 等方法非常好用</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>Node.js：利用 Express 搭建的本地测试服务器</p><p>vue-axios：用来请求后端 API 音乐数据</p><p>NeteaseCloudMusicApi：网易云音乐 NodeJS 版 API，提供音乐数据</p><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><p>vue-cli：Vue 脚手架工具，快速初始化项目代码</p><p>eslint：代码风格检查工具，帮助我们规范代码书写（一定要养成良好的代码规范）</p><p>iconfont ：阿里巴巴图标库，</p><p>fastclick ：消除 click 移动游览器 300ms 的延时</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>初始加载页面、播放器内核、轮播图（新歌首发、MV首发等）、每日推荐、推荐歌单（左右滑屏）、热榜页面、歌手页面、歌单详情、歌手详情、排行榜详情、搜索页面、播放列表、用户中心等等功能。</p><h3 id="推荐页面"><a href="#推荐页面" class="headerlink" title="推荐页面"></a>推荐页面</h3><p>推荐页分成三个部分，分别是 banner 轮播图、推荐歌单、推荐歌曲，数据都是使用 axios 请求 API 获取得到的，图片都使用 vue-lazyload 实现懒加载。</p><ol><li>轮播图 ：使用 better-scroll 实现，具体可以看这里 Slide 。点击跳转方面只实现歌曲和歌单的跳转，因为暂时只实现了这两个功能。</li><li>推荐歌单，推荐歌曲 ：使用 vuex 管理数据，方便组件之间的数据交互（播放器播放歌曲）。因为数据上还有播放数量，所以就顺便也加上去了。</li></ol><h3 id="排行榜页面"><a href="#排行榜页面" class="headerlink" title="排行榜页面"></a>排行榜页面</h3><p>同样是通过 API 获取到排行榜的数据，但是因为 API 获取到的是排行榜中所有歌曲的数据，所以难免在加载速度上有点慢，后期再看能不能优化一下，加载的慢毕竟太影响用户体验了，别的就没什么了。</p><h3 id="歌手页面"><a href="#歌手页面" class="headerlink" title="歌手页面"></a>歌手页面</h3><p>实现歌手列表的左右联动（这个需要理解理解），因为之前已经写过和这个有关的博客，所以就不多写了，具体可以看我之前的这个笔记移动端字母索引导航。</p><h3 id="歌曲列表组件"><a href="#歌曲列表组件" class="headerlink" title="歌曲列表组件"></a>歌曲列表组件</h3><p>用来显示歌曲列表，在很多的地方都进行了复用，例如：歌单详情页、排行榜详情页、歌手详情页、搜索结果、用户中心等等。</p><ol><li>歌单详情页  ： 通过歌单的 ID 来获取歌单中的歌曲数据，然后还做了一些体验上面的交互，比如上滑显示状态栏然后将状态栏标题变为歌单名，具体可以尝试一下就知道了。</li></ol><p>然后就是复用歌曲列表组建来显示歌曲。</p><ol start="2"><li>排行榜详情、歌手详情  ： 和歌单详情基本上没有什么区别，除了 UI 界面方面有细微的改动（根据不同的内容作出不同的优化）。</li><li>搜索功能</li></ol><p>实现功能：搜索歌手、歌单、歌曲、热门搜索、数据节流、上拉刷新、保存搜索记录。</p><p>通过关键字请求 API 获取搜索数据，显示歌手、歌单、歌曲。</p><p>实现了上刷新，因为搜索可以设置请求数据的条数，所以可以用来实现上刷新的功能。</p><p>通过节流函数实现数据节流，通过 localstorage 存储搜索数据。</p><ol start="4"><li>用户中心 ：将在本地存储的数据显示出来，方便用户使用，后期准备添加更多功能。</li></ol><h3 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h3><p>最最最重要的组件，毕竟是个音乐播放器，不能放歌那啥都是扯淡了。</p><p>实现功能：顺序播放、单曲循环、随机播放、收藏等。</p><p>播放、暂停使用 HTML5 的 audio 实现。</p><p>数据、播放状态、播放历史、习惯歌曲等方面使用了 vuex 来进行管理，因为数据太多，组件直接传递的话是会死人的，所以还是老老实实的用 vuex 吧，数据之前的传递真的很方便。</p><p>图标使用 iconfont 阿里巴巴图标库，中间的唱片旋转动画使用了 animation 实现。</p><p>歌词部分获取到网易的歌词数据，然后使用第三方库 lyric-parser 进行处理。实现显示歌词、拖动进度条歌词同步滚动、歌词跟随歌曲进度高亮。</p><p>通过 localstorage 存储喜欢歌曲、播放历史数据。</p><p>audio 标签在移动端不能够自动播放的问题</p><p>电脑端是没有这个问题的，这个问题真的是让我很头大，最后是用了很鬼畜的方法解决了（使用 addEventListener 监听 touchend 事件，然后在回调函数中让 audio 播放一次，具体看 App.vue 文件，注释有写）。</p><h3 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h3><p>显示和管理当前播放歌曲，可以用来删除列表中的歌曲、以及选择播放歌曲。</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>优化排行榜加载速度</li><li>优化重复代码</li><li>增加歌曲评论</li><li>增加 MV、电台 功能</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>创建vue项目过程</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/6Vue/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/6Vue/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/</id>
    <published>2022-09-10T11:00:37.000Z</published>
    <updated>2022-09-10T11:07:24.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="启动运行vue-js项目（维护他人的项目）的方法"><a href="#启动运行vue-js项目（维护他人的项目）的方法" class="headerlink" title="启动运行vue.js项目（维护他人的项目）的方法"></a>启动运行vue.js项目（维护他人的项目）的方法</h2><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所以还需要npm的国内镜像—cnpm<br>在命令行中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>webpack是一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less&#x2F;sass）、图片等都作为模块来使用和处理。 webpack 的核心是 依赖分析,把依赖分析出来了，其他都是细枝末节。</p><h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>vue-cli是vue.js的脚手架，用于自动生成vue.js+webpack的项目模板，这个过程会耗时十几秒，等走完就好；好了，到此整个环境就搭建好了</p><h3 id="cd-x2F-项目名称"><a href="#cd-x2F-项目名称" class="headerlink" title="cd &#x2F;项目名称"></a>cd &#x2F;项目名称</h3><p>下面就是运行项目了，cd &#x2F;项目名称，进入项目。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ShopApp</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>进入项目之后安装依赖，安装成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>注意：在这一步可能会出现这样的错误；因为你打开的是别人的项目，项目之中肯定有 node_modules模块，那么先删除掉，在执行npm install命令</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>一切准备就绪，启动项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="自动启动浏览器就会打开项目了"><a href="#自动启动浏览器就会打开项目了" class="headerlink" title="自动启动浏览器就会打开项目了"></a>自动启动浏览器就会打开项目了</h3><p>在浏览器中输入<a href="http://localhost:8080/#/%EF%BC%9B%E8%BF%9B%E5%85%A5%E9%A1%B9%E7%9B%AE%E9%A6%96%E9%A1%B5">http://localhost:8080/#/；进入项目首页</a></p><p>若是要访问其他页面，直接在#后面加上组件名称即可：例如<a href="http://localhost:8080/#/adjustIntegral">http://localhost:8080/#/adjustIntegral</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拓展内容-自学之路</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/expandContent/%E6%8B%93%E5%B1%95%E5%86%85%E5%AE%B9-%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/expandContent/%E6%8B%93%E5%B1%95%E5%86%85%E5%AE%B9-%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-09-10T10:55:52.000Z</published>
    <updated>2022-09-10T10:57:57.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTTP理论、交互通信原理、服务端http服务器搭建、MIME、报文端口、监听抓包、网络业务模型、代理缓存、cookie session 鉴权认证、安全加密、Token、JWT、oauth、session管理、RESTful接口设计、协商合约、资源标识等原理规则性知识，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WebStorage</title>
    <link href="https://superq314.github.io/2022/09/09/WebStorage/"/>
    <id>https://superq314.github.io/2022/09/09/WebStorage/</id>
    <published>2022-09-09T09:56:20.000Z</published>
    <updated>2022-09-09T10:08:11.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie概述"><a href="#Cookie概述" class="headerlink" title="Cookie概述"></a>Cookie概述</h2><p>Cookie 是一些数据，存储于你电脑上的文本文件中，当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息，Cookie 的作用就是用于解决 “如何记录客户端的用户信息”：</p><p>当用户访问 web 页面时，它的名字可以记录在 cookie 中。<br>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。<br>Cookie 以名&#x2F;值对形式存储，如下所示：<br><code>username=zhangsan</code><br>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中，服务端通过这种方式来获取用户的信息。</p><p>JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 Cookie。</p><h2 id="Cookie创建"><a href="#Cookie创建" class="headerlink" title="Cookie创建"></a>Cookie创建</h2><p>JavaScript 中，创建 cookie 如下所示：<br><code>document.cookie = &quot;username=zhangsan&quot;;</code><br>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除。<br><code>document.cookie = &quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;</code><br>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。<br><code>document.cookie = &quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</code></p><h2 id="Cookie读取"><a href="#Cookie读取" class="headerlink" title="Cookie读取"></a>Cookie读取</h2><p>JavaScript 中，读取 cookie 如下所示：</p><p>document.cookie 将以字符串的方式返回所有的 cookie，类型格式： cookie1&#x3D;value; cookie2&#x3D;value; cookie3&#x3D;value;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f5f050ac3395ad2d8e04a83f52b9f17.png" alt="image-20201023124113003"></p><h2 id="Cookie修改"><a href="#Cookie修改" class="headerlink" title="Cookie修改"></a>Cookie修改</h2><p>JavaScript 中，修改 cookie 如下所示：</p><p>使用 document.cookie 将旧的 cookie 将被覆盖就是修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=lisi&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fe094b63b05824c69ed5147e180b298b.png" alt="image-20201023124645689"></p><h2 id="Cookie删除"><a href="#Cookie删除" class="headerlink" title="Cookie删除"></a>Cookie删除</h2><p>JavaScript 中，删除 cookie 如下所示：</p><p>删除 cookie 非常简单，您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><h2 id="Cookie值设置函数"><a href="#Cookie值设置函数" class="headerlink" title="Cookie值设置函数"></a>Cookie值设置函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Cookie值设置函数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cvalue    cookie值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> exdays    过期天数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">cname, cvalue, exdays</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setTime</span>(d.<span class="title function_">getTime</span>() + (exdays * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">var</span> expires = <span class="string">&quot;expires=&quot;</span> + d.<span class="title function_">toGMTString</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = cname + <span class="string">&quot;=&quot;</span> + cvalue + <span class="string">&quot;; &quot;</span> + expires;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cookie值获取函数"><a href="#Cookie值获取函数" class="headerlink" title="Cookie值获取函数"></a>Cookie值获取函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Cookie值获取函数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">cname</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = cname + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> ca = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ca.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = ca[i].<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span> (c.<span class="title function_">indexOf</span>(name) == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> c.<span class="title function_">substring</span>(name.<span class="property">length</span>, c.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h1><h2 id="WebStorage概述"><a href="#WebStorage概述" class="headerlink" title="WebStorage概述"></a>WebStorage概述</h2><p>WebStorage是HTML5中本地存储的解决方案之一，在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案，浏览器兼容的本地存储方案只有使用Cookie。有同学可能会问，既然有了Cookie本地存储，为什么还要引入WebStorage的概念？那就要说一说Cookie的缺陷了：</p><p>数据大小：作为存储容器，Cookie的大小限制在4KB左右这是非常坑爹的，尤其对于现在复杂的业务逻辑需求，4KB的容量除了存储一些配置字段还简单单值信息，对于绝大部分开发者来说真的不知指望什么了。<br>安全性问题：由于在HTTP请求中的Cookie是明文传递的（HTTPS不是），带来的安全性问题还是很大的。<br>网络负担：我们知道Cookie会被附加在每个HTTP请求中，在HttpRequest和HttpResponse的header中都是要被传输的，所以无形中增加了一些不必要的流量损失。<br>虽然WebStorage是HTML5新增的本地存储解决方案之一，但并不是为了取代Cookie而制定的标准，Cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于实现的客户端状态保持。WebStorage的意图在于解决本来不应该Cookie做，却不得不用Cookie的本地存储的应用场景。</p><h2 id="WebStorage分类"><a href="#WebStorage分类" class="headerlink" title="WebStorage分类"></a>WebStorage分类</h2><p>Web Storage又分为两种： sessionStorage 和localStorage ，即这两个是Storage的一个实例。从字面意思就可以很清楚的看出来，sessionStorage将数据保存在session中，浏览器关闭也就没了；而localStorage则一直将数据保存在客户端本地； 不管是sessionStorage，还是localStorage，使用的API都相同。</p><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理，低版本IE可以使用json2.js</p><h2 id="localStorage方法"><a href="#localStorage方法" class="headerlink" title="localStorage方法"></a>localStorage方法</h2><p>对象介绍：</p><p>localStorage在本地永久性存储数据，除非显式将其删除或清空。</p><p>常见方法：</p><p>保存单个数据：localStorage.setItem(key,value);<br>读取单个数据：localStorage.getItem(key);<br>删除单个数据：localStorage.removeItem(key);<br>删除所有数据：localStorage.clear();<br>获取某个索引的key：localStorage.key(index);<br>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age=&quot;</span> + <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sex=&quot;</span> + <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代localStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="variable language_">localStorage</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + <span class="variable language_">localStorage</span>[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代localStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">localStorage</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="variable language_">localStorage</span>.<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="keyword">var</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>控制台：<br><img src="https://img-blog.csdnimg.cn/img_convert/61686f1b890e4aed66a29ca7b99fb017.png" alt="image-20201023220221557"></p><h2 id="sessionStorage方法"><a href="#sessionStorage方法" class="headerlink" title="sessionStorage方法"></a>sessionStorage方法</h2><p>对象介绍：</p><p>sessionStorage对象存储特定于某个对话的数据，也就是它的生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可以使用（注意：Firefox和Weblit都支持，IE则不行）。</p><p>因为sessionStorage对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在sessionStorage中的数据只能由最初给对象存储数据的页面访问到，所以对多页面应用有限制。</p><p>不同浏览器写入数据方法略有不同。Firefox和Webkit实现了同步写入，所以添加到存储空间中的数据是立刻被提交的。而IE的实现则是异步写入数据，所以在设置数据和将数据实际写入磁盘之间可能有一些延迟。</p><p>常见方法：</p><p>保存单个数据：sessionStorage.setItem(key,value);<br>读取单个数据：sessionStorage.getItem(key);<br>删除单个数据：sessionStorage.removeItem(key);<br>删除所有数据：sessionStorage.clear();<br>获取某个索引的key：sessionStorage.key(index);<br>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age=&quot;</span> + sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sex=&quot;</span> + sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代sessionStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sessionStorage) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + sessionStorage[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代sessionStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sessionStorage.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = sessionStorage.<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="keyword">var</span> value = sessionStorage.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1325a4d3c63e875d47b815eae84a29ac.png" alt="image-20201023220326391"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="https://superq314.github.io/2022/09/09/JSON/"/>
    <id>https://superq314.github.io/2022/09/09/JSON/</id>
    <published>2022-09-09T09:55:43.000Z</published>
    <updated>2022-09-09T10:11:58.954Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JSON概述"><a href="#JSON概述" class="headerlink" title="JSON概述"></a>JSON概述</h2><p>JSON：JavaScript Object Notation（JavaScript 对象标记法），它是一种存储和交换数据的语法。</p><p>当数据在浏览器与服务器之间进行交换时，这些数据只能是文本，JSON 属于文本并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译。</p><h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><p>在json中，每一个数据项，都是由一个键值对（或者说是名值对）组成的，但是键必须是字符串，且由双引号包围，而值必须是以下数据类型之一：</p><ul><li>字符串（在 JSON 中，字符串值必须由双引号编写）</li><li>数字</li><li>对象（JSON 对象）</li><li>数组</li><li>布尔</li><li>null</li></ul><p>JSON 的值不可以是以下数据类型之一：</p><ul><li>函数</li><li>日期</li><li>undefined</li></ul><p>因为 JSON 语法由 JavaScript 对象标记法衍生而来，所以很少需要其它额外的软件来处理 JavaScript 中的 JSON。</p><p>通过 JavaScript，您能够创建对象并向其分配数据，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d3060f7c44592e4b2e269ec2f290155a.png" alt="image-20201023091704109"></p><h2 id="JSON数据类型"><a href="#JSON数据类型" class="headerlink" title="JSON数据类型"></a>JSON数据类型</h2><h3 id="JSON-字符串"><a href="#JSON-字符串" class="headerlink" title="JSON 字符串"></a>JSON 字符串</h3><p>JSON 中的字符串必须用双引号包围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-数字"><a href="#JSON-数字" class="headerlink" title="JSON 数字"></a>JSON 数字</h3><p>JSON 中的数字必须是整数或浮点数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p>JSON 中的值可以是对象，JSON 中作为值的对象必须遵守与 JSON 对象相同的规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;employee&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bill Gates&quot;</span>, </span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, </span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Seattle&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>JSON 中的值可以是数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;employees&quot;</span>: [<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;David&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-布尔"><a href="#JSON-布尔" class="headerlink" title="JSON 布尔"></a>JSON 布尔</h3><p>JSON 中的值可以是 true&#x2F;false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;sale&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-null"><a href="#JSON-null" class="headerlink" title="JSON null"></a>JSON null</h3><p>JSON 中的值可以是 null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;middlename&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON字符串转JS对象"><a href="#JSON字符串转JS对象" class="headerlink" title="JSON字符串转JS对象"></a>JSON字符串转JS对象</h2><p>JSON.parse()：可以将以JSON字符串转换为JS对象，它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/75043196321febfa7ff2044a01c36251.png" alt="image-20201023093124404"></p><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h2 id="JS对象转JSON字符串"><a href="#JS对象转JSON字符串" class="headerlink" title="JS对象转JSON字符串"></a>JS对象转JSON字符串</h2><p>JSON.stringify()：可以将一个JS对象转换为JSON字符串，需要一个js对象作为参数，会返回一个JSON字符串</p><p>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f7dc872335de8f09109ea0c9b9f798b4.png" alt="image-20201023093346336"></p><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="https://superq314.github.io/2022/09/06/frontEnd/3JavaScript/2functionalProgramming/function/%E5%9F%BA%E7%A1%80/"/>
    <id>https://superq314.github.io/2022/09/06/frontEnd/3JavaScript/2functionalProgramming/function/%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-06T13:35:46.000Z</published>
    <updated>2022-09-07T00:44:36.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>underscorejs源码分析</title>
    <link href="https://superq314.github.io/2022/09/05/frontEnd/3JavaScript/2functionalProgramming/function/underscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://superq314.github.io/2022/09/05/frontEnd/3JavaScript/2functionalProgramming/function/underscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-09-05T02:35:51.000Z</published>
    <updated>2022-09-05T06:55:40.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="java的Stream流式编程"><a href="#java的Stream流式编程" class="headerlink" title="java的Stream流式编程"></a>java的Stream流式编程</h2><ul><li>流式处理<br>流是一系列数据项，一次只生成一项。程序可以从输入流中一个一个读取数据项，然后以同样的方式将数据项写入输出流。一个程序的输出流很可能是另一个程序的输入流。</li><li>流的特点<br>元素序列——就像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。集合讲的是数据，流讲的是计算。<br><code>menu.stream().filter(d -&gt; getCalories &gt; 300).map(Dish::getName);</code></li><li>数据处理操作<br>流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作，如filter、map、reduce、find、match、sort等。流操作可以顺序执行，也可并行执行。</li></ul><h2 id="Underscore结构"><a href="#Underscore结构" class="headerlink" title="Underscore结构"></a>Underscore结构</h2><h3 id="作用域包裹"><a href="#作用域包裹" class="headerlink" title="作用域包裹"></a>作用域包裹</h3><p>与其他第三库一样，Underscore 也通过<strong>立即执行函数</strong>来包裹自己的业务逻辑。</p><p>目的</p><ul><li>避免全局污染：所有库的逻辑，库所定义和使用的变量全部被封装到了该函数的作用域中。</li><li>隐私保护：但凡在立即执行函数中声明的函数、变量等，除非是自己想暴露，否则绝无可能在外部获得。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...执行逻辑</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="_对象"></a>_对象</h3><p>underscore 有下划线的意思，所以 underscore 通过一个下划线变量 _ 来标识自身。</p><p>注意：<br>_是一个函数对象，之后所有的 api 都会被挂载到这个到对象上，如 _.each, _.map 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> _)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_</span>(obj);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wrapped</span> = obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="面向对象风格支持"><a href="#面向对象风格支持" class="headerlink" title="面向对象风格支持"></a>面向对象风格支持</h2><h3 id=""><a href="#" class="headerlink" title="_()"></a>_()</h3><p>虽然Underscore推崇函数式编程，但也支持面向对象风格的函数调用，仅需要通过 _() 来包裹对象即可。</p><p>当我们进行如下调用时：<br><code>_([2,3,4])</code><br>会创建一个新的underscore对象（从而能够调用underscore提供的方法），并在this._wrapped中存储传入的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> _)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_</span>(obj);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wrapped</span> = obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="literal">_</span>.mixin = <span class="function"><span class="keyword">function</span> </span>(obj) &#123;</span><br><span class="line">    <span class="literal">_</span>.each(<span class="literal">_</span>.<span class="keyword">function</span>(obj), <span class="function"><span class="keyword">function</span></span>(name) &#123;</span><br><span class="line">        <span class="keyword">var</span> func = <span class="literal">_</span>[name] = obj[name];</span><br><span class="line">        <span class="literal">_</span>.prototype[name] = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">            <span class="keyword">var</span> args = [<span class="built_in">this</span>._wrapped];</span><br><span class="line">            push.apply(args, arguments);</span><br><span class="line">            <span class="keyword">return</span> chain(<span class="built_in">this</span>, func.apply(..., args));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">_</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mixin（混入）模式是增加代码复用度的一个广泛使用的设计模式。<br>_.mixin(obj)：为 underscore 对象混入 obj 具有的功能。</p><h2 id="链接式调用"><a href="#链接式调用" class="headerlink" title="链接式调用"></a>链接式调用</h2><h3 id="链接式调用-1"><a href="#链接式调用-1" class="headerlink" title="链接式调用"></a>链接式调用</h3><ul><li>jQuery链接式调用。<br>  <code>$(&#39;.div&#39;).css(&#39;color&#39;, &#39;red&#39;).show();</code></li><li>想要实现链式调用，通常我们会在支持链式调用的函数中返回对象本身。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">RULES</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">x</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(x);<span class="keyword">return</span> <span class="variable language_">this</span>;&#125;,</span><br><span class="line">    <span class="attr">mult</span>: <span class="keyword">function</span> (<span class="params">y</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(y);<span class="keyword">return</span> <span class="variable language_">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable constant_">RULES</span>.<span class="title function_">add</span>(<span class="number">4</span>).<span class="title function_">mult</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li>但是，这样做并不优雅，这需要我们手动地在函数中添加 return this 语句。更好的做法是我们创建一个通用函数，它能为指定的对象方法增加链式调用机制。</li></ul><h3 id="chain"><a href="#chain" class="headerlink" title="_.chain()"></a>_.chain()</h3><ul><li><em>.chain(obj)：为 underscore 对象的方法增加链式调用能力。</em></li><li>.chain 源码如下:  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.<span class="property">chain</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="title function_">_</span>(obj);</span><br><span class="line">    instance.<span class="property">_chain</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>underscore 还提供了一个帮助函数 result，该函数将会判断方法调用结果，如果该方法的调用者被标识了需要链化，则链化当前的方法执行结果。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chainResult = <span class="keyword">function</span> (<span class="params">instance, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance.<span class="property">_chain</span> ? <span class="title function_">_</span>(obj).<span class="property">chain</span>:obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义404界面</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/</id>
    <published>2022-09-02T13:38:01.277Z</published>
    <updated>2022-09-02T13:41:37.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="找到你中意的404页面"><a href="#找到你中意的404页面" class="headerlink" title="找到你中意的404页面"></a>找到你中意的404页面</h3><p>推荐一款：<a href="https://404.life/">https://404.life</a></p><p>预览保存，如果你看到其他喜欢的页面如何F12扒页面我就不教咯~</p><h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><h4 id="把css和js放在博客下"><a href="#把css和js放在博客下" class="headerlink" title="把css和js放在博客下"></a>把css和js放在博客下</h4><p>我是放在这儿的，你也可以放在github，用jsd加速。</p><p><img src="https://img-blog.csdnimg.cn/20200518185047670.png" alt="在这里插入图片描述"></p><h4 id="新建404-html"><a href="#新建404-html" class="headerlink" title="新建404.html"></a>新建404.html</h4><p>路径是在：<code>博客\source\404.html</code>，它和 <code>_post</code>同级。<br>修改页面内容。（注意css的引用路径）</p><p><img src="https://img-blog.csdnimg.cn/20200518185231776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="设置404跳过渲染：-config-yml"><a href="#设置404跳过渲染：-config-yml" class="headerlink" title="设置404跳过渲染：_config.yml"></a>设置404跳过渲染：_config.yml</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render: ##跳过指定渲染，忽略文章skip_render: <span class="string">&quot;_posts/hello-world.md&quot;</span></span><br><span class="line">  - <span class="number">404.</span>html</span><br></pre></td></tr></table></figure><p>页面效果：</p><p><img src="https://img-blog.csdnimg.cn/20200518185317300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>tips:butterfly主题可以关掉默认的404页面</p><p><img src="https://img-blog.csdnimg.cn/20200518185455559.png" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>友链页面优化</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-02T13:27:46.438Z</published>
    <updated>2022-09-02T13:37:47.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>默认：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113224158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>优化：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113308946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考链接：<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo关于Butterfly的一些小修改</a></p><h3 id="修改-themes-Butterfly-layout-flink-pug渲染样式"><a href="#修改-themes-Butterfly-layout-flink-pug渲染样式" class="headerlink" title="修改 themes\Butterfly\layout\flink.pug渲染样式"></a>修改 <code>themes\Butterfly\layout\flink.pug</code>渲染样式</h3><p>（ctrl+&#x2F;注释掉原来的内容，将下面添加进去：）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># page</span><br><span class="line">  .flink  # article-container</span><br><span class="line">    each i <span class="keyword">in</span> site.data.links</span><br><span class="line">      h2= i.class_name</span><br><span class="line">      .post-cards</span><br><span class="line">        .md-links</span><br><span class="line">          each item <span class="keyword">in</span> i.link_list</span><br><span class="line">            .md-links-item(<span class="built_in">style</span>= item.<span class="built_in">color</span> ? `--primary-<span class="built_in">color</span>:$&#123;item.<span class="built_in">color</span>&#125;;<span class="built_in">border</span>-<span class="built_in">width</span>:$&#123;item.<span class="built_in">width</span>&#125;;<span class="built_in">border</span>-<span class="built_in">style</span>:$&#123;item.<span class="built_in">style</span>&#125;;<span class="built_in">animation</span>: $&#123;item.custom&#125; $&#123;item.<span class="built_in">time</span>&#125; infinite alternate; <span class="built_in">background</span>:$&#123;item.<span class="built_in">background</span>&#125;` : &#x27;<span class="built_in">border</span>-<span class="built_in">width</span>:<span class="number">0px</span>;<span class="built_in">border</span>-<span class="built_in">style</span>:solid;<span class="built_in">animation</span>: link_custom <span class="number">0s</span> infinite alternate;<span class="built_in">background</span>:<span class="number">0</span>&#x27;)</span><br><span class="line">              a.customcolor(href=item.link  <span class="built_in">title</span>=item.name target=<span class="string">&quot;_blank&quot;</span> rel=item.<span class="built_in">remove</span> ? <span class="string">&quot;external nofollow&quot;</span> : <span class="string">&quot;&quot;</span> <span class="built_in">style</span>=item.namecolor ? `--namecolor:$&#123;item.namecolor&#125;` : &#x27;&#x27;)</span><br><span class="line">                <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                  img.lazyload(data-src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name,<span class="built_in">style</span>=item.rotate ? `--primary-rotate:$&#123;item.rotate&#125;;--autotime:$&#123;item.autotime&#125;;` : &#x27;--primary-rotate:<span class="number">0deg</span>&#x27; class=item.autorotate ? `$&#123;item.autorotate&#125;` : &#x27;&#x27;)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                  img(src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name )</span><br><span class="line">                .md-links-<span class="built_in">title</span>= item.name</span><br><span class="line">                .md-links-des= item.descr</span><br><span class="line">    != page.<span class="built_in">content</span></span><br><span class="line">  <span class="keyword">if</span> page.comments !== <span class="literal">false</span></span><br><span class="line">    include includes/comments/index.pug</span><br></pre></td></tr></table></figure><h3 id="添加css样式，外链"><a href="#添加css样式，外链" class="headerlink" title="添加css样式，外链"></a>添加css样式，外链</h3><p>（ctrl+F全局搜索 css: ，并添加外链 ）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>sviptzk<span class="regexp">/HexoStaticFile@master/</span>Hexo<span class="regexp">/css/</span>flink.min.css</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020042311371055.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>在link.yml里写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">姓名</span></span><br><span class="line"><span class="attr">link:</span> <span class="string">地址</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">头像</span></span><br><span class="line"><span class="attr">descr:</span> <span class="string">描述</span></span><br><span class="line"><span class="comment"># 边框大小 默认为0</span></span><br><span class="line"><span class="attr">width:</span> <span class="string">0px</span></span><br><span class="line"><span class="comment"># 边框样式 默认 solid</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">solid</span></span><br><span class="line"><span class="comment"># 边框颜色 默认淡蓝色 #49b1f5</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment"># 自动旋转 可选值 flash（闪现） link_custom（单色呼吸灯） link_custom1（彩色呼吸灯）</span></span><br><span class="line"><span class="attr">custom:</span> <span class="string">link_custom</span></span><br><span class="line"><span class="comment"># 动画时长设定，默认为0</span></span><br><span class="line"><span class="attr">time:</span> <span class="string">4s</span></span><br><span class="line"><span class="comment"># name的颜色</span></span><br><span class="line"><span class="attr">namecolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># descr的颜色</span></span><br><span class="line"><span class="attr">descolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line"><span class="attr">background:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 鼠标悬停旋转角度</span></span><br><span class="line"><span class="attr">rotate:</span> <span class="string">360deg</span></span><br><span class="line"><span class="comment"># 自动旋转 latuo左旋转 rauto右旋转</span></span><br><span class="line"><span class="attr">autorotate:</span> <span class="string">&quot;lauto&quot;</span></span><br><span class="line"><span class="comment"># 旋转的周期（时长）</span></span><br><span class="line"><span class="attr">autotime:</span> <span class="string">0s</span></span><br><span class="line"><span class="comment">#移除此链接的权重 0为否 非0为移除</span></span><br><span class="line"><span class="attr">remove:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>添加天气小部件</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/</id>
    <published>2022-09-02T07:25:23.976Z</published>
    <updated>2022-09-02T13:21:18.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>电脑端<br><img src="https://img-blog.csdnimg.cn/img_convert/7f5f29b374a476be60a5bdc97aa9d0c9.png"><br>手机端<br><img src="https://img-blog.csdnimg.cn/img_convert/30f3b2d2d678c6ea3afede3b51de3552.png"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="申请天气API"><a href="#申请天气API" class="headerlink" title="申请天气API"></a>申请天气API</h3><p>国内天气API有多种，此处推荐和风天气，如果第一次使用和风天气</p><p>首先，在官网注册账号，<a href="https://id.qweather.com/#/register?redirect=https%3A%2F%2Fconsole.qweather.com">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/0ef8012a413fb671007f3df28c642249.png" alt="img"></p><p>申请账号并登录后，到和风天气开发平台创建一个简约插件，<a href="https://widget.qweather.com/create-simple">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/d4133d6ab5b989d8c1298dcf6f129ab2.png" alt="img"></p><p>  配置插件的相关属性，首先，您应该为您的插件取一个名字，内容属性均可以自定义。</p><p>注意：为了确保天气小部件的正常显示，这里选择固定在浏览器中，具体位置后续在调节。<br><img src="https://img-blog.csdnimg.cn/img_convert/fbd29cde597ca0071fe9efa5e78968e4.png" alt="img"></p><p>设置完成后，点击下面的生成代码即可，生成的代码如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;he-plugin-simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable constant_">WIDGET</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;01234&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;10px 10px 10px 10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;0&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;left&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;left&quot;</span>: <span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;top&quot;</span>: <span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;个人key&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加div"><a href="#添加div" class="headerlink" title="添加div"></a>添加div</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\layout\includes\header</code>目录下的 <code>nav.pug</code>文件中添加以下内容。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;he-plugin-simple&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>也可以写成这种形式 <code>#he-plugin-simple</code></p></blockquote><h3 id="添加weather-js"><a href="#添加weather-js" class="headerlink" title="添加weather.js"></a>添加weather.js</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\source\js</code>目录下添加 <code>weather.js</code>文件，并填入以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WIDGET</span> = &#123;</span><br><span class="line">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;01234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span><br><span class="line">    <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;left&quot;</span>: <span class="string">&quot;125&quot;</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;你的key&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inject引入"><a href="#Inject引入" class="headerlink" title="Inject引入"></a>Inject引入</h3><p>在配置文件 <code>_config.butterfly</code>的 <code>inject</code>属性中引入以下代码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/font_3332915_ymmoy7wnkg.css&quot;&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;themes/butterfly/source/css/iconfont.css&quot;&gt;`</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># -`&lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;`&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;60198&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-autoplay=&quot;true&quot; data-listfolded=&quot;true&quot;&gt;` `&lt;/div&gt;`&#x27;</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在终端输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><ul><li>运行博客后，调试<code>left</code>和<code>top</code>属性，使天气小部件显示在合适位置。</li><li>前端调试后，记修改<code>weather.js</code>文件中的<code>left</code>、<code>top</code>属性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>代码性能指标</title>
    <link href="https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/2functionalProgramming/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/2functionalProgramming/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
    <published>2022-09-02T05:49:41.021Z</published>
    <updated>2022-09-05T01:46:35.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h2><p>定义：代码抗击风险的能力</p><p>目的：</p><ul><li>避免和程序无关的因素，导致代码报错</li><li>快速给出问题反馈</li><li>不至于因为非必要性bug，而导致程序执行中断</li></ul><p>做法</p><ul><li>参数做好默认值，做好检测</li><li>程序做好意外情况处理</li></ul><h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><p>定义：代码阅读起来很清楚</p><p>目的</p><ul><li>代码结构清晰</li><li>便于他人阅读</li></ul><p>方法</p><ul><li>优化丑陋结构<ul><li>if-else分支过长&#x3D;&#x3D;&gt; 策略模式、状态</li><li>分支嵌套</li><li>回调地狱 &#x3D;&#x3D;&gt; promise、async</li></ul></li><li>遵循命令规范<ul><li>常量名<strong>全部大写</strong></li><li>类名的<strong>首字母大写</strong></li><li>局部变量名以<strong>下划线开头</strong></li></ul></li><li>及时进行注释</li></ul><h2 id="可复用性"><a href="#可复用性" class="headerlink" title="可复用性"></a>可复用性</h2><p>定义：重复利用</p><p>目的</p><ul><li>无需重复书写</li><li>减少代码量</li></ul><p>做法：</p><ul><li>桥接模式</li><li>享元模式</li><li>函数式编程</li><li>低耦合，高内聚</li></ul><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>定义：</p><p>对于以后的变更，代码无需进行大规模的改动</p><p>做法：</p><ul><li>留出扩展接口</li><li>模块低耦合，高内聚</li><li>良好的模块组织</li><li>良好的扩展方案</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>控制流程</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/1controlFlow/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/1controlFlow/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2022-08-29T13:33:03.422Z</published>
    <updated>2022-09-05T01:41:25.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach"><a href="#for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach" class="headerlink" title="for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach"></a>for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach</h2><ol><li>for()</li><li>for (variable of iterable)</li></ol><blockquote><p>遍历的是：<strong>iterable元素值</strong><br>适用遍历可迭代(数组Array、Map、Set、String、arguments对象、Nodelist对象)。<br>不能遍历对象，因为没有迭代器对象。</p></blockquote><ol start="3"><li>for (variable in object)</li></ol><blockquote><p>遍历的是：<strong>object键名</strong>，其为<strong>字符串型</strong>，不能直接进行几何运算<br>以<strong>任意顺序</strong>遍历一个对象的除Symbol以外的可枚举属性（包括<strong>其原型对象</strong>、<strong>其本身属性值</strong>）。<br>适合遍历<strong>对象</strong></p></blockquote><ol start="4"><li>arr.forEach(function(value, index, oObj) {});</li></ol><blockquote><p>不能遍历对象<br>总结：</p></blockquote><ul><li>for循环：可以中断（return、break）；</li><li>for in ：适用于<strong>纯对象</strong>的遍历，并且只能输出可枚举属性，不能中断（break、return）；</li><li>forEach：适用于<strong>需要知道索引值</strong>的数组遍历，但是不能中断（return、break）；</li><li>for of ：适用于<strong>无需知道索引值</strong>的数组遍历，因为可以中断（return、break）。另外对于其他字符串、类数组、类型数组的迭代，for of也更适用；</li></ul><h2 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h2><p>原理：当有多个表达式（值），左边的表达式的值可以确定结果时，就不再继续运算右边的表达式的值<br>逻辑与&amp;&amp;</p><p>逻辑或||</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>按位与(AND) &amp;<br>按位或(OR) |<br>按位异或(XOR) ^<br>按位非(NOT) ~<br>左移（Left shift）&lt;&lt;<br>有符号右移&gt;&gt;<br>无符号右移&gt;&gt;&gt;</p><h3 id="位运算符在js中的妙用"><a href="#位运算符在js中的妙用" class="headerlink" title="位运算符在js中的妙用"></a>位运算符在js中的妙用</h3><h4 id="1-判断奇偶性——-amp-运算符"><a href="#1-判断奇偶性——-amp-运算符" class="headerlink" title="1. 判断奇偶性——&amp;运算符"></a>1. 判断奇偶性——&amp;运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 偶数 &amp; 1 = 0</span></span><br><span class="line"><span class="comment">// 奇数 &amp; 1 = 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &amp; <span class="number">1</span>)    <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &amp; <span class="number">1</span>)    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符"><a href="#2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符" class="headerlink" title="2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符"></a>2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符</h4><p>相当于使用Math.floor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~ <span class="number">6.83</span>)    <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &lt;&lt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> | <span class="number">0</span>)   <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;不可对负数取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt;&gt; <span class="number">0</span>)   <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="3-值交换-必须是整数-——-运算符"><a href="#3-值交换-必须是整数-——-运算符" class="headerlink" title="3. 值交换(必须是整数)——^运算符"></a>3. 值交换(必须是整数)——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)   <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)   <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">[a, b] = [b, a] <span class="comment">// ES6解构赋值</span></span><br></pre></td></tr></table></figure><h4 id="4-得2的次方——1-lt-lt-num运算符"><a href="#4-得2的次方——1-lt-lt-num运算符" class="headerlink" title="4. 得2的次方——1 &lt;&lt; num运算符"></a>4. 得2的次方——1 &lt;&lt; num运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">// 4, 即 2的2次方</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">10</span> <span class="comment">// 1024, 即 2的10次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是要注意使用场景, 非1的数字，会改变首位的正负</span></span><br><span class="line">a = <span class="number">2e9</span>;   <span class="comment">// 2000000000</span></span><br><span class="line">a &lt;&lt; <span class="number">1</span>;    <span class="comment">// -294967296</span></span><br></pre></td></tr></table></figure><h4 id="5-判断值是否相等——-运算符"><a href="#5-判断值是否相等——-运算符" class="headerlink" title="5. 判断值是否相等——^运算符"></a>5. 判断值是否相等——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a !== <span class="number">1171</span>) &#123;...&#125;;  </span><br><span class="line"><span class="comment">// 等价于 </span></span><br><span class="line"><span class="keyword">if</span> (a ^ <span class="number">1171</span>) &#123;...&#125;;  </span><br></pre></td></tr></table></figure><h4 id="6-n-是-2-的整数幂——n-amp-n-1-x3D-0"><a href="#6-n-是-2-的整数幂——n-amp-n-1-x3D-0" class="headerlink" title="6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0"></a>6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0</h4><h4 id="7-判断数组中某项是否存在——按位取反"><a href="#7-判断数组中某项是否存在——按位取反" class="headerlink" title="7. 判断数组中某项是否存在——按位取反(~)"></a>7. 判断数组中某项是否存在——按位取反(~)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用有且仅有-1取反为0,即~-1 === 0</span></span><br><span class="line"><span class="keyword">if</span>(~arr.<span class="title function_">indexof</span>(item)) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">if</span>(arr.<span class="title function_">indexof</span>(item) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h2><p>基本语法为: expression ? sentence1 : sentence2</p><h2 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter()过滤"></a>filter()过滤</h2><p>filter(item, i, arr)：数组过滤器，参数接收一个函数，数组的每一项经过函数过滤，返回一个符合过滤条件的新数组<br>函数接收三个参数：</p><ul><li>item （当前遍历的数组项）</li><li>i （当前项索引）</li><li>arr （调用filter数组本身）</li></ul><h3 id="1-过滤出数组中大于5的数"><a href="#1-过滤出数组中大于5的数" class="headerlink" title="1.过滤出数组中大于5的数"></a>1.过滤出数组中大于5的数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v&gt;<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr);             <span class="comment">//输出[6,7]</span></span><br></pre></td></tr></table></figure><h3 id="2-通过filter判断数组中是否存在某个值"><a href="#2-通过filter判断数组中是否存在某个值" class="headerlink" title="2.通过filter判断数组中是否存在某个值"></a>2.通过filter判断数组中是否存在某个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v==<span class="number">5</span>).<span class="property">length</span>==<span class="number">0</span>?<span class="string">&quot;不存在&quot;</span>:<span class="string">&quot;存在&quot;</span>)<span class="comment">//输出存在</span></span><br></pre></td></tr></table></figure><h3 id="3-去掉空数组空字符串、undefined、null"><a href="#3-去掉空数组空字符串、undefined、null" class="headerlink" title="3.去掉空数组空字符串、undefined、null"></a>3.去掉空数组空字符串、undefined、null</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;&quot;</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr)<span class="comment">//输出[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><h3 id="利用ES6-Set去重（ES6中最常用）"><a href="#利用ES6-Set去重（ES6中最常用）" class="headerlink" title="利用ES6 Set去重（ES6中最常用）"></a>利用ES6 Set去重（ES6中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><h3 id="利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="利用for嵌套for，然后splice去重（ES5中最常用）"></a>利用for嵌套for，然后splice去重（ES5中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;          </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[j]) &#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><h3 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;    <span class="comment">// includes 检测数组是否有某个值</span></span><br><span class="line">            array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用sort"><a href="#利用sort" class="headerlink" title="利用sort()"></a>利用sort()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]    </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a>利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]  </span></span><br><span class="line"><span class="comment">// 两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="利用hasOwnProperty"><a href="#利用hasOwnProperty" class="headerlink" title="利用hasOwnProperty"></a>利用hasOwnProperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用hasOwnProperty 判断是否存在对象属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// 所有的都去重了</span></span><br></pre></td></tr></table></figure><h3 id="利用filter"><a href="#利用filter" class="headerlink" title="利用filter"></a>利用filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="利用递归去重"><a href="#利用递归去重" class="headerlink" title="利用递归去重"></a>利用递归去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array= arr;</span><br><span class="line">    <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>]) &#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用Map数据结构去重"><a href="#利用Map数据结构去重" class="headerlink" title="利用Map数据结构去重"></a>利用Map数据结构去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">            array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用reduce-includes"><a href="#利用reduce-includes" class="headerlink" title="利用reduce+includes"></a>利用reduce+includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS-面试题</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-08-29T10:52:54.631Z</published>
    <updated>2022-09-12T09:05:39.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="pixels、percent、em、rem、vw-x2F-vh的区别"><a href="#pixels、percent、em、rem、vw-x2F-vh的区别" class="headerlink" title="pixels、percent、em、rem、vw&#x2F;vh的区别"></a>pixels、percent、em、rem、vw&#x2F;vh的区别</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">pixels</button></li><li class="tab"><button type="button" data-href="#super-2">percent</button></li><li class="tab"><button type="button" data-href="#super-3">em</button></li><li class="tab"><button type="button" data-href="#super-4">rem</button></li><li class="tab"><button type="button" data-href="#super-5">vw/vh</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>Pixels，即 px 像素。</p><ul><li>绝对单位。</li><li>相对于显示器屏幕分辨率而言</li><li>如果 px 要换算成物理长度，需要指定精度 DPI。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>percent，即 % 百分比</p><ul><li>相对单位</li><li>基于父级元素的比例放缩</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><ul><li>相对长度单位</li><li>相对于当前对象内文本的字体尺寸</li><li>会继承父级元素的字体大小，因此不是一个固定值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><ul><li>CSS3 新增</li><li>相对单位</li><li>基于 HTML 根标签。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>vw：基于屏幕的百分比宽<br>vh：基于屏幕的百分比高</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="简述同步和异步的区别"><a href="#简述同步和异步的区别" class="headerlink" title="简述同步和异步的区别"></a>简述同步和异步的区别</h3><p>同步是阻塞模式，异步是非阻塞模式。</p><blockquote><p>同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；<br>异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p></blockquote><h3 id="简述一下src与href的区别"><a href="#简述一下src与href的区别" class="headerlink" title="简述一下src与href的区别"></a>简述一下src与href的区别</h3><blockquote><p>href：指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p><p>src：指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。</p></blockquote><h3 id="为什么将js脚本放在底部而不是头部"><a href="#为什么将js脚本放在底部而不是头部" class="headerlink" title="为什么将js脚本放在底部而不是头部?"></a>为什么将js脚本放在底部而不是头部?</h3><p>当浏览器解析到使用src的元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。</p><h3 id="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p><img src="https://img2020.cnblogs.com/blog/1019981/202007/1019981-20200709214305074-1329021472.png" alt="img"></p><p>浏览器的默认行为是把inline元素间的空白字符（空格换行tab）渲染成一个空格，也就是 <code>&lt;li&gt;</code>换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。<br>方法一：既然是因为 <code>&lt;li&gt;</code>换行导致的，那就可以将 <code>&lt;li&gt;</code>代码全部写在一排（但是可读性不高）。<br>方法二：既然是空格占一个字符的宽度，那我们索性就将 <code>&lt;ul&gt;</code>内的字符尺寸直接设为0， ul{font-size:0px;}。<br>方法三：消除ul中的间隔 ul{letter-spacing: -5px;}，恢复li中的间隔 ul li{letter-spacing: normal;}。<br>方法四：使用浮动。</p><h3 id="position跟display、overflow、float这些特性相互叠加后会怎么样？"><a href="#position跟display、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="position跟display、overflow、float这些特性相互叠加后会怎么样？"></a>position跟display、overflow、float这些特性相互叠加后会怎么样？</h3><ul><li>position  &#x3D;&#x3D;&gt;   元素的定位类型</li><li>display   &#x3D;&#x3D;&gt;   元素应该生成的框类型</li><li>float     &#x3D;&#x3D;&gt;   布局方式（定义元素的浮动方向）</li><li>overflow  &#x3D;&#x3D;&gt;   溢出元素内容区的内容的处理方式</li></ul><p>类似于优先级机制：position：absolute&#x2F;fixed优先级最高，有它在时，float不起作用，display值需要调整。</p><p>额外补充：float意味着使用块布局，它在某些情况下会修改 display 值的计算值。</p><h3 id="display-none与visibility-hidden有什么区别"><a href="#display-none与visibility-hidden有什么区别" class="headerlink" title="display: none与visibility: hidden有什么区别"></a>display: none与visibility: hidden有什么区别</h3><h3 id="如何设置一个0-5px宽度的边框线"><a href="#如何设置一个0-5px宽度的边框线" class="headerlink" title="如何设置一个0.5px宽度的边框线"></a>如何设置一个0.5px宽度的边框线</h3><p>实现方法:通过缩小50%的1px的边框来实现<br>①设定目标元素的参考位置<br>②给目标元素添加一个伪元素before或者after，并设置绝对定位<br>③给伪元素添加1px边框<br>④用box-sizing:border-box属性把边框都包进宽和高里面<br>⑤宽和高设置为200%<br>⑥整个盒子模型缩小为0.5<br>⑦调整盒子模型的位置，以左上角为基准: <code>transform-origin: 0 0;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="comment">/* webkit-transform-origin: 0 0; */</span> </span><br><span class="line">    -moz-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容火狐浏览器*/</span> </span><br><span class="line">    -ms-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容ie浏览器*/</span> </span><br><span class="line">    -o-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容0pera浏览器*/</span> </span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">/* -webkit-transform: scale(0.5，0.5); */</span> </span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box; <span class="comment">/*兼容chrome浏览器*/</span> </span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box; </span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何水平居中div-x2F-垂直居中div"><a href="#如何水平居中div-x2F-垂直居中div" class="headerlink" title="如何水平居中div&#x2F;垂直居中div"></a>如何水平居中div&#x2F;垂直居中div</h3><h3 id="header标签中的meta属性的作用-x2F-具体内容"><a href="#header标签中的meta属性的作用-x2F-具体内容" class="headerlink" title="header标签中的meta属性的作用&#x2F;具体内容"></a>header标签中的meta属性的作用&#x2F;具体内容</h3><h3 id="CSS选择器的权重关系"><a href="#CSS选择器的权重关系" class="headerlink" title="CSS选择器的权重关系"></a>CSS选择器的权重关系</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
