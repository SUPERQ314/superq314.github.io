<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>superQ的个人小站</title>
  <icon>https://www.gravatar.com/avatar/53ec4cae8bfa9696385d334042db5c18</icon>
  <subtitle>山海无畏</subtitle>
  <link href="https://superq314.github.io/atom.xml" rel="self"/>
  
  <link href="https://superq314.github.io/"/>
  <updated>2022-10-26T05:45:57.552Z</updated>
  <id>https://superq314.github.io/</id>
  
  <author>
    <name>superQ</name>
    <email>220202090@seu.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端技术学习路线图</title>
    <link href="https://superq314.github.io/posts/8b53a6bb/"/>
    <id>https://superq314.github.io/posts/8b53a6bb/</id>
    <published>2022-10-26T05:42:20.000Z</published>
    <updated>2022-10-26T05:45:57.552Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下 Web 开发人员学习路线图是来自 Github <a href="https://github.com/kamranahmedse/developer-roadmap">developer-roadmap</a> 项目，目前已经有繁体版翻译 <a href="https://github.com/goodjack/developer-roadmap-chinese">developer-roadmap-chinese</a>。</p><p>主要有三个方向，分别为前端开发、后端开发和运维。图片中不同颜色的意义：</p><ul><li><strong>黄色</strong> ：推荐；</li><li><strong>灰色</strong> ：尽可能学习；</li><li><strong>橙色</strong> ：任选其一。</li></ul><p>可以看到，作为 Web 开发者，不管从事什么职位，下面这些技能点是必须掌握的：</p><ul><li>Git，代码版本管理</li><li>SSH；</li><li>HTTP&#x2F;HTTPs 和 API，想要真正成为一名 Web 开发者，对 HTTP 协议的了解是必不可少的；</li><li>基础命令行的使用；</li><li>学会钻研，养成碰到问题，通过自我学习的方式来寻找问题的解决方案，这一点有尤其重要；</li><li>数据结构和算法，相信在通常的大学计算机学科这两门课都是要学习的；</li><li>字符编码；</li><li>Github，Github（包括 Google、Stack Overflow）是 Web 开发者的宝矿，好好利用。</li></ul><p><a href="https://www.runoob.com/wp-content/uploads/2022/05/frontend.png"><img src="https://www.runoob.com/wp-content/uploads/2022/05/frontend.png"></a></p><blockquote><p>英文原始版本：<a href="https://roadmap.sh/frontend">https://roadmap.sh/frontend</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端面试之JS篇（下）</title>
    <link href="https://superq314.github.io/posts/f3a6dee5/"/>
    <id>https://superq314.github.io/posts/f3a6dee5/</id>
    <published>2022-10-25T12:01:54.000Z</published>
    <updated>2022-10-26T06:03:48.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="三元运算基础"><a href="#三元运算基础" class="headerlink" title="三元运算基础"></a>三元运算基础</h2><p>开门见山，三元运算，我想对于很多编程语言都有提到，下面就简单一个例子来讲解一下好了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="number">89</span> &gt; <span class="number">9</span>? (<span class="string">&#x27;89&#x27;</span> &gt; <span class="string">&#x27;9&#x27;</span>? <span class="string">&#x27;通过了&#x27;</span>: <span class="string">&#x27;内层未通过&#x27;</span>) : <span class="string">&#x27;外层未通过&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(str);</span><br></pre></td></tr></table></figure><p>答案是 <code>内层未通过</code>，注意 <code>&#39;89&#39; &gt; &#39;9&#39;</code>的比较，由于都是字符串，会从第一位以 <code>ASCII</code>码来进行比较。由于 <code>89</code>第一位为 <code>8</code>，于是小于 <code>9</code>，返回 <code>false</code>，走后面那个，最后打印了 <code>内层未通过</code>。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Chocolate&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">child</span>: &#123;</span><br><span class="line">    <span class="attr">car</span>: [<span class="string">&#x27;Benz&#x27;</span>, <span class="string">&#x27;Mazda&#x27;</span>],</span><br><span class="line">    <span class="attr">first</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;cc&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">second</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;dd&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">11</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = clone(person1);</span><br><span class="line">person2.child.car.<span class="built_in">push</span>(<span class="string">&#x27;BYD&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(person2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(person1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 浅拷贝 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin, target</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> tar = target || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key in origin) &#123;</span><br><span class="line">    <span class="keyword">if</span> (origin.hasOwnProperty(key)) &#123;</span><br><span class="line">      tar[key] = origin[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案如下：<br><a href="https://img-blog.csdnimg.cn/20200918080401756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200918080401756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a></p><p>从这个例子，我们发现，浅拷贝没办法拷贝引用地址，会污染原对象，深拷贝就不会出现这个问题。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>接下来，我们来探究一下深拷贝。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> person1 = &#123;</span><br><span class="line">  name: &#x27;Chocolate&#x27;,</span><br><span class="line">  age: <span class="number">21</span>,</span><br><span class="line">  child: &#123;</span><br><span class="line">    car: [&#x27;Benz&#x27;, &#x27;Mazda&#x27;],</span><br><span class="line">    <span class="built_in">first</span>: &#123;</span><br><span class="line">      name: &#x27;cc&#x27;,</span><br><span class="line">      age: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">second</span>: &#123;</span><br><span class="line">      name: &#x27;dd&#x27;,</span><br><span class="line">      age: <span class="number">11</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> person2 = deepClone(person1);</span><br><span class="line">person2.child.car.<span class="built_in">push</span>(&#x27;BYD&#x27;);</span><br><span class="line">console.<span class="built_in">log</span>(person2);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(person1);</span><br><span class="line"></span><br><span class="line">function deepClone(<span class="built_in">origin</span>, target) &#123;</span><br><span class="line">  <span class="built_in">var</span> tar = target || &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">var</span> <span class="built_in">key</span> <span class="keyword">in</span> <span class="built_in">origin</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">origin</span>.hasOwnProperty(<span class="built_in">key</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (typeof (<span class="built_in">origin</span>[<span class="built_in">key</span>]) == &#x27;object&#x27; &amp;&amp; <span class="built_in">origin</span>[<span class="built_in">key</span>] !== null) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Object.prototype.toString.call(<span class="built_in">origin</span>[<span class="built_in">key</span>]).slice(<span class="number">8</span>, -<span class="number">1</span>) == &#x27;Array&#x27;) &#123;</span><br><span class="line">          tar[<span class="built_in">key</span>] = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          tar[<span class="built_in">key</span>] = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        deepClone(<span class="built_in">origin</span>[<span class="built_in">key</span>], tar[<span class="built_in">key</span>]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tar[<span class="built_in">key</span>] = <span class="built_in">origin</span>[<span class="built_in">key</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> tar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案如下：</p><p><a href="https://img-blog.csdnimg.cn/20200918081157273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200918081157273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a><br>另外，还有一种关于 <code>JSON</code>的方法来克隆，但一般用的不是特别多，因为对于函数方面没办法进行拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person1));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3);</span><br></pre></td></tr></table></figure><h2 id="真题演练"><a href="#真题演练" class="headerlink" title="真题演练"></a>真题演练</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(foo); </span><br><span class="line">  <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(foo); </span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>答案是 <code>undefined 2 error</code>，不解释了哈。</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> test;</span><br><span class="line">  test();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>答案 <code>1</code>，简单哈。</p><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>前面两道题都是简单热个身，下面我们来一道阿里笔试题，应该对于 <code>this</code>指向最难的题了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">&#x27;111&#x27;</span>,</span><br><span class="line">  say: function()&#123;</span><br><span class="line">    console.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = a.say;</span></span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>; <span class="comment">// </span></span><br><span class="line">a.say(); <span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  name: <span class="string">&#x27;333&#x27;</span>,</span><br><span class="line">  say: function(<span class="function"><span class="keyword">fun</span>)&#123;</span></span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say); <span class="comment">// </span></span><br><span class="line">b.say = a.say; </span><br><span class="line">b.say(); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>答案是 <code>222 111 222 333</code>，详细解释一下，对于第一句 <code>var fun = a.say;</code>，也就相当于把匿名函数赋值给了 <code>fun</code>，详细如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fun</span> = <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">console.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，这里 <code>this</code>，就会指向 <code>window</code>，所以就是 <code>222</code>。</p><p>那么，第二个答案 <code>a.say();</code>必须得是 <code>111</code>，因为我们访问的是对象里面的方法，<code>this</code>当然指向这个对象。</p><p>接下来，对于第三个答案 <code>b.say(a.say);</code>，相当于在 <code>GO</code>中执行该函数，这里其实和第一问类型，都是放在 <code>GO</code>里面执行，因此也是指向 <code>window</code>。</p><p>对于最后一个答案 <code>b.say();</code>，和第二个答案类似，执行对象里面的方法，<code>this</code>当然指向这个对象。</p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>继续，再来一道关于 <code>this</code>指向问题的题目：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> marty = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;marty&#x27;</span>,</span><br><span class="line">    <span class="attr">printName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> test1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> test2 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> test3 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test3&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  test3.printName = marty.printName;</span><br><span class="line">  marty.printName.call(test1); <span class="comment">// </span></span><br><span class="line">  marty.printName.apply(test2); <span class="comment">// </span></span><br><span class="line">  marty.printName(); <span class="comment">// </span></span><br><span class="line">  test3.printName(); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>答案是 <code>test1 test2 marty test3</code>，对于第一个和第二个答案，类似的，通过 <code>call / apply</code>改变了 <code>this</code> 指向问题，对于第三个答案，执行对象里面的方法，<code>this</code>当然指向这个对象。而对于第四个答案，也是执行对象里面的方法，<code>this</code>当然指向这个对象。</p><h3 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h3><p>下面这题是百度一道真题，但是感觉比较水，直接看看会打印什么吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  bar.a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  Object.prototype.b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(bar.a);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(bar.b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()(); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>答案是 <code>a b</code>，函数里面 <code>return</code>出去了一个函数，形成了一个闭包，会一直引用着 <code>test</code>的 <code>AO</code>，所以可以访问 <code>a</code>，而 <code>b</code>访问不到，会去原型链上一直找，最后找到了 <code>b</code>。</p><h3 id="经典题"><a href="#经典题" class="headerlink" title="经典题"></a>经典题</h3><p>下面来一道最经典的题，特别容易出错，<strong>注意！</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> this;</span><br><span class="line">&#125;</span><br><span class="line">Foo.getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.getName(); <span class="comment">// </span></span><br><span class="line">getName(); <span class="comment">// </span></span><br><span class="line">Foo().getName(); <span class="comment">//  </span></span><br><span class="line">getName(); <span class="comment">// </span></span><br><span class="line"><span class="keyword">new</span> Foo.getName(); <span class="comment">// </span></span><br><span class="line"><span class="keyword">new</span> Foo().getName(); <span class="comment">// </span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> Foo().getName(); <span class="comment">//  </span></span><br></pre></td></tr></table></figure><p>答案是 <code>2 4 1 1 2 3 3</code>。详细解释一下：</p><p>第一问，执行 <code>Foo.getName();</code>我们执行的是这段代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Foo.getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为，这里访问的对象的属性，把函数充当了一个特殊对象，我们直接访问它的属性，然后打印 <code>2</code>。</p><p>第二问，执行 <code>getName();</code>在全局 <code>GO</code>里面，是这样的情况，存在 <strong>函数提升</strong> 。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO: &#123;</span><br><span class="line"><span class="attr">getName</span>: <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123; <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>);&#125; -&gt; <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三问，执行 <code>Foo().getName();</code>时，里面有一个变量 <code>getName</code>，没有申明，放到外面，就会给到全局，此时</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO: &#123;</span><br><span class="line"><span class="attr">getName</span>: <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123; <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">5</span>);&#125; -&gt; <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">4</span>);&#125; -&gt; <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是访问 <code>getName</code>又进行了覆盖，打印 <code>1</code>。</p><p>第四问，执行 <code>getName();</code> <code>GO</code>和上一问一样，打印 <code>1</code>。</p><p>第五问，执行 <code>new Foo.getName();</code>这里要牵扯到优先级问题了，<code>.</code> 运算符的优先级要比 <code>new</code>要高。因此，先执行 <code>Foo.getName();</code>（即先执行下面这段代码）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Foo.getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先打印 <code>2</code>，然后 <code>new</code>没有什么意义，等于没写。</p><p>第六问，执行 <code>new Foo().getName();</code>这里又要牵扯到优先级问题了，<code>()</code>运算符的优先级要比 <code>.</code>高。而在执行 <code>()</code>时会带着 <code>new</code>一起执行。然后返回 <code>this</code>，此时我们执行的是 <code>this.getName</code>，发现此时没有 <code>this.getName</code>，然后就会去原型链上找，能找到如下代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Foo.prototype.getName = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是最终结果打印 <code>3</code>。</p><p>第七问，执行 <code>new new Foo().getName();</code>，也是与优先级有关，首先，<code>()</code>运算符的优先级要比 <code>.</code>高，先得到 <code>new this.getName();</code> 然后 <code>.</code> 运算符的优先级要比 <code>new</code>要高，和第六问一样了，访问原型链上的方法，得到 <code>3</code>，最后 <code>new</code>没有什么意义，等于没写。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>先来一些前置知识，后续我们会把数组相关知识好好整理一番。</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建数组 */</span></span><br><span class="line"><span class="keyword">var</span> arr1 = []; <span class="comment">// 通过字面量创建</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 通过系统内置的Array构造函数</span></span><br></pre></td></tr></table></figure><p>所有的数组都继承于 <code>Array.prototype</code>。</p><p>看看下面这个，会输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [, ,];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr);</span><br></pre></td></tr></table></figure><p>答案是 <code>[ &lt;2 empty items&gt; ]</code>，诶，我明明有三个空的，为啥是两个 <code>empty</code>呢？此时，我们打印一下长度看看，发现还是 <code>2</code>。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">length</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>好了，不布置坑了，直接看下面这例子吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [, <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [ &lt;1 empty item&gt;, 1, 3, 5, 7 ]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">length</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>从结果看出来，发现数组内置会有一个截取，最后一个空，它不会算。（注意，只是最后为空的元素不会算）这就叫做<strong>稀疏数组</strong></p><p>那么，我们可以直接造 <code>100</code>个为空的数组吗？而不是一个个赋值为空，当然可以，用构造函数即可：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr) <span class="comment">// [ &lt;100 empty items&gt; ]</span></span><br></pre></td></tr></table></figure><h3 id="在原数组上修改"><a href="#在原数组上修改" class="headerlink" title="在原数组上修改"></a>在原数组上修改</h3><h3 id="push-x2F-unshift"><a href="#push-x2F-unshift" class="headerlink" title="push &#x2F; unshift"></a>push &#x2F; unshift</h3><p>看看会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">push</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>答案是 <code>5</code>，诶，你会不会一位会打印数组，当然不是哈， <code>push / unshift</code>返回值是执行方法以后 <strong>数组的长度</strong> 。</p><p>举个例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">push</span>(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.unshift(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr);</span><br></pre></td></tr></table></figure><p>答案如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="string">[ 0, 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="重写-push-方法"><a href="#重写-push-方法" class="headerlink" title="重写 push 方法"></a>重写 push 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myPush</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myPush</span>(<span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="pop-x2F-shift"><a href="#pop-x2F-shift" class="headerlink" title="pop &#x2F; shift"></a>pop &#x2F; shift</h3><p>它们没有参数，返回值为弹出去的 <code>value</code>值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> tmp = arr.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(tmp); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">var</span> tmp2 = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(tmp2); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="built_in">reverse</span>();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [ 3, 2, 1 ]</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr.splice(开始项的下标，剪切长度，剪切以后最后一位开始添加数据)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">arr.<span class="built_in">splice</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [&#x27;a&#x27;]</span></span><br><span class="line">arr.<span class="built_in">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr) <span class="comment">// [ &#x27;a&#x27;, 2, 3 ]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">-1</span>,<span class="number">-5</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">sort</span>()); <span class="comment">// [ -1, -5, 0, 2, 8 ]</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">console.log(arr.sort()); <span class="regexp">//</span> [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;z&#x27;</span> ]</span><br></pre></td></tr></table></figure><p>好的，在你以为按照升序排列后，我们再来看看下面又会打印什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">27</span>,<span class="number">49</span>,<span class="number">5</span>,<span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr.<span class="built_in">sort</span>());</span><br></pre></td></tr></table></figure><p>答案是 <code>[ 27, 49, 5, 7 ]</code>，发现奇怪的事情，居然不排序了？？？现在来好好解释一下，原来数组是按照 <code>ASCII</code>码来排序的。</p><p>那么，为了自定义排序， <code>sort</code>里面可以传一个回调函数进来。看看下面例子吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  sort 按照ascii码来进行排序</span></span><br><span class="line"><span class="comment">  1、参数a,b</span></span><br><span class="line"><span class="comment">  2、返回值：负值，a 就排在前面</span></span><br><span class="line"><span class="comment">            正值，b 就排在前面</span></span><br><span class="line"><span class="comment">            0， 保持不动</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">27</span>, <span class="number">49</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">arr.<span class="built_in">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [ 5, 7, 27, 49 ]</span></span><br><span class="line">arr.<span class="built_in">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b-a);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [ 49, 27, 7, 5 ]</span></span><br></pre></td></tr></table></figure><p>可以以<strong>冒泡</strong>排序为例，当 <code>a-b</code>返回值为正数的时候，就将 <code>a</code>冒泡上去，然后就是从小到大排序啦。</p><p>总结归纳：</p><p>修改原数组的方法：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">push</span>/<span class="keyword">unshift</span> <span class="keyword">pop</span>/<span class="keyword">shift</span> <span class="keyword">reverse</span> <span class="keyword">splice</span> <span class="keyword">sort</span></span><br></pre></td></tr></table></figure><h3 id="新建数组（不对原数组产生影响）"><a href="#新建数组（不对原数组产生影响）" class="headerlink" title="新建数组（不对原数组产生影响）"></a>新建数组（不对原数组产生影响）</h3><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line">console.log(arr3); // [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span> ]</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.toString();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr1); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>数组切割，有两个可选参数，第一个参数为 <code>start</code>，第二个参数为 <code>end</code>，区间为 <code>[ start, end)</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">var arr1 = arr.slice(<span class="number">1</span>);</span><br><span class="line">console.log(arr1); <span class="regexp">//</span> [ <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span> ]</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr.join();</span><br><span class="line"><span class="keyword">var</span> str2 = arr.toString();</span><br><span class="line"><span class="keyword">var</span> str3 = arr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(str1); <span class="comment">// a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(str2); <span class="comment">// a,b,c,d</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(str3); <span class="comment">// abcd</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> str1 = arr.join(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(str1); <span class="comment">// a-b-c-d</span></span><br><span class="line"><span class="keyword">var</span> arr1 = str1.<span class="built_in">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr1); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27; ]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = str1.<span class="built_in">split</span>(<span class="string">&#x27;-&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr2); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><p>开门见山，看看下面代码会打印什么？</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">test</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(arguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>结果如下，发现会是一个数组形式，但里面有很多东西，但是没有数组方法，因为它并没有继承 <code>Array.prototype</code>。<br><a href="https://img-blog.csdnimg.cn/20200919075711450.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919075711450.png#pic_center"></a></p><p>接下来，我们再来看看下面这个例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>结果如下，发现一个是系统自带的，一个是由我们来生成的，是不一样的！<br><a href="https://img-blog.csdnimg.cn/20200919080911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200919080911782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a></p><p>另外，我们发现 <code>obj</code>也不是数组的形式，那么我们怎么变成数组的形式呢？看看如下操作吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>: <span class="built_in">Array</span>.prototype.<span class="built_in">splice</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>在我们继承数组的 <code>splice</code>的方法后，居然真变成了数组的形式，那么我们可以使用 <code>push</code>方法吗？<br><a href="https://img-blog.csdnimg.cn/20200919081149582.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919081149582.png#pic_center"></a><br>试一试：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>: <span class="built_in">Array</span>.prototype.<span class="built_in">splice</span>,</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>: <span class="built_in">Array</span>.prototype.<span class="built_in">push</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>结果如下，继承数组的 <code>push</code>方法后，真的可以！<br><a href="https://img-blog.csdnimg.cn/20200919081304784.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919081304784.png#pic_center"></a></p><p>既然刚刚是直接对象来继承数组的方法，那么可以直接挂载到 <code>Object</code>上吗？看如下例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line">Object.prototype.<span class="built_in">push</span> = <span class="built_in">Array</span>.prototype.<span class="built_in">push</span>;</span><br><span class="line">Object.prototype.<span class="built_in">splice</span> = <span class="built_in">Array</span>.prototype.<span class="built_in">splice</span>;</span><br><span class="line">obj.<span class="built_in">push</span>(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>答案是可以的，因为大部分对象都继承于 <code>Object</code>嘛。<br><a href="https://img-blog.csdnimg.cn/20200919081513734.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919081513734.png#pic_center"></a></p><h3 id="真题演练-1"><a href="#真题演练-1" class="headerlink" title="真题演练"></a>真题演练</h3><p>看看下面代码会输出什么，一道经典的笔试题：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>: <span class="built_in">Array</span>.prototype.<span class="built_in">splice</span>,</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>: <span class="built_in">Array</span>.prototype.<span class="built_in">push</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">obj.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>答案如下，来解释一下<br><a href="https://img-blog.csdnimg.cn/20200919082033627.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919082033627.png#pic_center"></a><br>其实内部是这样做的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = elem;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">length</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我们执行的时候会这样执行，每次找数组长度处进行赋值。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="number">2</span>] <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">obj[<span class="number">3</span>] <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>最后，我们的 <code>length</code> 加到 <code>4</code>，而前面两个 <strong>补空</strong> 。</p><p>下面我们再来看看一个例题吧，加深巩固。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;张小一&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;张小二&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;张小三&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;age&#x27;</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="string">&#x27;height&#x27;</span>: <span class="number">140</span>,</span><br><span class="line">  <span class="string">&#x27;weight&#x27;</span>: <span class="number">180</span>,</span><br><span class="line">  <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">Object.prototype.<span class="built_in">push</span> = <span class="built_in">Array</span>.prototype.<span class="built_in">push</span>;</span><br><span class="line">Object.prototype.<span class="built_in">splice</span> = <span class="built_in">Array</span>.prototype.<span class="built_in">splice</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(person[<span class="number">1</span>]); <span class="comment">// 张小二</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(person.weight);<span class="comment">// 180</span></span><br></pre></td></tr></table></figure><h3 id="类数组转换成数组"><a href="#类数组转换成数组" class="headerlink" title="类数组转换成数组"></a>类数组转换成数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Array</span>.prototype.<span class="built_in">slice</span>.call(arguments)); <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>结果如下：<br><a href="https://img-blog.csdnimg.cn/20200919091148809.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200919091148809.png#pic_center"></a></p><p>有了转换数组操作后，我们又可以来封装一下 <code>unshift</code>方法了。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="keyword">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">  let argArr = <span class="keyword">Array</span>.prototype.slice.call(arguments);</span><br><span class="line">  let <span class="keyword">new</span><span class="type">Arr</span> = argArr.concat(<span class="built_in">this</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Arr</span>;</span><br><span class="line">&#125;</span><br><span class="line">let <span class="keyword">new</span><span class="type">Arr</span> = arr.myUnshift(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Arr</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39; ]</code></p><h3 id="数组按照元素的字节数排序"><a href="#数组按照元素的字节数排序" class="headerlink" title="数组按照元素的字节数排序"></a>数组按照元素的字节数排序</h3><p><code>unicode</code> 中 <code>0-255</code>为 <code>1</code>个字节，<code>256 - ~</code>为 <code>2</code> 个字节。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数组按照元素的字节数排序 */</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="literal">[&#x27;C<span class="identifier">hocolate</span>&#x27;,&#x27;我爱你&#x27;,&#x27;OK&#x27;,&#x27;杰伦&#x27;]</span>;</span><br><span class="line">arr.sort((a,b)=&gt;get<span class="constructor">Bytes(<span class="params">a</span>)</span>-get<span class="constructor">Bytes(<span class="params">b</span>)</span>);</span><br><span class="line">console.log(arr); <span class="comment">// [ &#x27;OK&#x27;, &#x27;杰伦&#x27;, &#x27;我爱你&#x27;, &#x27;Chocolate&#x27; ]</span></span><br><span class="line"><span class="keyword">function</span> get<span class="constructor">Bytes(<span class="params">str</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">bytes</span> = str.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="built_in">char</span><span class="constructor">CodeAt(<span class="params">i</span>)</span> &gt; <span class="number">255</span>) &#123;</span><br><span class="line">      <span class="built_in">bytes</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return <span class="built_in">bytes</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装-typeof"><a href="#封装-typeof" class="headerlink" title="封装 typeof"></a>封装 typeof</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 封装 typeof */</span></span><br><span class="line"><span class="comment">// 返回值 number string boolean object function </span></span><br><span class="line"><span class="comment">// undefined </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myTypeof</span>(<span class="params">val</span>)&#123;</span><br><span class="line">  let type = <span class="built_in">typeof</span>(val);</span><br><span class="line">  let toStr = Object.prototype.toString;</span><br><span class="line">  <span class="keyword">if</span>(val === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">    let res = toStr.call(val);</span><br><span class="line">    res = res.<span class="built_in">slice</span>(<span class="number">8</span>,<span class="number">-1</span>);</span><br><span class="line">    res = res[<span class="number">0</span>].toLowerCase() + res.substr(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="number">1</span>)); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(&#123;<span class="attr">name</span>: <span class="string">&#x27;chocolate&#x27;</span>&#125;)); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof([])); <span class="comment">// array</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>))); <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="keyword">new</span> String(<span class="number">1</span>))); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>))); <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="literal">null</span>)); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="literal">undefined</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(myTypeof(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)); <span class="comment">// function</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 数组去重 */</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unique</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> tmp = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">this</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tmp.<span class="title function_">hasOwnProperty</span>(<span class="variable language_">this</span>[i]))&#123;</span><br><span class="line">      tmp[<span class="variable language_">this</span>[i]] = <span class="variable language_">this</span>[i];</span><br><span class="line">      newArr.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">unique</span>()); <span class="comment">// [ 0, 1, 2, 3, &#x27;a&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure><h2 id="闭包回顾"><a href="#闭包回顾" class="headerlink" title="闭包回顾"></a>闭包回顾</h2><h3 id="第一题-1"><a href="#第一题-1" class="headerlink" title="第一题"></a>第一题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">c</span> = c;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">f</span> = e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test1.<span class="title function_">f</span>();</span><br><span class="line">test1.<span class="title function_">f</span>();</span><br><span class="line"><span class="keyword">var</span> test2 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">test2.<span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><p>答案是 <code>1 2 1</code>，解释最后一个为什么还是 <code>1</code>，因为后面又实例化了一个新的对象，和之前的对象地址当然不是一个地方了，<code>d</code>的初始值都是 <code>0</code>。</p><h3 id="第二题-1"><a href="#第二题-1" class="headerlink" title="第二题"></a>第二题</h3><p>看看下面代码会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(arguments));</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// </span></span><br></pre></td></tr></table></figure><p>答案是 <code>object</code>，因为 <code>arguments</code>是类数组（类似于数组的对象，即用对象模拟的数组）</p><h3 id="第三题-1"><a href="#第三题-1" class="headerlink" title="第三题"></a>第三题</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(a)); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p>答案是 <code>undefined</code>，函数表达式是忽略函数名的，等于 <code>a</code> 根本没有。相当于 <code>a</code> 没有申明，如果直接打印会直接报错，但是 <code>typeof</code>的话会打印 <code>undefined</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之JS篇（中）</title>
    <link href="https://superq314.github.io/posts/76ff2e07/"/>
    <id>https://superq314.github.io/posts/76ff2e07/</id>
    <published>2022-10-25T12:00:58.000Z</published>
    <updated>2022-10-26T06:03:54.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="对象基础"><a href="#对象基础" class="headerlink" title="对象基础"></a>对象基础</h2><p>对象前置知识</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 对象基础知识 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">176</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">130</span>,</span><br><span class="line">  <span class="attr">teach</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am teaching JS&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">smoke</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am smoking&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am having a dinner&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 查找 */</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(teacher.name);</span><br><span class="line">teacher.teach();</span><br><span class="line">teacher.smoke();</span><br><span class="line">teacher.eat();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加 */</span></span><br><span class="line">teacher.address = <span class="string">&#x27;北京&#x27;</span></span><br><span class="line">teacher.drink = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am drinking beer&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(teacher.address);</span><br><span class="line">teacher.drink();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改 */</span></span><br><span class="line">teacher.teach = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am teaching Vue&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">teacher.teach();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line">delete teacher.address;</span><br><span class="line">delete teacher.teach;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(teacher);</span><br></pre></td></tr></table></figure><h2 id="构造函数基础"><a href="#构造函数基础" class="headerlink" title="构造函数基础"></a>构造函数基础</h2><p>从上文我们可以知道，创建对象的一种方式，通过 <code>&#123;&#125;</code> （即 <strong>对象字面量</strong> ）来创建。下面我们来讲讲采用构造函数方式创建。</p><p>第一种，通过系统自带的构造函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Object();</span><br><span class="line">obj.name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">obj.sex = <span class="string">&#x27;男士&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br></pre></td></tr></table></figure><p>这种方式通过系统自带的<strong>构造函数实例化</strong>出来的，其实是和对象字面量一样，没啥区别。</p><p>对象和构造函数不能混淆，对象是通过实例化构造函数而创建的。这里不知道小伙伴们理不理解，下文会探讨这个问题的。</p><p>第二种，自定义构造函数</p><p>对于自定义构造函数，我们一般采用<strong>大驼峰</strong>命名（单词首字母全大写），里面一个关键词 <code>this</code>，考一考，此时 <code>this</code> 指向谁？指向 <code>Teacher</code>吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 自定义构造函数 采用大驼峰命名*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男士&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">smoke</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;I am smoking&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是 <code>this</code> 根本不存在，因为函数在 <code>GO</code>里面，里面内容根本不会看，如下：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GO</span> = &#123;</span><br><span class="line"><span class="type">Teacher</span>: function()<span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此 <code>this</code>都没有生成，并且 <code>Teacher</code>是构造函数。而如果想要 <code>this</code>存在，就需要实例化，因为上文提到的，<code>this</code>它是指向的 <strong>对象本身</strong> 。因此，需要如下一行代码，进行实例化操作。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="type">Teacher</span>();</span><br></pre></td></tr></table></figure><p>好的，那么我们现在对上述代码进行一丢丢修改，看下面代码会打印什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">  this.name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">  this.sex = <span class="string">&#x27;男士&#x27;</span>;</span><br><span class="line">  this.smoke = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;I am smoking&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> teacher1 = <span class="keyword">new</span> Teacher();</span><br><span class="line"><span class="keyword">var</span> teacher2 = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">teacher1.name = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(teacher1.name);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(teacher2.name);</span><br></pre></td></tr></table></figure><p>答案是 <code>李四 张三</code>。因为通过构造函数 <code>new</code> 出来的两个对象根本不是一个东西，是两个不同的对象，因此更改某一个完全不影响另外一个对象。也就是说构造函数实例化的多个对象相互之间是不影响的。</p><p>下面给出一份封装构造函数的基础代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function Teacher(opt)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = opt.name;</span><br><span class="line">  <span class="keyword">this</span>.sex = opt.sex;</span><br><span class="line">  <span class="keyword">this</span>.weight = opt.weight;</span><br><span class="line">  <span class="keyword">this</span>.course = opt.course;</span><br><span class="line">  <span class="keyword">this</span>.smoke = function()&#123;</span><br><span class="line">    <span class="keyword">this</span>.weight--;</span><br><span class="line">    console.log(<span class="keyword">this</span>.weight);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.eat = function()&#123;</span><br><span class="line">    <span class="keyword">this</span>.weight++;</span><br><span class="line">    console.log(<span class="keyword">this</span>.weight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = new Teacher(&#123;</span><br><span class="line">  name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  sex: <span class="string">&#x27;男士&#x27;</span>,</span><br><span class="line">  weight: <span class="number">130</span>,</span><br><span class="line">  course: <span class="string">&#x27;JS&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> t2 = new Teacher(&#123;</span><br><span class="line">  name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">  sex: <span class="string">&#x27;女士&#x27;</span>,</span><br><span class="line">  weight: <span class="number">90</span>,</span><br><span class="line">  course: <span class="string">&#x27;Vue&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">console.log(t1);</span><br><span class="line">console.log(t2);</span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>主要就是这三种：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span> <span class="keyword">new</span> <span class="built_in">String</span> <span class="keyword">new</span> <span class="built_in">Boolean</span></span><br></pre></td></tr></table></figure><p>举个简单例子，小伙伴们应该就能明白了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> String(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">aa.name = <span class="string">&#x27;aa&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(aa);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bb = aa + <span class="string">&#x27;bcd&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(bb);</span><br></pre></td></tr></table></figure><p>答案是 <code>abc [String: &#39;abc&#39;] abcbcd</code>，包装类参与运算的时候会转换成原始值参与运算。补充： <strong>原始值不会有属性和方法</strong> 。</p><p>再来一道例题吧，下面输出会有结果吗？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a.len = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a.len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(b.<span class="built_in">length</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>undefined 3</code>，这个时候就会有疑惑了，上文不是说原始值不会拥有属性和方法嘛，那 <code>b.length</code>是怎么肥事呢？这就涉及到<strong>包装类</strong>的问题了。</p><p>对于第一个输出，这里解释一下，首先原始值不会有属性和方法，而 <code>js</code>在执行到 <code>a.len = 3</code>的时候，会进行一次包装，即 <code>new Number(3).len = 3;</code> 然而它仅仅只是赋值操作，也没有办法进行保存，赋值完后，执行 <code>delete</code>操作删除，最后当我们访问 <code>a.len</code> 的时候打印 <code>undefined</code>了。总体来说，相当于如下操作：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  <span class="built_in">name</span>: <span class="string">&#x27;Chocolate&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(obj.<span class="built_in">name</span>); <span class="comment">// Chocolate</span></span><br><span class="line">delete obj.<span class="built_in">name</span>;</span><br><span class="line">console.<span class="built_in">log</span>(obj.<span class="built_in">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>以上就是包装类的过程。</p><p>对于第二个输出，也来解释一下。有了上一题分析，我想你们也会想到包装类了，这里是字符串，我们不妨打印一下 <code>new String()</code> 会有怎样的结果：</p><p><a href="https://img-blog.csdnimg.cn/20200916190436347.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200916190436347.png#pic_center"></a></p><p>发现没有，包装类里面有一个 <code>length</code>属性，因此当我们 <code>js</code> 执行时，遇到 <code>b = &#39;abc&#39;</code>，也会进行一层包装，然后将长度存储到 <code>length</code>属性上，因此我们就能访问得到，而上一题我们没办法存储，最后也就被删除掉了。</p><p> <strong>补充知识点</strong> ：</p><p>数组的截断方法：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.<span class="built_in">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(arr); <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p>继续来做一道题，看看会输出什么：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">name</span> = <span class="string">&#x27;Chocolate&#x27;</span>;</span><br><span class="line"><span class="built_in">name</span> += <span class="number">10</span>;</span><br><span class="line">var <span class="built_in">type</span> = <span class="built_in">typeof</span>(<span class="built_in">name</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">type</span>.length === <span class="number">6</span>)&#123;</span><br><span class="line">  <span class="built_in">type</span>.<span class="built_in">text</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">type</span>.<span class="built_in">text</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>undefined</code>，原理和上文代码一致。这里就不详细解释了，不太懂的小伙伴可以往上看看下面这个例子。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a <span class="operator">=</span> <span class="number">123</span><span class="comment">;</span></span><br><span class="line">a.len <span class="operator">=</span> <span class="number">3</span><span class="comment">;</span></span><br><span class="line">console.log(a.len)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>那么，怎么输出 <code>string</code>呢？其实，我们可以自己包装一个就可以了。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">name</span> = <span class="string">&#x27;Chocolate&#x27;</span>;</span><br><span class="line"><span class="built_in">name</span> += <span class="number">10</span>;</span><br><span class="line">var <span class="built_in">type</span> = new String(<span class="built_in">typeof</span>(<span class="built_in">name</span>));  <span class="comment">// 重点在这</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">type</span>.length === <span class="number">6</span>)&#123;</span><br><span class="line">  <span class="built_in">type</span>.<span class="built_in">text</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">type</span>.<span class="built_in">text</span>); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>接着，继续，来一道经典的笔试题，看看下面三个会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = a;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">b</span> = b;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">c</span> = c;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">g</span> = f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="title function_">test</span>();</span><br><span class="line">test1.<span class="title function_">g</span>(); <span class="comment">// </span></span><br><span class="line">test1.<span class="title function_">g</span>(); <span class="comment">// </span></span><br><span class="line"><span class="keyword">var</span> test2 = <span class="keyword">new</span> <span class="title function_">test</span>();</span><br><span class="line">test2.<span class="title function_">g</span>(); <span class="comment">// </span></span><br></pre></td></tr></table></figure><p>答案：<code>2 3 2</code>。解释一下，其实在 <code>test</code>函数最后会有一个默认返回，即 <code>return this</code>。因此也就形成了一个闭包， <code>test</code>函数的 <code>AO</code>也被带出去了，这个和累加器原理一样。然后对于实例化的两个对象，它们互不影响，所以 <code>d</code>都是从 <code>1</code>作为初始值。</p><p>下面来一道综合题，回顾上篇的知识，下面三个函数哪些会打印 <code>1 2 3 4 5</code>呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">foo1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">foo3</span>(<span class="params">x</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>foo1 foo3</code>。这里只解释一下 <code>foo2</code>为啥不能打印，因为对于函数声明后面跟着括号 <code>()</code>，如果没有传参的话，就会报错，传参了，它会返回以逗号分割的最后一个元素。</p><p>继续，又是一个阿里的笔试原题，看看会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">x,y,a</span>)&#123;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>10</code>，因为上篇就有介绍过，对于实参传形参，如果实参和形参有映射关系，那么我们就可以修改实参，否则没办法修改实参。</p><h2 id="原型基础"><a href="#原型基础" class="headerlink" title="原型基础"></a>原型基础</h2><p>原型 <code>prototype</code> 其实是 <code>function</code>对象的一个属性，但是打印出来结果它也是对象。</p><p><a href="https://img-blog.csdnimg.cn/20200916203357739.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200916203357739.png#pic_center"></a><br>那我们直接看下面这个例子吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&#x27;男士&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;Chocolate&#x27;</span>,<span class="number">21</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>); <span class="comment">// Chocolate</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">sex</span>); <span class="comment">// 男士</span></span><br></pre></td></tr></table></figure><p>拓展：<code>prototype</code>是定义构造函数构造出的每个对象的公共祖先，所有被该构造函数构造出的对象都可以继承原型上的属性和方法。</p><p>原型的作用，如上述代码一样，将一些配置项写在构造函数里，对于一些写死的值或者方法，就可以直接挂载到原型上去，可以减少代码冗余。</p><p>知识点补充：</p><p>实例的 <code>__proto__</code>其实就是一个容器，就是为了在对象里面给 <code>prototype</code>设置一个键名。</p><p>来一道简单题吧，会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Math&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>Benz</code>，相当于进行了一次覆盖操作。</p><p>现在，我进行一点点修改，看看又会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Math&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>Benz</code>，实例化一个 <code>car</code>对象，首先 <code>car.name</code>先去找构造函数找对应 <code>name</code> 属性，没有找到，然后就去原型对象上去找，找到对应 <code>name</code>值为 <code>Benz</code>，赋值。继续往下走，发现有对原型对象重定义的操作，但是此时实例对象早就通过原本构造函数 <code>new</code>出来了。（简单来说，就是再定义了一个 <code>prototype</code>，但是没有实例化）</p><p>可能不太好理解上述表达，我们对上述代码修改一丢丢，看看又会打印什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Math&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>Math</code>，因为你此时重新定义了构造函数的 <code>prototype</code>，并且进行了实例化。</p><p>可能你会想到这个例子，这里只是更改了属性，并不是 <strong>重写</strong> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123; &#125;;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Math&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h2 id="原型链基础"><a href="#原型链基础" class="headerlink" title="原型链基础"></a>原型链基础</h2><p>下面我们就要开始讲解原型链相关了，直接看下面这个例子吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Professor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tSkill</span> = <span class="string">&#x27;Java&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Professor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> progessor = <span class="keyword">new</span> <span class="title class_">Professor</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = progessor;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mSkill</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = teacher;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;html&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student);</span><br></pre></td></tr></table></figure><p>原型链就是像如下例子，沿着 <code>__protp__</code>这条线往上找相应的原型的属性值的链条，这就是原型链。<br><a href="https://img-blog.csdnimg.cn/20200917133029232.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917133029232.png#pic_center"></a></p><p>补充，原型本身也有原型，但是原型链不可能一直链接，因此，会有一个顶端。<strong>原型链的顶端</strong>是 <code>Object.prototype</code>。因为 <code>Object</code>也是有原型的。并且 <code>Object.prototype</code>保存了一个 <code>toString()</code>方法。</p><p>继续，我们对上述代码进行一点修改，然后我们修改 <code>student</code>实例对象里面的属性值，看是否 <code>teacher</code>实例对象也会发生变化？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Professor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tSkill</span> = <span class="string">&#x27;Java&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Professor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> progessor = <span class="keyword">new</span> <span class="title class_">Professor</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = progessor;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mSkill</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">success</span> = &#123;</span><br><span class="line">    <span class="attr">alibaba</span>: <span class="string">&#x27;28&#x27;</span>,</span><br><span class="line">    <span class="attr">tencent</span>: <span class="string">&#x27;30&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = teacher;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;html&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.<span class="property">success</span>.<span class="property">baidu</span> = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">student.<span class="property">success</span>.<span class="property">tencent</span> = <span class="string">&#x27;50&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher,student);</span><br></pre></td></tr></table></figure><p>结果：<br><a href="https://img-blog.csdnimg.cn/20200917134826341.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917134826341.png#pic_center"></a></p><p>上述问题明白之后，我们再来看看下面这道题，看看又会有什么变化？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Professor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tSkill</span> = <span class="string">&#x27;Java&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Professor</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> progessor = <span class="keyword">new</span> <span class="title class_">Professor</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = progessor;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mSkill</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">students</span> = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = teacher;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;html&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student.<span class="property">students</span>);</span><br><span class="line">student.<span class="property">students</span>++;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student, teacher);</span><br></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/20200917135155936.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917135155936.png#pic_center"></a><br>从结果我们发现，只有 <code>student</code>实例对象底下的 <code>students</code>变成了 <code>501</code>，而 <code>teacher</code> 实例对象下面的 <code>students</code>没有变化。因为对于原始值而言， <code>student</code>对象底下没有 <code>students</code>这个属性，于是就会创建一个，然后自加。上一题是拿到了引用地址，于是可以修改，这道题意思和如下代码类似：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Chocolate&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.age = <span class="number">21</span>; <span class="comment">// obj没有age属性，于是创建一个。</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj.age); </span><br></pre></td></tr></table></figure><p> <strong>注意</strong> ，一般不推荐按照如上两种方式修改原型对象上的属性值，后文会详细介绍继承的方式，这里只是抛砖引玉。</p><p>继续，看下一题，一道经典的笔试题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&#x27;Mazda&#x27;</span>,</span><br><span class="line">  <span class="attr">intro</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">brand</span> + <span class="string">&#x27;车&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car.<span class="title function_">intro</span>();</span><br></pre></td></tr></table></figure><p>答案是 <code>我是Benz车</code>，首先 <code>new</code>出来一个实例对象，然后访问实例的 <code>intro()</code>方法，发现没找到，于是会沿着原型链往上找，发现存在，然后打印。关键是 <code>this.brand</code>，因为 <code>this</code>会指向这个实例，实例访问的话，会首先访问由对应构造函数实例出来的对象，发现存在，直接打印。</p><h2 id="Object-creat-基础"><a href="#Object-creat-基础" class="headerlink" title="Object.creat()基础"></a>Object.creat()基础</h2><p>之前了解到了 <code>Object</code>，现在我们探讨一下底下的一个方法 <code>create()</code>，它仍然可以创建对象，但是和普通创建对象又不太一样。下面来简单分析一下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Obeject.create(xxx); <span class="regexp">//</span> xxx处可以指定自定义原型或者填写null</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">num</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/20200917152437239.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917152437239.png#pic_center"></a></p><p>打印出来，此时实例原型的 <code>constructor</code>指向这个 <code>Obj()</code>。好的，那我们看看用 <code>new</code>出来的实例对象，有没有什么区别？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">num</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br></pre></td></tr></table></figure><p>看看下面结果，发现其实没啥区别，因为都是根据 <code>Obj</code>的原型创建出来的。<br><a href="https://img-blog.csdnimg.cn/2020091715275519.png#pic_center"><img src="https://img-blog.csdnimg.cn/2020091715275519.png#pic_center"></a><br>继续，看看下面这种情况：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = Object.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj1);</span><br></pre></td></tr></table></figure><p>通过 <code>Object.create(null)</code>创建出来的对象，里面啥也没有，这里也就说明了一个点，虽然原型链的顶端是 <code>Object.prototype</code>，但是这个<strong>特殊的空对象</strong>并没有原型，它不会继承于 <code>Object.prototype</code>，因此，不是所有的对象都继承于 <code>Object.prototype</code>。<br><a href="https://img-blog.csdnimg.cn/20200917153448775.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917153448775.png#pic_center"></a><br> <strong>注意</strong> ，我们没办法自造 <code>__proto__</code>，创建了之后只是相当于属性值一样，实例对象是没有办法调用原型对象上的方法的。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = Object.create(<span class="literal">null</span>);</span><br><span class="line">obj.num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">obj.__proto__ = obj1;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj1);</span><br></pre></td></tr></table></figure><p>看下面这张图，有咩有发现什么不同，对于我们自造的 <code>__proto__</code>颜色更深有没有？<br><a href="https://img-blog.csdnimg.cn/20200917154413755.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917154413755.png#pic_center"></a><br>现在探究一下自己造的 <code>__proto__</code>能不能访问到原型对象上的东西。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = Object.create(<span class="literal">null</span>);</span><br><span class="line">obj.num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">obj.__proto__ = obj1;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(obj.<span class="built_in">count</span>);</span><br></pre></td></tr></table></figure><p>结果是 <code>undefined</code>，显然没有办法访问，也就证明我们没办法自造 <code>__proto__</code>。</p><p>好的，上文都是创建了一些对象，下文我们探讨一下特殊例子，比如 <code>null</code>和 <code>undefined</code>。</p><p>上文有一个结论，我们发现除开空对象外都能继承 <code>Object.prototype</code>，然后访问其中一个方法 <code>toString()</code>，那么 <code>null</code>和 <code>undefined</code>可以吗？我们测试一下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="literal">null</span>.toString()); <span class="comment">// TypeError: Cannot read property &#x27;toString&#x27; of null</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="literal">undefined</span>.toString()); <span class="comment">// TypeError: Cannot read property &#x27;toString&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>那么，为啥下面这个代码会输出 <code>1</code>呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(num.toString()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>在解释之前，我们再来回顾一下知识点：</p><p>原始值是没有属性的，为啥能调用 <code>toString()</code>方法，就是本文目录第三块讲解的<strong>包装类的概念</strong>了。</p><p>它的工作过程如下：</p><p>首先 <code>new Number(1)</code>，然后再调用 <code>toString()</code>方法，因此之前 <code>new</code>了一下成为了对象。为了更加准确，我们打印一下看看。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(num.toString());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="built_in">Number</span>(num);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(num2);</span><br></pre></td></tr></table></figure><p>发现 <code>new</code>了之后，在 <code>__proto__</code>里面确实找到了 <code>toString()</code>方法。</p><p><a href="https://img-blog.csdnimg.cn/20200917155337583.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917155337583.png#pic_center"></a></p><p>回到开头，<code>null</code>和 <code>undefined</code>为啥不可以呢？就是因为上文提过 <code>null</code>和 <code>undefined</code>没办法进行包装。始终为原始值，并且没有原型，也没办法继承。</p><p>下面我们探讨一下隐式转换性和继承相关问题，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(<span class="keyword">null</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">num</span>);</span><br><span class="line"><span class="built_in">document</span>.write(obj);</span><br><span class="line"><span class="built_in">document</span>.write(obj2);</span><br></pre></td></tr></table></figure><p>然后我们发现最后一个打印有了报错： <strong>不能转换为原始值</strong> ，这是因为啊，<code>obj2</code>创建的空对象没有继承 <code>Object.prototype</code>，因此也就没有对应 <code>toString()</code>方法。当然不能转换了。（<code>document.write()</code>方法转换为字符串）<br><a href="https://img-blog.csdnimg.cn/20200917155907103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200917155907103.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a></p><h2 id="call-x2F-apply"><a href="#call-x2F-apply" class="headerlink" title="call &#x2F; apply"></a>call &#x2F; apply</h2><p>面试必备的知识点 <code>call / apply</code>，现在好好探究一下。</p><p>先来热热身，看如下样例：会输出什么？</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span></span>(brand,color)&#123;</span><br><span class="line">  <span class="built_in">this</span>.brand = brand;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Car</span> = &#123;&#125;;</span><br><span class="line">Car.call(<span class="keyword">new</span><span class="type">Car</span>,<span class="string">&#x27;Benz&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Car</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>&#123; brand: &#39;Benz&#39;, color: &#39;red&#39; &#125;</code>，发现没有，这里将 <code>this</code>指向改变了。</p><p>而 <code>apply</code>的使用如下，打印结果和上题一样，也是将 <code>this</code>指向改变了。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span></span>(brand,color)&#123;</span><br><span class="line">  <span class="built_in">this</span>.brand = brand;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Car</span> = &#123;&#125;;</span><br><span class="line">Car.apply(<span class="keyword">new</span><span class="type">Car</span>,[<span class="string">&#x27;Benz&#x27;</span>,<span class="string">&#x27;red&#x27;</span>]);</span><br><span class="line">console.log(<span class="keyword">new</span><span class="type">Car</span>);</span><br></pre></td></tr></table></figure><h2 id="链式调用基础"><a href="#链式调用基础" class="headerlink" title="链式调用基础"></a>链式调用基础</h2><p>给出如下代码，你如何进行修改，让最后一行代码都能执行呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sched = &#123;</span><br><span class="line">  <span class="attr">wakeup</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">work</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wordking&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">end</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Ending&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sched.wakeup().work().end();</span><br></pre></td></tr></table></figure><p>答案如下：</p><p>函数每次返回 <code>this</code>，这种做法类似于 <code>Jquery</code>里面的链式调用。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sched = &#123;</span><br><span class="line">  <span class="attr">wakeup</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Running&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">work</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Wordking&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">end</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;Ending&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> this;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sched.wakeup().work().end();</span><br></pre></td></tr></table></figure><p>继续，看下面代码，补充一个知识点：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myLang = &#123;</span><br><span class="line">  <span class="attr">No1</span>: <span class="string">&#x27;HTML&#x27;</span>,</span><br><span class="line">  <span class="attr">No2</span>: <span class="string">&#x27;CSS&#x27;</span>,</span><br><span class="line">  <span class="attr">No3</span>: <span class="string">&#x27;JS&#x27;</span>,</span><br><span class="line">  <span class="attr">myStudying</span>: <span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(this[<span class="string">&#x27;No&#x27;</span>+num]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myLang.myStudying(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>HTML</code>，显而易见，主要是说明如下知识点，在早起 <code>JS</code>引擎就是这样访问对象属性的，通过 <code>obj[name]</code>中括号形式访问，现在继承了 <code>obj.name</code>的形式，但是最终解释时还是会转换成 <code>obj[name]</code>的形式。</p><h2 id="对象枚举"><a href="#对象枚举" class="headerlink" title="对象枚举"></a>对象枚举</h2><p>开门见山，我们直接来一道题，看看下面两种方式打印有区别吗？还是都可以打印？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">  <span class="attr">brand</span>: <span class="string">&#x27;Benz&#x27;</span>,</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">displacement</span>: <span class="string">&#x27;3.0&#x27;</span>,</span><br><span class="line">  <span class="attr">lang</span>: <span class="string">&#x27;5&#x27;</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="string">&#x27;2.5&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key in car)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(car.key);</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(car[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是 <code>car.key</code>没有办法访问属性值，返回的都是 <code>undefined</code>，而 <code>car[key]</code>可以。因为当我们访问 <code>cay.key</code>时，<code>JS</code>引擎会这样做：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">car.key -&gt; car[<span class="string">&#x27;key&#x27;</span>] -&gt; <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>下面，我们来探究一下 <code>hasOwnProperty</code>这个方法。</p><p>在讲解方法之前，先来看看如下代码，会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">displacement</span> = <span class="string">&#x27;3.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">lang</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">2.5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Object&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;:&#x27;</span> + car[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案如下：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">brand:</span>Benz</span><br><span class="line"><span class="symbol">color:</span>red</span><br><span class="line"><span class="symbol">displacement:</span><span class="number">3.0</span></span><br><span class="line"><span class="symbol">lang:</span><span class="number">5</span></span><br><span class="line"><span class="symbol">width:</span><span class="number">2.5</span></span><br><span class="line"><span class="symbol">name:</span><span class="type">Object</span></span><br></pre></td></tr></table></figure><p>诶，我们发现了一个问题，当我们访问 <code>car</code>实例对象的时候，原型链上所有的属性我们都访问出来了。那么我想要打印自己构造函数里面的属性值而不要原型链上的该怎么做呢？于是就印出来 <code>hasOwnProperty</code>。</p><p>现在修改一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">brand</span> = <span class="string">&#x27;Benz&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">displacement</span> = <span class="string">&#x27;3.0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">lang</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">width</span>: <span class="number">2.5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Object&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> car) &#123;</span><br><span class="line">  <span class="keyword">if</span> (car.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;:&#x27;</span> + car[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时打印结果如下，发现只打印自己构造函数里面的属性值，<strong>没有打印原型链上的</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">brand:</span>Benz</span><br><span class="line"><span class="symbol">color:</span>red</span><br><span class="line"><span class="symbol">displacement:</span><span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>接下来，我们再来探究另外一个重要的东西，<code>instanceof</code>。</p><p>开门见山，还是以例题来热身：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car <span class="keyword">instanceof</span> <span class="title class_">Car</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(car <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span><br></pre></td></tr></table></figure><p>答案是全为 <code>true</code>，解释一下，<code>A instanceof B</code>，就是用来判断 <code>A</code>对象原型里面有没有 <code>B</code>的原型。也就是原型链上重合的都为 <code>true</code>。</p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><p>接下来，又是一个重点，我们探究一下 <code>this</code>指向问题。</p><p>开门见山，我们还是来一道简单题热热身，看看下面会有输出吗？会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">b</span>)&#123;</span><br><span class="line">  this.d = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(d);</span><br></pre></td></tr></table></figure><p>答案是 <code>3</code>，对于函数内部的 <code>this</code>，如果没有进行实例化操作，<code>this</code>会指向 <code>window</code>。外部也可以访问。</p><p>总结归纳一下：</p><ul><li>全局 <code>this</code> 指向 <code>window</code></li><li>预编译函数 <code>this</code> 指向 <code>window</code></li><li><code>apply / call</code> 改变 <code>this</code> 指向</li><li>构造函数的 <code>this</code> 指向实例化的对象</li></ul><p>接下来，介绍一个平常容易忽视但确实用的比较少的知识：<code>callee / caller</code>的区别。</p><p>直接看下面例题，看会打印什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments.callee.<span class="built_in">length</span>);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>答案： <code>3</code>，解释一下，<code>arguments.callee</code>会返回实参列表所对应的函数（即 <code>test</code>），然后执行 <code>test.length</code>（即形参的个数 <code>3</code>）。</p><p>那 <code>callee</code> 还有什么用呢，例如下述代码，在匿名自执行函里面，我们得不到对应函数名，而使用 <code>callee</code>可以用作递归，获取 <code>arguments</code>对应的函数来递归执行。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">sum</span> = (<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n + arguments.callee(n<span class="number">-1</span>);</span><br><span class="line">&#125;)(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">sum</span>); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>下面讲解一下 <code>caller</code>，这个更少见，并且严格模式下还会报错，小伙伴们了解一下即可。</p><p>直接看下面例子，看会打印什么：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test1</span>();</span><br><span class="line">function <span class="built_in">test1</span>()&#123;</span><br><span class="line">  <span class="built_in">test2</span>();</span><br><span class="line">&#125;</span><br><span class="line">function <span class="built_in">test2</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(test2.caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是 <code>[Function: test1]</code>，解释一下， <code>test2.caller</code>结果就是谁执行了 <code>test2</code>，就会打印对应的那个函数。</p><h2 id="真题演练"><a href="#真题演练" class="headerlink" title="真题演练"></a>真题演练</h2><p>不知不觉，又总结了许多知识。下面我们好好练一练真题，巩固一下。</p><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>首先，依旧是热热身，看看会输出什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  bar.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>答案如下：<br><a href="https://img-blog.csdnimg.cn/20200917194307761.png#pic_center"><img src="https://img-blog.csdnimg.cn/20200917194307761.png#pic_center"></a><br>这里就相当于在 <code>foo</code> 函数里面执行了 <code>bar</code>，然后给它传了参数。<code>this</code>指向在 <code>bar</code>函数里面没有使用，传 <code>null</code>值也不影响。</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p><code>JS</code> 中 <code>typeof</code> 可能返回的值有哪些？</p><p>答案如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span> <span class="built_in">string</span> <span class="literal">undefined</span> <span class="built_in">object</span> <span class="keyword">function</span> <span class="built_in">boolean</span> </span><br></pre></td></tr></table></figure><h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>看看下面会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">x,y,a</span>)&#123;</span><br><span class="line">  arguments[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>10</code>，实参和形参映射关系，如果有映射，那么我们可以修改实参。</p><p>那么我们稍微修改一下上述代码，又会是怎样的结果呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">x,y,a</span>)&#123;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">b(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>答案还是 <code>10</code>，与上题思路一样，不作解释了。</p><p>继续，下面这道题之前有出过，再来温习一下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = (</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span> f);</span><br></pre></td></tr></table></figure><p>答案是 <code>function</code>，有没有和我一样以为是 <code>number</code>的小伙伴，还是不能太自信，粗心了。简单解释一下，对于括号表达式里面，以逗号分隔的话，会返回最后一个。</p><p>那么我把上述代码稍作修改一下，又会输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = (</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">g</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">)()</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span> f);</span><br></pre></td></tr></table></figure><p>答案显然是 <code>number</code>，因为执行了，不作过多解释了。</p><h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>下面打印 <code>true</code>的是哪些？（序号以 <code>1</code>开头）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="literal">undefined</span> == <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="literal">undefined</span> === <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;100&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(parseInt(<span class="string">&#x27;1a&#x27;</span>) == <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>答案是 <code>1 4</code>，这里只解释一下 <code>parseInt</code>，它只会去从左到右的数字，一遇到非数就截止了。</p><p>可能这几个隐式转换不算很难，下面再来几个，继续，加油！</p><p>这个又会输出什么呢？</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#123;&#125; <span class="operator">=</span><span class="operator">=</span> &#123;&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>答案是 <code>false</code>，因为引用值对应的是地址，地址不同，肯定不等。怎么让两个空对象相等呢，可以按照如下方式做：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var obj <span class="operator">=</span> &#123;&#125;<span class="comment">;</span></span><br><span class="line">var obj1 <span class="operator">=</span> obj<span class="comment">;</span></span><br><span class="line">console.log(obj <span class="operator">=</span><span class="operator">=</span> obj1)<span class="comment">; // true</span></span><br></pre></td></tr></table></figure><p>看一道输出题吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">  this.a = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">new</span> test();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br></pre></td></tr></table></figure><p>答案是 <code>2 2 3</code>。</p><p>提升一下，最后一题：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(this.a);</span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">test(); </span><br><span class="line"><span class="keyword">new</span> test(); </span><br></pre></td></tr></table></figure><p>答案如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>(); <span class="comment">// 0 5 0</span></span><br><span class="line">new <span class="built_in">test</span>(); <span class="comment">// 0 undefined 0 </span></span><br></pre></td></tr></table></figure><p>简单解释一下，先给出 <code>AO</code> 和 <code>GO</code>吧。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Go</span> = &#123;</span><br><span class="line">  a: undefined -&gt; <span class="number">5</span>,</span><br><span class="line">  test: function()<span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AO</span> = &#123;</span><br><span class="line">  a: undefined -&gt; <span class="number">0</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只解释为啥第二个中间打印 <code>undefined</code>，因为它 <code>new</code> 出来的实例，<code>this</code> 当然指向它，但是 <code>this</code> 上面没有 <code>a</code> 这个属性，所以打印 <code>undefined</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之React篇</title>
    <link href="https://superq314.github.io/posts/7b988332/"/>
    <id>https://superq314.github.io/posts/7b988332/</id>
    <published>2022-10-25T10:29:23.000Z</published>
    <updated>2022-10-26T06:04:04.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="react的生命周期"><a href="#react的生命周期" class="headerlink" title="react的生命周期"></a>react的生命周期</h3><p>生命周期是什么？</p><p>react 实例的生命周期，就是react实例从初始化，更新，到销毁的过程</p><p>react实例生命周期经历三个阶段</p><p>初始化阶段：完成从react组件创建到首次渲染的过程</p><p>更新阶段：当调用setState函数时，会引起组件的重新渲染</p><p>销毁阶段：完成组件的销毁</p><p>三个阶段分别对应的构造函数有</p><p>初始化阶段：</p><p>constructor</p><p>构造函数里，可以做状态的初始化，接收props的传值</p><p>componentWillMount： 在渲染前调用，相当于vue中的beforeMount</p><p>render</p><p>渲染函数，不要在这里修改数据。 vue中也有render函数。</p><p>componentDidMount</p><p>渲染完毕，在第一次渲染后调用。</p><p>运行中阶段（更新）</p><p>当组件的 props 或 state 发生变化时会触发更新（严谨的说，是只要调用了setState（）或者改变了props时）。组件更新的生命周期调用顺序如下：</p><p>shouldComponentUpdate</p><p>是否更新？ 需要返回true或者false。如果是false，那么组件就不会继续更新了。</p><p>componentWillUpdate</p><p>即将更新。</p><p>componentWillReceiveProps(nextProps)： 在组件接收到一个新的 prop (更新后)时被调用。</p><p>这个方法在初始化render时不会被调用。nextProps 是props的新值，而 this.props是旧值。</p><p>render</p><p>不要在这里修改数据</p><p>componentDidUpdate</p><p>在组件完成更新后立即调用。在初始化时不会被调用。 相当于vue中的updated</p><p>销毁阶段（卸载）</p><p>componentWillUnmount()</p><p>即将卸载，可以做一些组件相关的清理工作，例如取消计时器、网络请求等</p><h3 id="为什么虚拟DOM-会提高性能"><a href="#为什么虚拟DOM-会提高性能" class="headerlink" title="为什么虚拟DOM 会提高性能"></a>为什么虚拟DOM 会提高性能</h3><p> 首先，（虚拟DOM是什么） 虚拟DOM就是一个JavaScript对象。通过这个JavaScript对象来描述真实DOM</p><p> 如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">tagName</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">style</span>: <span class="string">&quot;width:200px;height: 100px;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">innerHTML</span>: <span class="string">&quot;我是p&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其次，操作虚拟DOM，就是在操作javascript对象，所以，并不会引起页面的重绘和重排。而操作真实DOM是会引起页面的重绘和重排的。</p><h3 id="React的diff原理"><a href="#React的diff原理" class="headerlink" title="React的diff原理"></a>React的diff原理</h3><p>传统diff算法</p><p>需要遍历整棵树的节点然后进行比较，是一个深度递归的过程，运算复杂度常常是O(n^3)</p><p>react diff的优化策略</p><p>DOM节点跨层级的操作不做优化，因为很少这么做，这是针对的tree层级的策略；</p><p>对于同一个类的组件，会生成相似的树形结构，对于不同类的组件，生成不同的树形结构，这是针对conponent层级的策略；</p><p>对于同一级的子节点，拥有同层唯一的key值，来做删除、插入、移动的操作，这是针对element层级的策略；</p><h3 id="调用setState之后，发生了什么？"><a href="#调用setState之后，发生了什么？" class="headerlink" title="调用setState之后，发生了什么？"></a>调用setState之后，发生了什么？</h3><p>合并state</p><p>把传入setState（）里的参数对象和当前的state进行（属性）合并。 触发调和过程</p><p>（Reconciliation）</p><p>重新渲染组件</p><p>React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面</p><p>React 会自动计算出新的树与老树的节点差异（用diff算法），然后根据差异对界面进行最小化重</p><p>渲染</p><h3 id="state和props的区别"><a href="#state和props的区别" class="headerlink" title="state和props的区别"></a>state和props的区别</h3><p>state是组件的状态，也叫组件内部的数据</p><p>props是组件的属性，也可以认为是外部给组件传入的数据</p><h3 id="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"><a href="#React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？" class="headerlink" title="React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？"></a>React中的setState是同步执行还是异步执行？如果是异步的？怎么拿到执行后的state？</h3><p>setState是异步的。</p><p>如果要拿到修改后的状态，需要使用回调函数的方式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//改变状态后想做一些事情：</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"></span><br><span class="line">  属性名:属性值</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//一般是用于在setState之后做一些操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//this.state == 修改之后的state</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="为什么不能直接用以下办法更新state"><a href="#为什么不能直接用以下办法更新state" class="headerlink" title="为什么不能直接用以下办法更新state"></a>为什么不能直接用以下办法更新state</h3><p>this.state.msg &#x3D; “hello”;</p><p>因为，这样不会引起组件的重新渲染，所以，数据修改后没法 呈现在页面上。</p><p>而调用setState()函数，会引起组件的重新渲染，这样更新的数据就会呈现在页面上。</p><h3 id="React-Class-组件有哪些周期函数？分别有什么作用？"><a href="#React-Class-组件有哪些周期函数？分别有什么作用？" class="headerlink" title="React Class 组件有哪些周期函数？分别有什么作用？"></a>React Class 组件有哪些周期函数？分别有什么作用？</h3><h3 id="React-Class-组件中请求可以在-componentWillMount-中发起吗？为什么？"><a href="#React-Class-组件中请求可以在-componentWillMount-中发起吗？为什么？" class="headerlink" title="React Class 组件中请求可以在 componentWillMount 中发起吗？为什么？"></a>React Class 组件中请求可以在 componentWillMount 中发起吗？为什么？</h3><h3 id="React-Class-组件和-React-Hook-的区别有哪些？"><a href="#React-Class-组件和-React-Hook-的区别有哪些？" class="headerlink" title="React Class 组件和 React Hook 的区别有哪些？"></a>React Class 组件和 React Hook 的区别有哪些？</h3><h3 id="React-中高阶函数和自定义-Hook-的优缺点？"><a href="#React-中高阶函数和自定义-Hook-的优缺点？" class="headerlink" title="React 中高阶函数和自定义 Hook 的优缺点？"></a>React 中高阶函数和自定义 Hook 的优缺点？</h3><h3 id="简要说明-React-Hook-中-useState-和-useEffect-的运行原理？"><a href="#简要说明-React-Hook-中-useState-和-useEffect-的运行原理？" class="headerlink" title="简要说明 React Hook 中 useState 和 useEffect 的运行原理？"></a>简要说明 React Hook 中 useState 和 useEffect 的运行原理？</h3><h3 id="React-如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？"><a href="#React-如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？" class="headerlink" title="React 如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？"></a>React 如何发现重渲染、什么原因容易造成重渲染、如何避免重渲染？</h3><h3 id="React-Hook-中-useEffect-有哪些参数，如何检测数组依赖项的变化？"><a href="#React-Hook-中-useEffect-有哪些参数，如何检测数组依赖项的变化？" class="headerlink" title="React Hook 中 useEffect 有哪些参数，如何检测数组依赖项的变化？"></a>React Hook 中 useEffect 有哪些参数，如何检测数组依赖项的变化？</h3><h3 id="React-的-useEffect-是如何监听数组依赖项的变化的？"><a href="#React-的-useEffect-是如何监听数组依赖项的变化的？" class="headerlink" title="React 的 useEffect 是如何监听数组依赖项的变化的？"></a>React 的 useEffect 是如何监听数组依赖项的变化的？</h3><h3 id="React-Hook-和闭包有什么关联关系？"><a href="#React-Hook-和闭包有什么关联关系？" class="headerlink" title="React Hook 和闭包有什么关联关系？"></a>React Hook 和闭包有什么关联关系？</h3><h3 id="React-中-useState-是如何做数据初始化的？"><a href="#React-中-useState-是如何做数据初始化的？" class="headerlink" title="React 中 useState 是如何做数据初始化的？"></a>React 中 useState 是如何做数据初始化的？</h3><h3 id="列举你常用的-React-性能优化技巧？"><a href="#列举你常用的-React-性能优化技巧？" class="headerlink" title="列举你常用的 React 性能优化技巧？"></a>列举你常用的 React 性能优化技巧？</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之ES6新特性篇</title>
    <link href="https://superq314.github.io/posts/d103d789/"/>
    <id>https://superq314.github.io/posts/d103d789/</id>
    <published>2022-10-25T10:28:11.000Z</published>
    <updated>2022-10-26T06:03:30.331Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>新增块级作用域let定义变量和const定义常量</p><p>变量的解构赋值</p><p>模板字符串 （‘${}’）</p><p>默认参数（key&#x3D;value）</p><p>箭头函数（&#x3D;&gt;）</p><p>扩展运算符（…）</p><p>模块（import&#x2F;export）</p><p>类（class&#x2F;extends）</p><p>Promise</p><p>Proxy</p><p>Symbol</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>React-自学之路</title>
    <link href="https://superq314.github.io/posts/99bc0d07/"/>
    <id>https://superq314.github.io/posts/99bc0d07/</id>
    <published>2022-10-25T08:59:50.000Z</published>
    <updated>2022-10-25T11:47:29.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端面试之Vue篇</title>
    <link href="https://superq314.github.io/posts/8a6e9864/"/>
    <id>https://superq314.github.io/posts/8a6e9864/</id>
    <published>2022-10-25T07:29:29.000Z</published>
    <updated>2022-10-26T06:04:13.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MVVM、MVC-和-MVP-的区别是什么？各自有什么应用场景？"><a href="#MVVM、MVC-和-MVP-的区别是什么？各自有什么应用场景？" class="headerlink" title="MVVM、MVC 和 MVP 的区别是什么？各自有什么应用场景？"></a>MVVM、MVC 和 MVP 的区别是什么？各自有什么应用场景？</h3><p>MVC</p><ul><li>Model(模型)：负责从数据库中取数据</li><li>View(视图)：负责展示数据的地方</li><li>Controller(控制器)：用户交互的地方，例如点击事件</li><li>思想：Controller将Model的数据展示在View上</li></ul><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4636ebbfa25049179c27a6b5ab8bb308~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>MVVM</p><ul><li><p>VM：也就是View-Model，做了两件事达到了数据的双向绑定</p><ul><li>一、将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。</li><li>二、将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li></ul></li><li><p>思想：实现了 View 和 Model 的自动同步，也就是当 Model 的属性改变时，我们不用再自己手动操作 Dom 元素，来改变 View 的显示，而是改变属性后该属性对应 View 层显示会自动改变（对应Vue数据驱动的思想）</p></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aac31b27392b4b0e90ca2f67c64c59c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><p>区别</p><p>整体看来，MVVM 比 MVC 精简很多，不仅简化了业务与界面的依赖，还解决了数据频繁更新的问题，不用再用选择器操作 DOM 元素。因为在 MVVM 中，View 不知道 Model 的存在，Model 和 ViewModel 也观察不到 View，这种低耦合模式提高代码的可重用性</p><h3 id="说说对-SPA-单页面的理解，它的优缺点分别是什么？"><a href="#说说对-SPA-单页面的理解，它的优缺点分别是什么？" class="headerlink" title="说说对 SPA 单页面的理解，它的优缺点分别是什么？"></a>说说对 SPA 单页面的理解，它的优缺点分别是什么？</h3><p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p><p><strong>优点：</strong></p><ul><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，SPA 相对对服务器压力小；</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li></ul><p><strong>缺点：</strong></p><ul><li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li></ul><h3 id="如何理解-Vue-是一个渐进式框架？"><a href="#如何理解-Vue-是一个渐进式框架？" class="headerlink" title="如何理解 Vue 是一个渐进式框架？"></a>如何理解 Vue 是一个渐进式框架？</h3><p>Vue是MVVM框架，但是不是严格符合MVVM，因为MVVM规定Model和View不能直接通信，而Vue的 <code>ref</code>可以做到这点</p><h3 id="vue的两个核⼼点"><a href="#vue的两个核⼼点" class="headerlink" title="vue的两个核⼼点"></a>vue的两个核⼼点</h3><ul><li><strong>数据驱动</strong>：ViewModel，保证数据和视图的⼀致性</li><li><strong>组件系统</strong>：应⽤类UI可以看做全部是由组件树构成的</li></ul><h3 id="Vue的优点？Vue的缺点？"><a href="#Vue的优点？Vue的缺点？" class="headerlink" title="Vue的优点？Vue的缺点？"></a>Vue的优点？Vue的缺点？</h3><p>优点：渐进式，组件化，轻量级，虚拟dom，响应式，单页面路由，数据与视图分开</p><p>缺点：单页面不利于seo，不支持IE8以下，首屏加载时间长</p><h3 id="Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？"><a href="#Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？" class="headerlink" title="Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？"></a>Vue和JQuery的区别在哪？为什么放弃JQuery用Vue？</h3><ul><li>jQuery直接操作DOM，Vue不直接操作DOM，Vue的数据与视图是分开的，Vue只需要操作数据即可</li><li>在操作DOM频繁的场景里，jQuery的操作DOM行为是频繁的，而Vue利用虚拟DOM的技术，大大提高了更新DOM时的性能</li><li>Vue中不倡导直接操作DOM，开发者只需要把大部分精力放在数据层面上</li><li>Vue集成的一些库，大大提高开发效率，比如Vuex，Router等</li></ul><h3 id="Vue和React的异同点？"><a href="#Vue和React的异同点？" class="headerlink" title="Vue和React的异同点？"></a>Vue和React的异同点？</h3><p>相同点：</p><ul><li>使用虚拟dom</li><li>组件化开发</li><li>单向数据流(父子组件之间，不建议子修改父传递的数据)</li><li>支持服务端渲染</li></ul><p>不同点：</p><ul><li>React的JSX，Vue的template</li><li>数据变化，React手动(setState)，Vue自动(初始化已响应式处理，Object.defineProperty)</li><li>React单向绑定，Vue双向绑定</li><li>React的Redux，Vue的Vuex</li></ul><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><h3 id="computed和watch的区别？"><a href="#computed和watch的区别？" class="headerlink" title="computed和watch的区别？"></a>computed和watch的区别？</h3><p>computed：计算属性，依赖其它属性值，并且computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</p><p>watch： 更多的是观察的作用，支持异步，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</p><p>computed应用场景：需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</p><p>watch应用场景：需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><p>*<code>computed</code>是依赖已有的变量来计算一个目标变量，大多数情况都是 <code>多个变量</code>凑在一起计算出 <code>一个变量</code>，并且 <code>computed</code>具有 <code>缓存机制</code>，依赖值不变的情况下其会直接读取缓存进行复用，<code>computed</code>不能进行 <code>异步操作</code></p><p>*<code>watch</code>是监听某一个变量的变化，并执行相应的回调函数，通常是 <code>一个变量</code>的变化决定 <code>多个变量</code>的变化，<code>watch</code>可以进行 <code>异步操作</code></p><ul><li>简单记就是：一般情况下 <code>computed</code>是 <code>多对一</code>，<code>watch</code>是 <code>一对多</code></li></ul><h3 id="computed如何实现传参？"><a href="#computed如何实现传参？" class="headerlink" title="computed如何实现传参？"></a>computed如何实现传参？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;div&gt;&#123;&#123; <span class="title function_">total</span>(<span class="number">3</span>) &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">total</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      returnn * <span class="variable language_">this</span>.<span class="property">num</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch有哪些属性，分别有什么用？"><a href="#watch有哪些属性，分别有什么用？" class="headerlink" title="watch有哪些属性，分别有什么用？"></a>watch有哪些属性，分别有什么用？</h3><p>当我们监听一个基本数据类型时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  value () &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们监听一个引用数据类型时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    handler () &#123; <span class="comment">// 执行回调</span></span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 是否进行深度监听</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span><span class="comment">// 是否初始执行handler函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch的immediate属性有什么用？"><a href="#watch的immediate属性有什么用？" class="headerlink" title="watch的immediate属性有什么用？"></a>watch的immediate属性有什么用？</h3><blockquote><p>比如平时created时要请求一次数据，并且当搜索值改变，也要请求数据，我们会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">searchInputValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getList</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>immediate</code>完全可以这么写，当它为 <code>true</code>时，会初始执行一次</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">searchInputValue</span>:&#123;</span><br><span class="line">    <span class="attr">handler</span>: <span class="string">&#x27;getList&#x27;</span>,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="watch监听一个对象时，如何排除某些属性的监听"><a href="#watch监听一个对象时，如何排除某些属性的监听" class="headerlink" title="watch监听一个对象时，如何排除某些属性的监听"></a>watch监听一个对象时，如何排除某些属性的监听</h3><blockquote><p>下面代码是，params发生改变就重新请求数据，无论是a，b，c，d属性改变</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">      <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">      <span class="attr">d</span>:<span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是如果我只想要a，b改变时重新请求，c，d改变时不重新请求呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">params</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> ![<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>].<span class="title function_">includes</span>(_)) <span class="comment">// 排除对c，d属性的监听</span></span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$watch(<span class="function">(<span class="params">vm</span>) =&gt;</span>vm.<span class="property">params</span>[_], handler, &#123;</span><br><span class="line">        <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">      <span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">      <span class="attr">d</span>:<span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="v-if和v-show的作用和区别"><a href="#v-if和v-show的作用和区别" class="headerlink" title="v-if和v-show的作用和区别"></a>v-if和v-show的作用和区别</h3><ul><li><p><code>v-if</code>：通过控制 <code>dom</code>元素的删除和生成来实现显隐，每一次显隐都会使组件重新跑一遍生命周期，因为显隐决定了组件的生成和销毁</p><blockquote><p>v-if的值为true时，元素才会存在于html页面中。</p></blockquote></li><li><p><code>v-show</code>：通过控制 <code>dom</code>元素的 <code>CSS</code>样式（<code>display</code>）来实现显隐，不会销毁</p><blockquote><p>无论v-show的值为true或者false，元素都会存在于html页面中;</p></blockquote></li><li><p>一般来说，v-if有更高的切换开销，而v-show则有更高的初始渲染开销</p><blockquote><p>因此，如果需要非常频繁地切换，使用v-show比较好，如果在运行时条件不会改变时，用v-if比较好</p></blockquote></li></ul><h3 id="vue常⽤的修饰符"><a href="#vue常⽤的修饰符" class="headerlink" title="vue常⽤的修饰符"></a>vue常⽤的修饰符</h3><ul><li><code>.stop</code>: 等统⼀JavaScript中的 <code>event.stopPropagation()</code>，防⽌事件冒泡</li><li><code>.prevent</code>: 等同于JavaScript中的 <code>event.preventDefault()</code>，防⽌执⾏预设的⾏为(如果事件可取消，则取消该事件，⽽不停⽌事件的进⼀步传播)；</li><li><code>.capture</code>: 与事件冒泡的⽅向相反，事件捕获由外到内</li><li><code>.self</code>: 只会触发⾃⼰范围内的事件，不包含⼦元素；</li><li><code>.once</code>: 只会触发⼀次。<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a1c911988f74cea91da79af3c6049c2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="截屏2021-07-11 下午9.56.53.png"></li></ul><h3 id="Vue的内部指令"><a href="#Vue的内部指令" class="headerlink" title="Vue的内部指令"></a>Vue的内部指令</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d39d348e686b449e8931f5a85802e3c6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="Vue-2-x模板中的指令是如何解析实现的？"><a href="#Vue-2-x模板中的指令是如何解析实现的？" class="headerlink" title="Vue 2.x模板中的指令是如何解析实现的？"></a>Vue 2.x模板中的指令是如何解析实现的？</h3><h3 id="简要说明Vue-2-x的全链路运作机制？"><a href="#简要说明Vue-2-x的全链路运作机制？" class="headerlink" title="简要说明Vue 2.x的全链路运作机制？"></a>简要说明Vue 2.x的全链路运作机制？</h3><h3 id="用过vue的哪些组件？"><a href="#用过vue的哪些组件？" class="headerlink" title="用过vue的哪些组件？"></a>用过vue的哪些组件？</h3><p>1、vue-route</p><p>2、axios</p><p>3、vuex</p><p>4、Element UI</p><p>5、swiper</p><p>6、vue-echarts</p><p>7、vue-video-player</p><p>8、vue-photo-preview等等</p><h3 id="Vue组件如何通信（常见）"><a href="#Vue组件如何通信（常见）" class="headerlink" title="Vue组件如何通信（常见）"></a>Vue组件如何通信（常见）</h3><ul><li>父子组件 props 和 this.$emit</li><li>自定义事件 event.$no event.$off event.$emit</li><li>vuex</li></ul><h3 id="描述组件渲染和更新的过程"><a href="#描述组件渲染和更新的过程" class="headerlink" title="描述组件渲染和更新的过程"></a>描述组件渲染和更新的过程</h3><p><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666706013162.png" alt="1666706013162"><br>如上图所示，vue原理三大模块：响应式、模板渲染、vdom</p><ol><li>初次渲染过程</li></ol><ul><li>解析模板为 render 函数 （或在开发环境已完成，vue-loader）</li><li>触发响应式，监听 data 属性 getter、 setter</li><li>执行 render 函数，生成 vnode ，patch(elem,vnode)</li></ul><ol start="2"><li>更新过程</li></ol><ul><li>修改 data，触发 setter（此前在 getter 中已被监听）</li><li>重新执行 render 函数，生成 newVnode<br>patch(vnode,newVnode)</li></ul><ol start="3"><li>with 语法<br><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666706066246.png" alt="1666706066246"></li></ol><ul><li>改变 <code>&#123; &#125;</code> 内自由变量的查找规则，当做 obj 属性来查找</li><li>如果找不到匹配的 obj 属性，就会报错</li><li>with 要慎用，它打破了作用域规则，易读性变差</li></ul><h3 id="相同的路由组件如何重新渲染？"><a href="#相同的路由组件如何重新渲染？" class="headerlink" title="相同的路由组件如何重新渲染？"></a>相同的路由组件如何重新渲染？</h3><blockquote><p>开发人员经常遇到的情况是，多个路由解析为同一个Vue组件。问题是，Vue出于性能原因，默认情况下共享组件将不会重新渲染，如果你尝试在使用相同组件的路由之间进行切换，则不会发生任何变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">constroutes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/a&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">MyComponent</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&quot;/b&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">MyComponent</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>如果依然想重新渲染，怎么办呢？可以使用 <code>key</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml">&lt;router-view:key=&quot;$route.path&quot;&gt;<span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="vue为何是异步渲染"><a href="#vue为何是异步渲染" class="headerlink" title="vue为何是异步渲染"></a>vue为何是异步渲染</h3><ul><li>减少DOM操作次数，提高性能</li></ul><blockquote><p>$nextTick 待 DOM 渲染完后再回调，页面渲染时会将 data 的修改做整合，多次 data 修改只会渲染一次。</p></blockquote><p><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666706768835.png" alt="1666706768835"></p><h3 id="组件之间如何传值"><a href="#组件之间如何传值" class="headerlink" title="组件之间如何传值"></a>组件之间如何传值</h3><ul><li>Vue父子 组件之间传值<ul><li>子组件通过 <code>props</code>来接受数据</li><li>子组件通过 <code>$emit</code>来触发父组件的自定义事件（即传值）</li></ul></li><li>组件中可以使用 <code>$parent</code>和 <code>$children</code>获取到父组件实例和子组件实例，进而获取数据</li><li>使用 <code>$attrs</code>和 <code>$listeners</code>，在对一些组件进行二次封装时可以方便传值，例如A-&gt;B-&gt;C</li><li>使用 <code>$refs</code>获取组件实例，进而获取数据</li><li>使用 <code>Vuex</code>进行状态管理</li><li>使用 <code>eventBus</code>进行跨组件触发事件，进而传递数据</li><li>使用 <code>provide</code>和 <code>inject</code>，官方建议我们不要用这个，我在看 <code>ElementUI</code>源码时发现大量使用</li><li>使用浏览器本地缓存，例如 <code>localStorage</code></li></ul><h3 id="路由之间如何传参"><a href="#路由之间如何传参" class="headerlink" title="路由之间如何传参"></a>路由之间如何传参</h3><ul><li>通过 <code>router-link</code>路由导航跳转传递<br><code>&lt;router-link to=</code>&#x2F;a&#x2F;${id}<code>&gt;routerlink传参&lt;/router-link&gt;</code></li><li>跳转时使用push方法拼接携带参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">`/getlist/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过路由属性中的name来确定匹配的路由，通过params来传递参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;Getlist&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>:id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用path来匹配路由，然后通过query来传递参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/getlist&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>:id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意：query有点像ajax中的get请求，而params像post请求。</p></blockquote><p>params在地址栏中不显示参数，刷新页面，参数丢失,</p><p>其余方法在地址栏中显示传递的参数，刷新页面，参数不丢失。</p><h3 id="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"><a href="#vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）" class="headerlink" title="vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）"></a>vue中父子组件传值，父组件异步请求，子组件不能实时更新怎么解决？（vue中数据不能实时更新怎么解决？）</h3><p>首先了解父子组件生命周期执行顺序</p><p>加载渲染数据过程</p><p>父组件 beforeCreate</p><p>父组件 created</p><p>父组件 beforeMount</p><p>子组件 beforeCreate</p><p>子组件 created</p><p>子组件 beforeMount</p><p>子组件 mounted</p><p>父组件 mounted</p><p>原因：因为生命周期只会执行一次，数据是要等到异步请求以后才能拿到，那么子组件的mounted钩子执行的时候，还没有拿到父组件传递过来的数据，但是又必须要打印出来结果，那这样的话，就只能去打印props中的默认值空字符串了，所以打印的结果是一个空字符串。</p><p>解决办法：</p><p>1、使用v-if控制组件渲染的时机</p><p>初始还没拿到后端接口的异步数据的时候，不让组件渲染，等拿到的时候再去渲染组件。使用v-if&#x3D;”变量”去控制，初始让这个变量为false，这样的话，子组件就不会去渲染，等拿到数据的时候，再让这个变量变成true，</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">isTrue</span>:<span class="literal">false</span><span class="comment">// 初始为false</span></span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">monted</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$post</span>.<span class="property">a</span>.<span class="property">b</span>.<span class="property">c</span>.<span class="title function_">getData</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">result</span>)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">isTrue</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用watch监听数据的变化</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">tableData</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">default</span>: [],</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">tableData</span>(<span class="params">val</span>)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、使用VueX</p><h3 id="如果子组件改变props里的数据会发生什么"><a href="#如果子组件改变props里的数据会发生什么" class="headerlink" title="如果子组件改变props里的数据会发生什么"></a>如果子组件改变props里的数据会发生什么</h3><ul><li>改变的props数据是基本类型</li></ul><blockquote><p>如果修改的是基本类型，则会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">999</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/047859eda3bf47a5930dd0b28e842017~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="0458e2ff1538ee85d42953cec9a94ca.png"></p><ul><li>改变的props数据是引用类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">item</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 不报错，并且父级数据会跟着变</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span>.<span class="property">name</span> = <span class="string">&#x27;sanxin&#x27;</span>;</span><br><span class="line">  <span class="comment">// 会报错，跟基础类型报错一样</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">item</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何将组件所有props传递给子组件"><a href="#如何将组件所有props传递给子组件" class="headerlink" title="如何将组件所有props传递给子组件"></a>如何将组件所有props传递给子组件</h3><p><code>$pros</code><br>用法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;User <span class="attribute">v-bind</span>=<span class="string">&quot;<span class="variable">$props</span>&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue里实现跨组件通信的方式有哪些？"><a href="#Vue里实现跨组件通信的方式有哪些？" class="headerlink" title="Vue里实现跨组件通信的方式有哪些？"></a>Vue里实现跨组件通信的方式有哪些？</h3><h3 id="自定义v-model"><a href="#自定义v-model" class="headerlink" title="自定义v-model"></a>自定义v-model</h3><blockquote><p>默认情况下，v-model 是 @input 事件侦听器和 :value 属性上的语法糖。但是，你可以在你的Vue组件中指定一个模型属性来定义使用什么事件和value属性——非常棒！</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="attr">default</span>: &#123;</span><br><span class="line">  <span class="attr">model</span>: &#123;</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span>,  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h3><p>通过数据劫持结合发布—订阅模式，通过Object.defineProperty()为各个属性定义get、set方法，在数据发生改变时给订阅者发布消息，触发相应的事件回调。</p><h3 id="Vue响应式是怎么实现的？"><a href="#Vue响应式是怎么实现的？" class="headerlink" title="Vue响应式是怎么实现的？"></a>Vue响应式是怎么实现的？</h3><p>整体思路：数据劫持+观察者模式<br>对象内部通过 <code> defineReactive</code> 方法，使用 <code>Object.defineProperty</code> 将属性进行劫持（只会劫持已经存在的属性），数组则是通过重写数组方法来实现。当页面使用对应属性时，每个属性都拥有自己的 <code>dep</code>属性，存放他所依赖的 <code> watcher</code>（依赖收集），当属性变化后会通知自己对应的 <code> watcher</code> 去更新(派发更新)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; arrayMethods &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./array&#x27;</span>)</span><br><span class="line"></span><br><span class="line">classObserver &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>:<span class="variable language_">this</span>,</span><br><span class="line">      <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">configurable</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">      value.<span class="property">__proto__</span> = arrayMethods</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    letkeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line">    <span class="keyword">for</span>(leti = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      constkey = keys[i]</span><br><span class="line">      constvalue = data[key]</span><br><span class="line">      <span class="title function_">defineReactive</span>(data, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observeArray</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">observe</span>(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">functiondefineReactive</span>(data, key, value) &#123;</span><br><span class="line">  constchildOb = <span class="title function_">observe</span>(value)</span><br><span class="line">  constdep = <span class="title function_">newDep</span>()</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;获取值&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      returnvalue</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === value) <span class="keyword">return</span></span><br><span class="line">      <span class="title function_">observe</span>(newVal)</span><br><span class="line">      value = newVal</span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">functionobserve</span>(value) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value) === <span class="string">&#x27;[object Object]&#x27;</span> || <span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">    <span class="title function_">returnnewObserver</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">functiondependArray</span>(value) &#123;</span><br><span class="line">  <span class="keyword">for</span>(lete, i = <span class="number">0</span>, l = value.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    e = value[i]</span><br><span class="line">    e &amp;&amp; e.<span class="property">__ob__</span> &amp;&amp; e.<span class="property">__ob__</span>.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(e)) &#123;</span><br><span class="line">      <span class="title function_">dependArray</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array.js</span></span><br><span class="line">constarrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">constarrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto)</span><br><span class="line">constmethodsToPatch = [</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;reverse&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sort&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="function"><span class="params">method</span>=&gt;</span> &#123;</span><br><span class="line">  arrayMethods[method] = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    constresult = arrayProto[method].<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    constob = <span class="variable language_">this</span>.<span class="property">__ob__</span></span><br><span class="line">    varinserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span><span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span><span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span><span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">        inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.<span class="title function_">observeArray</span>(inserted)</span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">    returnresult</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为什么只对对象劫持，而要对数组进行方法重写？"><a href="#为什么只对对象劫持，而要对数组进行方法重写？" class="headerlink" title="为什么只对对象劫持，而要对数组进行方法重写？"></a>为什么只对对象劫持，而要对数组进行方法重写？</h3><p>因为对象最多也就几十个属性，拦截起来数量不多，但是数组可能会有几百几千项，拦截起来非常耗性能，所以直接重写数组原型上的方法，是比较节省性能的方案</p><h3 id="不需要响应式的数据应该怎么处理？"><a href="#不需要响应式的数据应该怎么处理？" class="headerlink" title="不需要响应式的数据应该怎么处理？"></a>不需要响应式的数据应该怎么处理？</h3><p>在我们的Vue开发中，会有一些数据，从始至终都 <code>未曾改变过</code>，这种 <code>死数据</code>，既然 <code>不改变</code>，那也就 <code>不需要对他做响应式处理</code>了，不然只会做一些无用功消耗性能，比如一些写死的下拉框，写死的表格数据，这些数据量大的 <code>死数据</code>，如果都进行响应式处理，那会消耗大量性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：将数据定义在data之外</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list1</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list2</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list3</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list4</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">list5</span> = &#123; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：Object.freeze()</span></span><br><span class="line">data () &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">list1</span>:<span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; xxxxxxxxxxxxxxxxxxxxxxxx &#125;),</span><br><span class="line">    <span class="attr">list2</span>:<span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; xxxxxxxxxxxxxxxxxxxxxxxx &#125;),</span><br><span class="line">    <span class="attr">list3</span>:<span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; xxxxxxxxxxxxxxxxxxxxxxxx &#125;),</span><br><span class="line">    <span class="attr">list4</span>:<span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; xxxxxxxxxxxxxxxxxxxxxxxx &#125;),</span><br><span class="line">    <span class="attr">list5</span>:<span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123; xxxxxxxxxxxxxxxxxxxxxxxx &#125;),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么使用虚拟DOM-常问"><a href="#为什么使用虚拟DOM-常问" class="headerlink" title="为什么使用虚拟DOM(常问)"></a>为什么使用虚拟DOM(常问)</h3><p>创建真实DOM的代价高：真实的 DOM 节点 node 实现的属性很多，而 vnode 仅仅实现一些必要的属性，相比起来，创建一个 vnode 的成本比较低。</p><p>触发多次浏览器重绘及回流：使用 vnode ，相当于加了一个缓冲，让一次数据变动所带来的所有 node 变化，先在 vnode 中进行修改，然后 diff 之后对所有产生差异的节点集中一次对 DOM tree 进行修改，以减少浏览器的重绘及回流。</p><p>虚拟dom由于本质是一个js对象，因此天生具备跨平台的能力，可以实现在不同平台的准确显示。</p><p>Virtual DOM 在性能上的收益并不是最主要的，更重要的是它使得 Vue 具备了现代框架应有的高级特性。</p><h3 id="请用vnode描述一个DOM结构"><a href="#请用vnode描述一个DOM结构" class="headerlink" title="请用vnode描述一个DOM结构"></a>请用vnode描述一个DOM结构</h3><p>场景：<br><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666708100702.png" alt="1666708100702"><br>vnode:<br><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666708108586.png" alt="1666708108586"></p><h3 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">letcallbacks = []; <span class="comment">//回调函数</span></span><br><span class="line">letpending = <span class="literal">false</span>;</span><br><span class="line"><span class="title function_">functionflushCallbacks</span>() &#123;</span><br><span class="line">  pending = <span class="literal">false</span>; <span class="comment">//把标志还原为false</span></span><br><span class="line">  <span class="comment">// 依次执行回调</span></span><br><span class="line">  <span class="keyword">for</span> (leti = <span class="number">0</span>; i &lt; callbacks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    callbacks[i]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">lettimerFunc; <span class="comment">//先采用微任务并按照优先级优雅降级的方式实现异步刷新</span></span><br><span class="line"><span class="keyword">if</span> (typeofPromise !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果支持promise</span></span><br><span class="line">  constp = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeofMutationObserver !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// MutationObserver 主要是监听dom变化 也是一个异步方法</span></span><br><span class="line">  letcounter = <span class="number">1</span>;</span><br><span class="line">  constobserver = <span class="title function_">newMutationObserver</span>(flushCallbacks);</span><br><span class="line">  consttextNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>:<span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeofsetImmediate !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果前面都不支持 判断setImmediate</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 最后降级采用setTimeout</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  callbacks.<span class="title function_">push</span>(cb);</span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">timerFunc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nextTick的用处"><a href="#nextTick的用处" class="headerlink" title="nextTick的用处"></a>nextTick的用处</h3><p>我举个例子，在vue中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">gender</span> = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><p>我们修改了三个变量，那问题来了，是每修改一次，DOM就更新一次吗？不是的，Vue采用的是 <code>异步更新</code>的策略，通俗点说就是，<code>同一事件循环内</code>多次修改，会 <code>统一</code>进行一次 <code>视图更新</code>，这样才能节省性能嘛<br>看懂了上面，那你应该也看得懂下面的例子了吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;divref=<span class="string">&quot;testDiv&quot;</span>&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">testDiv</span>.<span class="property">innerHTML</span>) <span class="comment">// 这里是啥呢</span></span><br></pre></td></tr></table></figure><p>答案是“小林”，前面说了，Vue是 <code>异步更新</code>，所以数据一更新，视图却还没更新，所以拿到的还是上一次的旧视图数据，那么想要拿到最新视图数据怎么办呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;林三心&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">testDiv</span>.<span class="property">innerHTML</span>) <span class="comment">// 林三心</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue中数据变了但是视图不跟新怎么解决？"><a href="#vue中数据变了但是视图不跟新怎么解决？" class="headerlink" title="vue中数据变了但是视图不跟新怎么解决？"></a>vue中数据变了但是视图不跟新怎么解决？</h3><p>vue不能检测以下变动的数组：<br>1、当你利用索引直接设置一个项时，vm.items[indexOfItem] &#x3D; newValue<br>2、当你修改数组的长度时，例如： vm.items.length &#x3D; newLength</p><p>对象属性的添加或删除<br>由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p><p>解决办法：<br>使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上<br>Vue.set(vm.someObject, ‘b’, 2) 或者 this.$set(this.someObject,‘b’,2) （这也是全局 Vue.set 方法的别名）</p><p>异步更新队列<br>在最新的项目中遇到了这种情况，数据第一次获取到了，也渲染了，但是第二次之后数据只有在再一次渲染页面的时候更新，并不能实时更新。</p><p>Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。</p><p>解决办法：<br>可在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数在 DOM 更新完成后就会调用</p><h3 id="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"><a href="#对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？" class="headerlink" title="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"></a>对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？</h3><ul><li>原因：<code>Object.defineProperty</code>没有对对象的新属性进行属性劫持</li><li>对象新属性无法更新视图：使用 <code>Vue.$set(obj, key, value)</code>，组件中 <code>this.$set(obj, key, value)</code></li><li>删除属性无法更新视图：使用 <code>Vue.$delete(obj, key)</code>，组件中 <code>this.$delete(obj, key)</code></li></ul><h3 id="直接arr-index-x3D-xxx无法更新视图怎么办？为什么？怎么办？"><a href="#直接arr-index-x3D-xxx无法更新视图怎么办？为什么？怎么办？" class="headerlink" title="直接arr[index] &#x3D; xxx无法更新视图怎么办？为什么？怎么办？"></a>直接arr[index] &#x3D; xxx无法更新视图怎么办？为什么？怎么办？</h3><ul><li>原因：Vue没有对数组进行 <code>Object.defineProperty</code>的属性劫持，所以直接arr[index] &#x3D; xxx是无法更新视图的</li><li>使用数组的splice方法，<code>arr.splice(index, 1, item)</code></li><li>使用 <code>Vue.$set(arr, index, value)</code></li></ul><h3 id="Vue-中响应式数据是如何做到对某个对象的深层次属性的监听的？"><a href="#Vue-中响应式数据是如何做到对某个对象的深层次属性的监听的？" class="headerlink" title="Vue 中响应式数据是如何做到对某个对象的深层次属性的监听的？"></a>Vue 中响应式数据是如何做到对某个对象的深层次属性的监听的？</h3><h3 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h3><p>原理：Vuex是专门为vue.js应用程序设计的状态管理工具。</p><p>1、state   保存vuex中的数据源，通过this.$store.state获取</p><p>2、getters 用于监听state中的值的变化，返回计算后的结果。getter的返回值会根据它的依赖被缓存起来</p><p>3、mutations  是修改store中的值得唯一方式   &#x2F;&#x2F;this.$store.commit(‘add’)</p><p>4、action  官方建议提交一个actions，在actions中提交mutations再去修改状态值。this.$store.dispatch(‘add’)</p><p>5、modules 模块化</p><h3 id="vuex的有哪些属性？用处是什么？"><a href="#vuex的有哪些属性？用处是什么？" class="headerlink" title="vuex的有哪些属性？用处是什么？"></a>vuex的有哪些属性？用处是什么？</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9566927e955c4d0ba19df942534e5b53~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="如何解决vuex页面刷新数据丢失问题？"><a href="#如何解决vuex页面刷新数据丢失问题？" class="headerlink" title="如何解决vuex页面刷新数据丢失问题？"></a>如何解决vuex页面刷新数据丢失问题？</h3><p>原因：因为vuex里的数据是保存在运行内存中的，当页面刷新时，页面会重新加载vue实例，vuex里面的数据就会被清空。</p><p>解决方法：将vuex中的数据直接保存到浏览器缓存中。（一般是用sessionStorage）</p><h3 id="vue-router的路由模式有？"><a href="#vue-router的路由模式有？" class="headerlink" title="vue-router的路由模式有？"></a>vue-router的路由模式有？</h3><p>1、hash模式，用URL hash值来做路由，支持所有浏览器；该模式实现的路由，在通过链接后面添加““#”+路由名字”，触发 <code>hashchange</code>事件，实现路由切换</p><p>2、history模式，由h5提供的history对象实现，依赖H5 History API和服务器配置，通过 <code>pushState</code>和 <code>replaceState</code>切换url，实现路由切换，需要后端配合</p><p>3、abstract模式，支持所有JS运行环境，如Node服务器端，如果发现没有浏览器的API，路由会自动强制进入该模式。</p><h3 id="route和router的区别"><a href="#route和router的区别" class="headerlink" title="route和router的区别"></a>route和router的区别</h3><p>route:是路由信息对象，包括“path,parms,hash,name“等路由信息参数。</p><p>router:是路由实例对象，包括了路由跳转方法，钩子函数等。</p><h3 id="如何配置Vue-router异步加载"><a href="#如何配置Vue-router异步加载" class="headerlink" title="如何配置Vue-router异步加载"></a>如何配置Vue-router异步加载</h3><p><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666708047724.png" alt="1666708047724"></p><h3 id="Vue路由跳转方式"><a href="#Vue路由跳转方式" class="headerlink" title="Vue路由跳转方式"></a>Vue路由跳转方式</h3><p>router-link 标签跳转</p><p>this.$router.push()</p><p>this.$router.replace()</p><p>this.$router.go(n)：（0：当前页，-1上一页，+1下一页，n代表整数）</p><h3 id="Vue中for循环为什么加key？"><a href="#Vue中for循环为什么加key？" class="headerlink" title="Vue中for循环为什么加key？"></a>Vue中for循环为什么加key？</h3><ul><li><p>必须用 key ， 且不能是 index 和 random</p><blockquote><p>因为假设我们给数组前插入一个新元素，它的下标是0，那么和原来的第一个元素重复了，整个数组的key都发生了改变，这样就跟没有key的情况一样了。</p></blockquote></li><li><p>性能优化，减少渲染次数，提升渲染性能</p><blockquote><p>因为vue是虚拟DOM，更新DOM时用diff算法对节点进行一一比对，通过 tag 和 key 来判断，是否是 sameNode</p></blockquote></li></ul><p>key也不能是li元素的index</p><h3 id="为什么不建议用index做key，为什么不建议用随机数做key？"><a href="#为什么不建议用index做key，为什么不建议用随机数做key？" class="headerlink" title="为什么不建议用index做key，为什么不建议用随机数做key？"></a>为什么不建议用index做key，为什么不建议用随机数做key？</h3><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item.<span class="property">name</span>&#125;&#125;&lt;/div&gt;</span><br><span class="line"><span class="attr">list</span>: [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;124&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;125&#x27;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>渲染为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;0&quot;</span>&gt;小明&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;1&quot;</span>&gt;小红&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;2&quot;</span>&gt;小花&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>现在我执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>.<span class="title function_ invoke__">unshift</span>(&#123; <span class="attr">name</span>:<span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>:<span class="string">&#x27;122&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>渲染为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;0&quot;</span>&gt;</span>小林<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新旧对比</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;0&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;0&quot;</span>&gt;</span>小林<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，如果用index做key的话，其实是更新了原有的三项，并新增了小花，虽然达到了渲染目的，但是损耗性能</p><p>现在我们使用id来做key，渲染为</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;123&quot;</span>&gt;小明&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;124&quot;</span>&gt;小红&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> key=<span class="string">&quot;125&quot;</span>&gt;小花&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>现在我执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>.<span class="title function_ invoke__">unshift</span>(&#123; <span class="attr">name</span>:<span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>:<span class="string">&#x27;122&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>渲染为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;122&quot;</span>&gt;</span>小林<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新旧对比</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">                           <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;122&quot;</span>&gt;</span>小林<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，原有的三项都不变，只是新增了小林这个人，这才是最理想的结果</p><p>用 <code>index</code>和用 <code>随机数</code>都是同理，<code>随机数</code>每次都在变，做不到专一性，很 <code>渣男</code>，也很消耗性能，所以，拒绝 <code>渣男</code>，选择 <code>老实人</code></p><h3 id="vue路由守卫有哪些？"><a href="#vue路由守卫有哪些？" class="headerlink" title="vue路由守卫有哪些？"></a>vue路由守卫有哪些？</h3><p>路由守卫分为三种 ——分别是：全局路由守卫、组件路由守卫、独享路由守卫。</p><p>全局守卫</p><p>全局守卫又分为全局前置守卫、和后置守卫</p><ol><li>router.beforeEach((to,from,next)&#x3D;&gt;{})</li></ol><p>回调函数中的参数，to：进入到哪个路由去，from：从哪个路由离开，next：函数，决定是否展示你要看到的路由页面。</p><p>从名字全局前置守卫不难理解，它是全局的，即对 整个单页应用（SPA） 中的所有路由都生效，所以当定义了全局的前置守卫，在进入每一个路由之前都会调用这个回调，那么如果你在回调中对路由的跳转条件判断出错，简单点就是死循环…因为你遗漏了某种路由跳转的情况，守卫会一直执行。所以在使用全局前置守卫的时候一定要判断清楚可能会出现的路由跳转的情况。</p><p>2.router.afterEach((to, from) &#x3D;&gt; {}）</p><p>只有两个参数，to：进入到哪个路由去，from：从哪个路由离。</p><p>理解了全局前置守卫，那么全局后置守卫也就那么一回事。全局后置守卫是整个单页应用中每一次路由跳转后都会执行其中的回调。所以多用于路由跳转后的相应页面操作，并不像全局前置守卫那样会在回调中进行页面的重定向或跳转。</p><p>组件内的守卫</p><p>组件路由守卫分为到达这个组件时，离开这个组件时</p><ol><li>beforeRouteEnter:(to,from,next)&#x3D;&gt;{}——到达</li></ol><p>to，from参数与上面使用方法一致。next回调函数略有不同。</p><p>1</p><p>2.beforeRouteUpdate:(to,from,next)&#x3D;&gt;{}——更新</p><ol start="3"><li>beforeRouteLeave:(to,from,next)&#x3D;&gt;{}——离开</li></ol><p>点击其他组件时，判断是否确认离开。确认执行next()；取消执行next(false)，留在当前页面。</p><p>1</p><p>路由独享的守卫</p><ol><li>beforeEnter:(to,from,next)&#x3D;&gt;{}</li></ol><p>与全局路由守卫用法一致，但是只能针对一个页面使用</p><p>1</p><h3 id="delete和Vue-delete删除数组的区别"><a href="#delete和Vue-delete删除数组的区别" class="headerlink" title="delete和Vue.delete删除数组的区别"></a>delete和Vue.delete删除数组的区别</h3><p>delete只是被删除的元素变成了empty&#x2F;undefined其他的元素的键值还是不变。<br>Vue.delete直接删除了数组 改变了数组的键值</p><h3 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h3><p><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BVue%E7%AF%87/1666707236900.png" alt="1666707236900"><br><code>data</code>之所以是一个函数，是因为一个组件可能会多处调用，而每一次调用就会执行 <code>data函数</code>并返回新的数据对象，这样，可以避免多处调用之间的 <code>数据污染</code>。<br>如果data是对象的话，每当被复用是，复用的对象和源对象都会指向同一个内存地址（浅拷贝），互相之间相互影响；而函数的话，就会形成闭包，保护变量，不会造成影响。</p><h3 id="如何获取data中某一个数据的初始状态？"><a href="#如何获取data中某一个数据的初始状态？" class="headerlink" title="如何获取data中某一个数据的初始状态？"></a>如何获取data中某一个数据的初始状态？</h3><blockquote><p>在开发中，有时候需要拿初始状态去计算。例如</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">num</span>:<span class="number">10</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">num</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">howMuch</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算出num增加了多少，那就是1000 - 初始值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以通过this.$options.data().xxx来获取初始值</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1000</span> - <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="title function_">data</span>().<span class="property">num</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="动态指令和参数使用过吗？"><a href="#动态指令和参数使用过吗？" class="headerlink" title="动态指令和参数使用过吗？"></a>动态指令和参数使用过吗？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;aButton@[someEvent]=<span class="string">&quot;handleSomeEvent()&quot;</span>:[someProps]=<span class="string">&quot;1000&quot;</span>/&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ...</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ...</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">someEvent</span>: someCondition ? <span class="string">&quot;click&quot;</span> : <span class="string">&quot;dbclick&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">someProps</span>:someCondition ? <span class="string">&quot;num&quot;</span> : <span class="string">&quot;price&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleSomeEvent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// handle some event</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="如何设置动态class，动态style？"><a href="#如何设置动态class，动态style？" class="headerlink" title="如何设置动态class，动态style？"></a>如何设置动态class，动态style？</h3><ul><li><p>动态class对象：</p><p><code>&lt;div :class=&quot;&#123; &#39;is-active&#39;: true, &#39;red&#39;: isRed &#125;&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态class数组：</p><p><code>&lt;div :class=&quot;[&#39;is-active&#39;, isRed ? &#39;red&#39; : &#39;&#39; ]&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态style对象：</p><p><code>&lt;div :style=&quot;&#123; color: textColor, fontSize: &#39;18px&#39; &#125;&quot;&gt;&lt;/div&gt;</code></p></li><li><p>动态style数组：</p></li></ul><p><code> &lt;div :style=&quot;[&#123; color: textColor, fontSize: &#39;18px&#39; &#125;, &#123; fontWeight: &#39;300&#39; &#125;]&quot;&gt;&lt;/div&gt;</code></p><h3 id="为什么v-if和v-for不建议用在同一标签？"><a href="#为什么v-if和v-for不建议用在同一标签？" class="headerlink" title="为什么v-if和v-for不建议用在同一标签？"></a>为什么v-if和v-for不建议用在同一标签？</h3><p>在Vue2中，<code>v-for</code>优先级是高于 <code>v-if</code>的，咱们来看例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;divv-<span class="keyword">for</span>=<span class="string">&quot;item in [1, 2, 3, 4, 5, 6, 7]&quot;</span>v-<span class="keyword">if</span>=<span class="string">&quot;item !== 3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的写法是 <code>v-for</code>和 <code>v-if</code>同时存在，会先把7个元素都遍历出来，然后再一个个判断是否为3，并把3给隐藏掉，这样的坏处就是，渲染了无用的3节点，增加无用的dom操作，建议使用computed来解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;divv-<span class="keyword">for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">computed</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">list</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item !== <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="State：定义了应用状态的数据结构，可以在这里设置默认的初始状态"><a href="#State：定义了应用状态的数据结构，可以在这里设置默认的初始状态" class="headerlink" title="State：定义了应用状态的数据结构，可以在这里设置默认的初始状态"></a>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态</h3><ul><li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li><li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li><li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li><li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li></ul><h3 id="Vue的SSR是什么？有什么好处？"><a href="#Vue的SSR是什么？有什么好处？" class="headerlink" title="Vue的SSR是什么？有什么好处？"></a>Vue的SSR是什么？有什么好处？</h3><p>*<code>SSR</code>就是服务端渲染</p><ul><li>基于 <code>nodejs serve</code>服务环境开发，所有 <code>html</code>代码在服务端渲染</li><li>数据返回给前端，然后前端进行“激活”，即可成为浏览器识别的html代码</li></ul><p>*<code>SSR</code>首次加载更快，有更好的用户体验，有更好的seo优化，因为爬虫能看到整个页面的内容，如果是vue项目，由于数据还要经过解析，这就造成爬虫并不会等待你的数据加载完成，所以其实Vue项目的seo体验并不是很好</p><h3 id="Vue-set方法的原理"><a href="#Vue-set方法的原理" class="headerlink" title="Vue.set方法的原理"></a>Vue.set方法的原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">functionset</span>(target, key, val) &#123;</span><br><span class="line">  <span class="comment">// 判断是否是数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">    <span class="comment">// 判断谁大谁小</span></span><br><span class="line">    target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key)</span><br><span class="line">    <span class="comment">// 执行splice</span></span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val)</span><br><span class="line">    returnval</span><br><span class="line">  &#125;</span><br><span class="line">  constob = target.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果此对象没有不是响应式对象，直接设置并返回</span></span><br><span class="line">  <span class="keyword">if</span> (keyintarget &amp;&amp; !(keyintarget.<span class="property"><span class="keyword">prototype</span></span>) || !ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    returnval</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则，新增属性，并响应式处理</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(target, key, val)</span><br><span class="line">  returnval</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-delete方法的原理？"><a href="#Vue-delete方法的原理？" class="headerlink" title="Vue.delete方法的原理？"></a>Vue.delete方法的原理？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">functiondel (target, key) &#123;</span><br><span class="line">  <span class="comment">// 判断是否为数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">    <span class="comment">// 执行splice</span></span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  constob = target.<span class="property">__ob__</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对象本身就没有这个属性，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!(keyintarget)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则，删除这个属性</span></span><br><span class="line">  deletetarget[key]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否是响应式对象，不是的话，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是的话，删除后要通知视图更新</span></span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="props怎么自定义验证"><a href="#props怎么自定义验证" class="headerlink" title="props怎么自定义验证"></a>props怎么自定义验证</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">num</span>: &#123;</span><br><span class="line">    <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回值为false则验证不通过，报错</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="审查元素时发现data-v-xxxxx，这是啥？"><a href="#审查元素时发现data-v-xxxxx，这是啥？" class="headerlink" title="审查元素时发现data-v-xxxxx，这是啥？"></a>审查元素时发现data-v-xxxxx，这是啥？</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff63f90f2d924ff6b20622a2d05ba367~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><blockquote><p>这是在标记vue文件中css时使用scoped标记产生的，因为要保证各文件中的css不相互影响，给每个component都做了唯一的标记，所以每引入一个component就会出现一个新的’data-v-xxx’标记</p></blockquote><h3 id="vue的hook的使用"><a href="#vue的hook的使用" class="headerlink" title="vue的hook的使用"></a>vue的hook的使用</h3><ul><li>同一组件中使用</li></ul><blockquote><p>这是我们常用的使用定时器的方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">timer</span>:<span class="literal">null</span>  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//具体执行内容</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面做法不好的地方在于：得全局多定义一个timer变量，可以使用hook这么做：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">exportdefault&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">      lettimer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//具体执行代码</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      &#125;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line"></span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>7.2 父子组件使用</li></ul><blockquote><p>如果子组件需要在mounted时触发父组件的某一个函数，平时都会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"></span><br><span class="line">&lt;rl-child@childMounted=<span class="string">&quot;childMountedHandle&quot;</span></span><br><span class="line"></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">method () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">childMountedHandle</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"></span><br><span class="line">mounted () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;childMounted&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用hook的话可以更方便：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"></span><br><span class="line">&lt;rl-child@<span class="attr">hook</span>:mounted=<span class="string">&quot;childMountedHandle&quot;</span></span><br><span class="line"></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line">method () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">childMountedHandle</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="provide和inject是响应式的吗？"><a href="#provide和inject是响应式的吗？" class="headerlink" title="provide和inject是响应式的吗？"></a>provide和inject是响应式的吗？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 祖先组件</span></span><br><span class="line"><span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// keyName: &#123; name: this.name &#125;, // value 是对象才能实现响应式，也就是引用类型</span></span><br><span class="line">    <span class="attr">keyName</span>:<span class="variable language_">this</span>.<span class="property">changeValue</span><span class="comment">// 通过函数的方式也可以[注意，这里是把函数作为value，而不是this.changeValue()]</span></span><br><span class="line">    <span class="comment">// keyName: &#x27;test&#x27; value 如果是基本类型，就无法实现响应式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">changeValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;改变后的名字-李四&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="attr">inject</span>:[<span class="string">&#x27;keyName&#x27;</span>]</span><br><span class="line"><span class="title function_">create</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">keyName</span>) <span class="comment">// 改变后的名字-李四</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue的el属性和-mount优先级？"><a href="#Vue的el属性和-mount优先级？" class="headerlink" title="Vue的el属性和$mount优先级？"></a>Vue的el属性和$mount优先级？</h3><blockquote><p>比如下面这种情况，Vue会渲染到哪个节点上</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">newVue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span><span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#ggg&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这是官方的一张图，可以看出 <code>el</code>和 <code>$mount</code>同时存在时，<code>el优先级</code> &gt; <code>$mount</code></p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/da6331091cb145459e0b543c76e9bfc6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="计算变量时，methods和computed哪个好？"><a href="#计算变量时，methods和computed哪个好？" class="headerlink" title="计算变量时，methods和computed哪个好？"></a>计算变量时，methods和computed哪个好？</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">howMuch1</span>()&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">howMuch2</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">data: () &#123;</span></span><br><span class="line"><span class="language-xml">  return &#123;</span></span><br><span class="line"><span class="language-xml">    index: 0</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;,</span></span><br><span class="line"><span class="language-xml">methods: &#123;</span></span><br><span class="line"><span class="language-xml">  howMuch1() &#123;</span></span><br><span class="line"><span class="language-xml">    return this.num + this.price</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;,</span></span><br><span class="line"><span class="language-xml">computed: &#123;</span></span><br><span class="line"><span class="language-xml">  howMuch2() &#123;</span></span><br><span class="line"><span class="language-xml">    return this.num + this.price</span></span><br><span class="line"><span class="language-xml">  &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>computed</code>会好一些，因为computed会有 <code>缓存</code>。例如index由0变成1，那么会触发视图更新，这时候methods会重新执行一次，而computed不会，因为computed依赖的两个变量num和price都没变。</p></blockquote><h3 id="vue常见性能优化方式"><a href="#vue常见性能优化方式" class="headerlink" title="vue常见性能优化方式"></a>vue常见性能优化方式</h3><ul><li>合理使用 v-show 和 v-if</li><li>合理使用 computed</li><li>v-for 时加 key，以及避免和 v-if 同时使用</li><li>自定义事件、DOM事件及时销毁</li><li>合理使用异步组件</li><li>合理使用 keep-alive</li><li>data 层级不要太深</li><li>使用 vue-loader 在开发环境做模板编译（预编译）</li><li>webpack层面的优化（传送门）</li><li>使用SSR</li></ul><h3 id="vue常⽤的UI组件库"><a href="#vue常⽤的UI组件库" class="headerlink" title="vue常⽤的UI组件库"></a>vue常⽤的UI组件库</h3><p>Mint UI，element，VUX</p><h3 id="简单介绍一下Element-UI的框架设计？"><a href="#简单介绍一下Element-UI的框架设计？" class="headerlink" title="简单介绍一下Element UI的框架设计？"></a>简单介绍一下Element UI的框架设计？</h3><h3 id="Vue首页白屏是什么问题引起的？如何解决呢？"><a href="#Vue首页白屏是什么问题引起的？如何解决呢？" class="headerlink" title="Vue首页白屏是什么问题引起的？如何解决呢？"></a>Vue首页白屏是什么问题引起的？如何解决呢？</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之JS篇（上）</title>
    <link href="https://superq314.github.io/posts/cbd6d0c2/"/>
    <id>https://superq314.github.io/posts/cbd6d0c2/</id>
    <published>2022-10-25T07:29:18.000Z</published>
    <updated>2022-10-26T06:03:43.611Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>前置知识：</p><p><code>typeof</code> 判断数据类型会输出如下这些：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">number</span> <span class="built_in">string</span> <span class="built_in">boolean</span> <span class="built_in">object</span> <span class="literal">undefined</span> <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p>需要注意的：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="literal">null</span>)) <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="literal">undefined</span>)) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>开门见山，下面输出会是什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="number">1</span> -<span class="string">&#x27;1&#x27;</span>))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>number</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="string">&#x27;1&#x27;</span> - <span class="string">&#x27;1&#x27;</span>))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>number</code><br>为啥不是 <code>string</code> 呢？</p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br>不是 <code>undefined</code>，而是<strong>报错</strong><br><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%8A%EF%BC%89/1666702107571.png" alt="1666702107571"></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>undefined</code><br>这里 <code>a</code> 没声明，判断类型当然是 <code>undefined</code>！</p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">typeof</span>(a)))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>string</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">typeof</span>(<span class="number">123</span>)))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>string</code><br>原因是 <code>typeof</code> 判断数据类型时，会返回字符串形式的类型，例如上上题的 <code>typeof(typeof(a))</code>，里面会返回一个 <code>&#39;undefined&#39;</code>这样的结果，而 <code>typeof(typeof(123))</code> 里面会返回一个 <code>&#39;number&#39;</code>。<br>因此我们再次 <code>typeof</code> 时，就会返回 <code>string</code> 类型。</p></div></div><h3 id="显示、隐式类型转换"><a href="#显示、隐式类型转换" class="headerlink" title="显示、隐式类型转换"></a>显示、隐式类型转换</h3><h4 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br> <code>123</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="string">&#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>NaN</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>1</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br>对于 <code>null</code>，输出数字 <code>0</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br>对于 <code>undefined</code>，输出 <code>NaN</code></p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))  <span class="comment">// number-NaN</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1a&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))  <span class="comment">// number-NaN</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3.14</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">Number</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">Number</span>(a))  <span class="comment">// number-3.14</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="literal">NaN</span>))                          <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>接下来，我们一起来探讨一下 <code>parseInt</code>，<code>parseInt</code>会将数字转换成整形，例如：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">parseInt</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">parseInt</span>(a)) <span class="comment">//number-123</span></span><br></pre></td></tr></table></figure><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">parseInt</span>(a)) + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">parseInt</span>(a))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>number-NaN</code><br>因为 <code>parseInt</code>不会对非数字进行取整操作。<br>对于 <code>true</code>、<code>false</code>、<code>undefined</code>、<code>null</code>、<code>NaN</code> 都会输出 <code>NaN</code>。如果是小数，不会四舍五入，而是直接舍弃小数点后的位数。</p></div></div><p><strong>parseInt()更多用法：</strong><br><code>parseInt()</code> 函数可解析一个字符串，并返回一个整数。</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">string</td><td align="center">必需。要被解析的字符串。</td></tr><tr><td align="center">radix</td><td align="center">可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</td></tr></tbody></table><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;10&quot;</span>);//返回 <span class="number">10</span></span><br><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;19&quot;</span>,<span class="number">10</span>);//返回 <span class="number">19</span> (<span class="number">10</span>+<span class="number">9</span>)</span><br><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;11&quot;</span>,<span class="number">2</span>);//返回 <span class="number">3</span> (<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;17&quot;</span>,<span class="number">8</span>);//返回 <span class="number">15</span> (<span class="number">8</span>+<span class="number">7</span>)</span><br><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;1f&quot;</span>,<span class="number">16</span>);//返回 <span class="number">31</span> (<span class="number">16</span>+<span class="number">15</span>)</span><br><span class="line"><span class="attribute">parseInt</span>(<span class="string">&quot;010&quot;</span>);//未定：返回 <span class="number">10</span> 或 <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">console</span>.log(parseInt(&#x27;abc123&#x27;)) // NaN</span><br><span class="line"><span class="attribute">console</span>.log(parseInt(&#x27;<span class="number">123</span>abc456&#x27;)) // <span class="number">123</span></span><br></pre></td></tr></table></figure><p><strong>parseFloat()用法（保留小数位数）：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">console</span>.log(parseFloat(&#x27;<span class="number">3</span>.<span class="number">1415926</span>&#x27;).toFixed(<span class="number">2</span>)) // <span class="number">3</span>.<span class="number">14</span></span><br><span class="line"><span class="attribute">console</span>.log(parseFloat(&#x27;<span class="number">3</span>.<span class="number">1415926</span>&#x27;).toFixed(<span class="number">4</span>)) // <span class="number">3</span>.<span class="number">1416</span></span><br></pre></td></tr></table></figure><p>下面我们介绍整数到字符串的转换：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">str</span> = <span class="number">123</span> + <span class="string">&#x27;&#x27;</span></span><br><span class="line">let str1 = <span class="number">123</span></span><br><span class="line">str1 = str1.<span class="built_in">toString</span>()</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">str</span>)) <span class="comment">//string</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">typeof</span>(str1)) <span class="comment">// string</span></span><br></pre></td></tr></table></figure><p>比较特殊的是，下面会报错，因为 <code>null</code> 和 <code>undefined</code> 会报错。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">str</span> = null</span><br><span class="line">let str1 = undefined</span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.<span class="built_in">toString</span>()</span><br><span class="line">str1 = str1.<span class="built_in">toString</span>()</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="built_in">str</span>)) <span class="comment">// error</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">typeof</span>(str1)) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>另外， <code>toString()</code>也能传一个基数，可以进行进制转换。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">num</span> = <span class="number">10</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">num</span>.toString(<span class="number">2</span>))<span class="comment"> // 1010</span></span><br></pre></td></tr></table></figure><hr><p>接下来，我们探讨一下 <code>Boolean</code>，直接看下面几个输出就好了，记住下面几个 <code>false</code>就行，其它就为 <code>true</code> 了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="number">1</span>))         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="literal">null</span>))      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>))       <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>))        <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">Boolean</span>(<span class="number">0</span>))         <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">a</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">a</span>++</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>124</code><br>因为看到 <code>a++</code> 操作，会有一个 <code>Number(a)</code> 的操作，然后数字自加，得到 <code>124</code>。</p></div></div><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">a</span> = <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>) </span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>a1</code><br>此时将 <code>1</code> 进行 <code>String(1)</code> 的操作，然后进行字符串拼接。</p></div></div><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">a</span> = <span class="string">&#x27;3&#x27;</span> &gt; <span class="number">2</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>)<span class="comment"> // true</span></span><br><span class="line">let <span class="keyword">a</span> = <span class="number">1</span> == <span class="string">&#x27;1&#x27;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>)<span class="comment"> // true</span></span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">a</span> = <span class="number">1</span> === <span class="string">&#x27;1&#x27;</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>false</code><br>因为 <code>===</code>是全等于，不会进行隐式转换，而上面 <code>==</code> 是会进行隐式转换的。</p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="literal">NaN</span> == <span class="literal">NaN</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>false</code>，因为和谁都不相等，连自己也不相等。</p></div></div><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">let</span> a = <span class="number">4</span> &gt; <span class="number">3</span> &gt; <span class="number">2</span> </span><br><span class="line"><span class="attribute">let</span> b = <span class="number">2</span> &gt; <span class="number">1</span> == <span class="number">1</span>  </span><br><span class="line"><span class="attribute">console</span>.log(a,b)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>false</code> 和 <code>true</code><br>因为 <code>4 &gt; 3</code> 会返回 <code>true</code> ，然后再隐式转换为 <code>1</code>，下面类似。</p></div></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">undefined</span> &gt; <span class="number">0</span> </span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">undefined</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">undefined</span> &lt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">undefined</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="literal">undefined</span> == <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> f = <span class="literal">null</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> g = <span class="literal">null</span> == <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> h = <span class="literal">null</span> &lt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d,e,f,g,h)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>false false false true true false false false</code><br>因为 <code>null</code> 和 <code>undefined</code> 只和它们比才相等。</p></div></div><p><strong>补充</strong></p><p>显示转换那里，我们介绍了字符串转整数的几种方式，还例举了很多题目，现在再补充一个：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">a</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">console.<span class="built_in">log</span>(typeof(+ <span class="keyword">a</span>) + <span class="string">&#x27;-&#x27;</span> + +<span class="keyword">a</span>)<span class="comment"> // number-123</span></span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let a = <span class="literal">NaN</span></span><br><span class="line">let b = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">let c = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">let d = <span class="literal">null</span></span><br><span class="line">let e = <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(a))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(b))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(c))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(d))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">isNaN</span>(e))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="number">1</span> -<span class="string">&#x27;1&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(<span class="string">&#x27;1&#x27;</span> - <span class="string">&#x27;1&#x27;</span>))</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>number</code></p></div></div><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><h3 id="函数种类、字面量"><a href="#函数种类、字面量" class="headerlink" title="函数种类、字面量"></a>函数种类、字面量</h3><p>开门见山，下面代码会输出什么，不知道小伙伴平常有咩有想过这类问题</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">test1()</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>1</code> 和 <code>报错</code><br><img src="/image/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%8A%EF%BC%89/1666702579339.png" alt="1666702579339"></p></div></div><p>这是为什么呢？<br>实际上，我们申明了一个变量 <code>test</code>，把这个函数 <code>test1</code>赋给它的时候，就已经把这个变量赋予了<strong>函数</strong>的功能，调用 <code>test()</code>方法当然能够正常运行，输出 <code>1</code>。而对于表达式赋值，会自动忽略后面的函数名称，也就是说写与不写并不影响 <code>test()</code>方法的执行。不信，看看下面代码会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">test() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>那这样，是不是说 <code>test1</code>完全没作用了，那写着干嘛，还多几个字符。 <strong>当然不是！</strong> ，<code>test1</code>在函数体内部是可见的，而在外部却不可见，通过这样，我们就可以实现<strong>递归操作</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于上述代码，后面函数体没有名字，我们称之为  <strong>匿名函数</strong> ，是不是有点印象了，原来就是这东西，哟西~</p><p>而通过这种方式赋值的表达式，我们称之为  <strong>匿名函数表达式</strong> ，也称为  <strong>函数字面量</strong> ，这些专有名词一出来，瞬间觉得有点逼格了有没有！</p><p>字面量这种东西，简单来说就是数据，例如下述，有 <code>数字字面量，字符串字面量，数组字面量</code>等等。简单理解就是，对于赋值的过程，右边的数据就是字面量。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">10</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = <span class="string">&#x27;111&#x27;</span></span><br><span class="line"><span class="selector-tag">var</span> c = <span class="selector-attr">[1,2,3]</span></span><br></pre></td></tr></table></figure><h3 id="形参实参映射"><a href="#形参实参映射" class="headerlink" title="形参实参映射"></a>形参实参映射</h3><p>补充：如何获取形参和实参对应的长度？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (<span class="params">a,b</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(test.<span class="built_in">length</span>)  <span class="comment">// 形参的长度 2</span></span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments.<span class="built_in">length</span>) <span class="comment">// 实参的长度 3</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>我想小伙伴们应该清楚实参和形参是什么玩意，但是我们可以更改实参的值吗？例如下述代码，会输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a =<span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>3</code>，我们可以修改实参的值。</p></div></div><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  b = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(arguments[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>undefined</code><br>因此对于上一题表述，要修改一下：对于实参传递过来确定的值，我们是可以进行修改的，而如果实参并没有传递值过来，我们是不能进行修改的。这就是 <strong>形参和实参的映射关系</strong> 。</p></div></div><p>简单解释一下 <strong>形参和实参的映射关系</strong> ，其实<strong>实参</strong>和<strong>形参</strong>不能说是一类的，看上述代码，我们可以通过 <code>arguments</code> 来获取我们的实参，可以看做是一个数组里面的某一项值，而数组是存放<strong>堆内存</strong>的，而对应我们形参其实是存放在<strong>栈内存</strong>的，它们之间会有一个映射关系，并且是一对一对应的，上述我们实参没有对 <code>b</code>进行赋值，尽管修改了形参，但改变不了我们的 <code>arguments[1]</code> 就是这个道理。（没有建立一对一映射关系）。</p><h2 id="让人费解的-GO-和-AO"><a href="#让人费解的-GO-和-AO" class="headerlink" title="让人费解的 GO 和 AO"></a>让人费解的 GO 和 AO</h2><h3 id="作用域引入"><a href="#作用域引入" class="headerlink" title="作用域引入"></a>作用域引入</h3><p>再来一道引申题，为后续内容做铺垫。下面 <code>a b c</code> 分别会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test1</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a)  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(b); <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  test2();</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(c); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line">test1();</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>1 2 报错</code><br>这就牵扯到 <code>scope</code> 问题了，简单理解就是函数内部能访问外面的变量，而函数外面却不能访问内部的变量，也就是<strong>闭包</strong>问题。（这个后文会提到）</p></div></div><h3 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h3><p>如果实参没有赋值，那么形参怎样设置默认参数呢？说到默认参数，我想你应该会想到如下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">test</span>(<span class="selector-tag">a</span> = <span class="number">1</span>, <span class="selector-tag">b</span> = <span class="number">1</span>) &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(a)</span><br><span class="line">  console<span class="selector-class">.log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">()</span></span> <span class="comment">// 1 1</span></span><br></pre></td></tr></table></figure><p>好的，上述问题算是开胃小菜，我们继续，我如果给 <code>a</code> 设定默认值，而 <code>b</code> 通过实参传递过来呢？可以实现吗？之前没有传参的话，不是默认打印 <code>undefined</code>吗，那我现在给 <code>a</code> 传递一个 <code>undefined</code>，是不是就会定为默认值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a = <span class="number">1</span>, b</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">undefined</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br>可以<br>上述代码输出结果为 <code>1 2</code>。简单解释一下，在之前我们将了形参实参是有一个映射关系，对于堆内存 <code>arguments</code> 里面，如果给了 <code>undefined</code>，那么就会去栈内存形参里面找，如果不为 <code>undefined</code>，则会设置形参的默认值。（其实这是 <code>es6</code> 的语法了）</p></div></div><p>那么，可以用 <code>es5</code>的方式实现一下吗？（当然可以，见代码）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  a = arguments[<span class="number">0</span>] || <span class="number">1</span></span><br><span class="line">  b = arguments[<span class="number">1</span>] || <span class="number">1</span></span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="literal">undefined</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><p>预编译总结一下就是如下几点：</p><ul><li>检查通篇的语法错误</li><li>解释一行，执行一行</li></ul><p>下面这两段代码，熟悉的同学一下就明白了，<strong>面试常考</strong>的经典题！</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span>()</span><br><span class="line">function <span class="built_in">test</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a)<span class="comment">;</span></span><br><span class="line">var a <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这就扯到了函数声明提升和变量提升相关的问题了。这里总结整理一下：</p><p><strong>函数声明会进行整体的提升，而变量只有声明进行了提升，赋值不会提升</strong></p><p>关于变量那块，举例下面代码，其实是有两个步骤：第一，进行变量声明 <code>var a;</code> 第二，进行赋值操作，<code>a = 1;</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>好了，这里我就认为你已经理解了提升相关的知识了，我们来看一道题吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>[Function: a]</code> （即函数 <code>a</code>）</p></div></div><p>讲解暗示全局变量 <code>imply golbal variable</code></p><p>下面代码会输出 <code>1</code>，比较简单，就直接说答案了。实际上这里就暗示全局变量了，因为全局有一个 <code>window</code>对象 ，下面代码也可以这样表示 <code>window.a = 1</code>，所有权归 <code>window</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这又让我想到了下述代码，<code>b</code> 能打印出来吗？还是会报错？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(b)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：<br><code>1</code><br>能打印出来 <code>b</code>，这种写法就是经典的<strong>变量泄露</strong>问题。而 <code>a</code>没办法打印，因为它是 <code>test</code>函数的局部变量，相当于闭包内的变量，外层没办法访问闭包内的变量。</p></div></div><p>继续，这次加大一点难度。下面代码又分别输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(b)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>放答案之前，先总结一下知识点，函数在执行之前，会生成一个 <code>AO</code>（<code>activation object</code>，也称为<strong>活动对象</strong>或者 <strong>函数上下文</strong> ）这个 <code>AO</code>会按照如下形式创建：</p><ul><li>第一步：寻找函数里的形参和变量声明</li><li>第二步：将实参的参数值赋值给形参</li><li>第三步：寻找函数声明，然后赋值函数体</li><li>第四步：执行</li></ul><p>下述代码是预编译（即函数执行之前 <code>AO</code>对象的结果）：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line"> a: <span class="literal">undefined</span> -&gt; <span class="number">2</span> -&gt; <span class="keyword">function</span> <span class="title function_">a</span><span class="params">()</span> <span class="params">()</span></span><br><span class="line"> <span class="title function_">b</span>: undefined</span><br><span class="line"> <span class="title function_">d</span>: function <span class="title function_">d</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下述代码是执行函数之后 <code>AO</code>对象的结果：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line"> a: <span class="literal">undefined</span> -&gt; <span class="number">2</span> -&gt; <span class="keyword">function</span> a<span class="function"><span class="params">()</span> <span class="params">()</span> -&gt;</span> <span class="number">1</span></span><br><span class="line"> b: <span class="literal">undefined</span> -&gt; <span class="keyword">function</span>() &#123;&#125;</span><br><span class="line"> d: <span class="keyword">function</span> d() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接看着上述执行完后的 <code>AO</code>，对于第一个输出，由与在赋值 <code>a</code> 为 <code>1</code> 之前，所以我们直接打印 <code>Function: a</code>，对于第二个输出，对 <code>a</code> 变量进行了赋值为 <code>1</code> 的操作，所以取 <code>AO</code> 对象中的最后一个 <code>1</code>，打印 1，对于第三个输出，没有其它赋值操作了，直接输出 1 ，对于 <code>b</code>，输出 <code>Function: b</code>，这个不需要太多解释。</p><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>最后，给出例题的答案：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">Function</span>: a]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">[<span class="keyword">Function</span>: b]</span><br></pre></td></tr></table></figure><p>下面来一道例题，巩固一下，小伙伴们可以自己拿过去做一遍。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a); <span class="comment">// 1</span></span><br><span class="line">  c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> c;</span><br><span class="line">  a = <span class="number">5</span>;</span><br><span class="line">  b = <span class="number">6</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(b); <span class="comment">// 6</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(b) <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AO = &#123;</span></span><br><span class="line"><span class="comment">  a: undefined -&gt; 1 -&gt; 5</span></span><br><span class="line"><span class="comment">  b: undefined -&gt; function b()&#123;&#125; -&gt; 6</span></span><br><span class="line"><span class="comment">  c: undefined -&gt; 0</span></span><br><span class="line"><span class="comment">  d: function d()&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><p>接下来，换类型了哈，下面会输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>1</code>，不用过多解释。</p><p>举上述例子是为了引出下文，因为这已经不是函数内部的问题了，是<strong>全局</strong>的问题了。<code>JS</code>执行之前，会产生一个叫做 <code>GO</code> 的东西，也称为 <code>global object</code>（全局上下文），也会按照如下步骤进行创建：</p><ul><li>第一步：寻找变量声明</li><li>第二步：寻找函数声明</li><li>第三部：执行</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">a: <span class="literal">undefined</span> -&gt; <span class="keyword">function</span> a() &#123;&#125; -&gt; <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，答案为 <code>1</code>。实际 <code>GO</code>，就是 <code>window</code>，<code>window</code>存储过程就是这样的！</p><p>好的，继续下一题，又会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a,b)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>[Function: a] undefined</code>，这个答案也许和你想的完全相反，有没有？按照 <code>GO</code>来解决这道题吧！</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">a: <span class="literal">undefined</span> -&gt; <span class="keyword">function</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">b: <span class="literal">undefined</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为在 <code>console.log(a,b)</code>在 <code>var b = function() &#123;&#125;</code>之前，此时还没有对 <code>b</code> 变量进行赋值，而 <code>a</code>通过函数声明整体提升，会输出 <code>funtion a() &#123;&#125;</code>，如果上述代码改成如下代码 <code>b</code>变量就会有对应值啦。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a,b)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><hr><p>回到我们开头的一道题，现在解决它应该没问题了，会输出什么呢？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>由于并没有执行函数，我们不用 <code>AO</code>，改用 <code>GO</code>，这道题其实和上一道题差不多，因为我们 <code>console.log(a)</code> 在赋值操作之前，因此我们不会有 <code>1</code>的结果，所以我们会打印 <code>function a()&#123;&#125;</code></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="keyword">function</span> <span class="title function_">a</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加大难度，看这一题，结合上述所说 <code>AO</code> 和 <code>GO</code> 来做，试一试！</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">Function</span>: a]</span><br><span class="line">[<span class="keyword">Function</span>: a]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>我觉得能把这道题完整做出来， <code>AO</code> 和 <code>GO</code> 基本没啥问题了，现在来解释一波：</p><p>直接上 <code>GO</code>、<code>AO</code>，后续不再过多解释了，如果还有不明白的小伙伴，建议往上再复习一遍，相信可以独立解决这道题的 <code>(*^▽^*)</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">  b: <span class="literal">undefined</span> -&gt; <span class="number">3</span></span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="keyword">function</span> a() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">AO = &#123;</span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="number">1</span> -&gt; <span class="keyword">function</span> a()&#123;&#125; -&gt; <span class="number">2</span></span><br><span class="line">  b: <span class="literal">undefined</span> -&gt; <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知道上一道题做的咋样，这道题我们找一点自信，看看会输出什么？</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">function test() &#123;</span><br><span class="line">  console.log(a)<span class="comment">; </span></span><br><span class="line">  a <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">  console.log(a)<span class="comment">; </span></span><br><span class="line">  var a <span class="operator">=</span><span class="number">3</span><span class="comment">;</span></span><br><span class="line">  console.log(a)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">test()<span class="comment">;</span></span><br><span class="line">var a<span class="comment">;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>undefined 2 3</code>，还是老规矩，直接上 <code>GO</code> 和 <code>AO</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="number">1</span></span><br><span class="line">  test: <span class="keyword">function</span>()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">AO = &#123;</span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="number">2</span> -&gt; <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，可能就有小部分长的比较帅的小伙伴就要问了，为啥我第一个 <code>a</code> 不是打印 <code>1</code>呢，<code>GO</code> 里面不是可以取嘛？ 确实，但是你漏掉了前提， <code>AO</code>里面此时存在变量 <code>a</code>，就不会去 <code>GO</code>里面找了，<strong>这里容易掉坑，必须注意！</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  console.log(b)<span class="comment">; </span></span><br><span class="line">  if(a)&#123;</span><br><span class="line">    var b <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  c <span class="operator">=</span> <span class="number">3</span><span class="comment">;</span></span><br><span class="line">  console.log(c)<span class="comment">; </span></span><br><span class="line">&#125;</span><br><span class="line">var a<span class="comment">;</span></span><br><span class="line">test()<span class="comment">;</span></span><br><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">; </span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案： <code>undefined 3 1</code>，直接上 <code>GO</code> 和 <code>AO</code>，解释一个地方，为啥 <code>b</code> 要放在 <code>AO</code> 里面，因为 <code>js</code>在预编译时，不会管你什么条件执不执行，只看你是否进行了申明，简单来说，只要在函数内声明了，那么我们就放入 <code>AO</code>里面，否则放在全局的 <code>GO</code>里面。</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GO</span> = &#123;</span><br><span class="line">  a: undefined -&gt; <span class="number">1</span></span><br><span class="line">  test: fucntion()<span class="meta">&#123;...&#125;</span></span><br><span class="line">  c: undefined -&gt; <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AO</span> = &#123;</span><br><span class="line">  b: undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们来几道题找点自信，结束这让人费解的 <code>GO</code> 和 <code>AO</code>吧，答案里我就只给 <code>GO</code> 和 <code>AO</code>啦，还不会方法的，建议多看上文内容，我就不作解释了。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">test</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">a</span>;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title">a</span>() &#123;&#125;</span><br><span class="line">  var a = 2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(test());</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案： <code>[Function: a]</code></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GO</span> = &#123;</span><br><span class="line">  test: function() <span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AO</span> = &#123;</span><br><span class="line">  a: undefined -&gt; function a()&#123;&#125; -&gt; <span class="number">1</span> -&gt; <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续，下一题：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(test())</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案： <code>2</code></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GO</span> = &#123;</span><br><span class="line">  test: function()<span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">AO</span> = &#123;</span><br><span class="line">  a: undefined -&gt; function a()&#123;&#125; -&gt; <span class="number">1</span> -&gt; <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加大难度，注意头发…</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span> <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">function test(e)&#123;</span><br><span class="line">  function e()&#123;&#125;</span><br><span class="line">  arguments[<span class="number">0</span>] <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">  console.log(e)<span class="comment">; </span></span><br><span class="line">  if(a)&#123;</span><br><span class="line">    var b <span class="operator">=</span> <span class="number">3</span><span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  var c<span class="comment">;</span></span><br><span class="line">  a <span class="operator">=</span> <span class="number">4</span><span class="comment">;</span></span><br><span class="line">  var a<span class="comment">;</span></span><br><span class="line">  console.log(b)<span class="comment">; </span></span><br><span class="line">  f <span class="operator">=</span> <span class="number">5</span><span class="comment">;</span></span><br><span class="line">  console.log(c)<span class="comment">; </span></span><br><span class="line">  console.log(a)<span class="comment">; </span></span><br><span class="line">&#125;</span><br><span class="line">var a<span class="comment">;</span></span><br><span class="line">test(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">console.log(a)<span class="comment">;</span></span><br><span class="line">console.log(f)<span class="comment">;</span></span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>2 undefined undefined 4 1 5</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GO = &#123;</span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="number">1</span></span><br><span class="line">  test: <span class="keyword">function</span>()&#123;...&#125;</span><br><span class="line">  f: <span class="literal">undefined</span> -&gt; <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">AO = &#123;</span><br><span class="line">  e: <span class="literal">undefined</span> -&gt; <span class="number">1</span> -&gt; <span class="keyword">function</span> e()&#123;&#125; -&gt; <span class="number">2</span></span><br><span class="line">  b: <span class="literal">undefined</span> </span><br><span class="line">  a: <span class="literal">undefined</span> -&gt; <span class="number">4</span></span><br><span class="line">  c: <span class="literal">undefined</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>下面来一点加餐，我想小伙伴们一定是不满足于上述 <strong>“简单”</strong> 的输出题的，下面来几道经典笔试题：</p><p>第一题，下面会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>1</code>，存在隐式类型转换。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var b <span class="operator">=</span> false <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">console.log(b)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>false</code>，存在隐式类型转换。</p><p>可能前两道题比较简单，看看下面这份代码吧：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">typeof</span>(a) &amp;&amp; (-<span class="literal">true</span>) + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>1</code>，也是存在隐式类型转换，并且结合了上文的知识，一道非常不错的题。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(-<span class="literal">true</span>) <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(+<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">typeof</span>(a) &amp;&amp; (-<span class="literal">true</span>) + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">typeof</span>(-<span class="string">&#x27;123&#x27;</span>)) <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>((-<span class="literal">true</span>) + (+<span class="literal">undefined</span>) + <span class="string">&#x27;&#x27;</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>上面那道题解决了的话，下面这道题就是小试牛刀了，看看会输出什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span>+<span class="number">5</span>*<span class="string">&#x27;3&#x27;</span> === <span class="number">16</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>1</code>，虽然 <code>===</code> 不能进行隐式转换，但是没说左边或右边单独不能进行隐式转换呐。</p><p>继续，</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(!!<span class="string">&#x27; &#x27;</span> + !!<span class="string">&#x27;&#x27;</span> - !!false || <span class="string">&#x27;未通过&#x27;</span>);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案：<code>1</code>，因为左边 <code>1+0-0</code> 得到 <code>0</code>，所以不会走右边。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> || (<span class="variable language_">window</span>.<span class="property">a</span> = <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案：<code>1</code>，因为这里有 <code>()</code>括号，优先级最高，首先会对 <code>window.a</code> 赋值 <code>1</code>，然后判断左边 <code>window.a</code>为真，直接走下面输出函数。 而如果说先走左边 <code>window.a</code> 判断为 <code>false</code>，然后走右边进行赋值为 <code>1</code>，最后打印 <code>1</code>，这样回答的话就错啦， <strong>没有考虑括号优先级</strong> 。</p><h2 id="作用域、作用域链"><a href="#作用域、作用域链" class="headerlink" title="作用域、作用域链"></a>作用域、作用域链</h2><p>有了上文 <code>AO</code> 和 <code>GO</code> 的知识，作用域和作用域链就好理解了。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(test.name) <span class="comment">// test</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(test.<span class="built_in">length</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>从上述代码我们可以知道，函数也是一种对象类型，它也有一些属性，比如 <code>test.name</code>，<code>test.length</code>，<code>test.prototype</code>。而对象，有些属性是我们无法访问的，这些属性是 <code>JS</code>引擎&#96;内部固有的隐式属性。可以理解为内部的私有属性。引出 [ [scope] ] ，总结整理如下：</p><ul><li>函数创建时，生成的一个 <code>JS</code>内部的隐式属性</li><li>函数存储作用域链的容器，作用域链存放的就是 <code>AO</code>（函数的执行期上下文）、<code>GO</code>（全局的执行期上下文），函数执行完成以后，<code>AO</code>是要销毁的，也就是说 <code>AO</code> 是一个<strong>即时</strong>的存储容器。</li></ul><p><a href="https://www.bilibili.com/video/BV1x441167iH?p=6">推荐观看视频：小野老师讲解作用域、作用域链</a></p><p>总结一下关系：</p><p>函数在被定义的时候，已经存在作用域了，已经形成作用域链了，已经创建了 <code>GO</code>，而当函数在执行的时候，才会生成自己的 <code>AO</code>。</p><h2 id="闭包基础"><a href="#闭包基础" class="headerlink" title="闭包基础"></a>闭包基础</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function test1()&#123;</span><br><span class="line">  function test2()&#123;</span><br><span class="line">    var b <span class="operator">=</span> <span class="number">2</span><span class="comment">;</span></span><br><span class="line">    console.log(a)<span class="comment">;</span></span><br><span class="line">  &#125;</span><br><span class="line">  var a <span class="operator">=</span> <span class="number">1</span><span class="comment">;</span></span><br><span class="line">  return test2<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">var c <span class="operator">=</span> <span class="number">3</span><span class="comment">;</span></span><br><span class="line">var test3 <span class="operator">=</span> test1()<span class="comment">;</span></span><br><span class="line">test3()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><a href="https://img-blog.csdnimg.cn/20200915151044651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200915151044651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a></p><p><a href="https://img-blog.csdnimg.cn/20200915151130291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200915151130291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a></p><p><a href="https://img-blog.csdnimg.cn/20200915151229453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200915151229453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a><br><a href="https://img-blog.csdnimg.cn/20200915151524730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200915151524730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a><br><a href="https://img-blog.csdnimg.cn/20200915151851765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://img-blog.csdnimg.cn/20200915151851765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQyOTcxOA==,size_16,color_FFFFFF,t_70#pic_center"></a><br>总结如下：</p><p>当内部函数被返回到外部并保存时，一定会产生闭包。闭包会产生原来的作用域链不释放，过度的闭包可能会导致内存泄露或者加载过慢。</p><p>接着，我们来一道简单题，热个身吧，下面会输出什么，注意，这里我通过数组的方式，抛出了两个函数。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params"></span>)&#123;</span><br><span class="line">    n--;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [add,<span class="built_in">reduce</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = test();</span><br><span class="line">arr[<span class="number">0</span>]();</span><br><span class="line">arr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>101 100</code>，因为 <code>test</code>函数在执行的时候， <code>add</code> 和 <code>reduce</code> 函数已经被定义，此时作用域环境就是 <code>test</code>函数的 <code>AO</code>，而这个 <code>AO</code>里面就会创建一个 <code>n:100</code>，和对应函数，如下：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test函数执行时：</span><br><span class="line"><span class="type">AO</span> = &#123;</span><br><span class="line">n: undefined -&gt;<span class="number">100</span></span><br><span class="line">add : function()<span class="meta">&#123;...&#125;</span></span><br><span class="line">reduce: function()<span class="meta">&#123;...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们抛出 <code>add</code> 和 <code>reduce</code> 函数时，此时 <code>AO</code>并不会销毁。只是把线剪断了，因为 <code>add</code> 和 <code>reduce</code> 作用域链还连着的。都会一起返回出去，然后给到外部全局变量使用，当我们操作 <code>add</code>函数时，就能访问原本 <code>test</code>函数创建的 <code>AO</code>，将 <code>n++</code>得到 <code>101</code>，然后操作 <code>reduce</code> 函数将此时 <code>n=101</code>进行 <code>--</code>操作得到 <code>100</code>，就是我们的最终答案了。</p><hr><p>下面举一个比较好玩的例子，面包售卖进货管理系统。和上述代码思想一致，都是利用了闭包的思想。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面包售卖进货管理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">breadMgr</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> breadNum = num || <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 进货面包，每次进10个</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">supply</span>(<span class="params"></span>)&#123;</span><br><span class="line">    breadNum += <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(breadNum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 售卖面包，每次卖一个</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sale</span>(<span class="params"></span>)&#123;</span><br><span class="line">    breadNum--;</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(breadNum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [supply,sale];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> breadMgr = breadMgr(<span class="number">50</span>);</span><br><span class="line">breadMgr[<span class="number">0</span>]();</span><br><span class="line">breadMgr[<span class="number">1</span>]();</span><br><span class="line">breadMgr[<span class="number">1</span>]();</span><br><span class="line">breadMgr[<span class="number">1</span>]();</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>60 59 58 57</code>，就不多解释了，和上一题代码几乎一致。</p><p>同样，我们也可以通过对象的形式，一起抛出去，见下面例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sunSched</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> sunSched = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> operation = &#123;</span><br><span class="line">    <span class="attr">setSched</span>: <span class="keyword">function</span>(<span class="params">thing</span>)&#123;</span><br><span class="line">      sunSched = thing;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">showSched</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&quot;My Schedule on sunday is &quot;</span> + sunSched);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> operation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sunSched = sunSched();</span><br><span class="line">sunSched.setSched(<span class="string">&#x27;studying&#x27;</span>);</span><br><span class="line">sunSched.showSched(); <span class="comment">// My Schedule on sunday is studying</span></span><br></pre></td></tr></table></figure><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>观察如下代码，我们发现函数都是放在 <code>GO</code> 里的，它不会自动释放，也就是说放在 <code>GO</code>里的函数我们可以直接调用，不用重新定义新的函数，想调用随时调用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">test1</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">function <span class="built_in">test2</span>()&#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test2</span>(); <span class="comment">// 2</span></span><br><span class="line">function <span class="built_in">test3</span>()&#123;</span><br><span class="line">  <span class="built_in">test1</span>(); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test3</span>();</span><br></pre></td></tr></table></figure><p>在上述我们讨论了闭包，这一块我们来探讨立即执行函数，简单来说就是自动执行，执行完后立即释放。</p><p><code>IIFE - immediately - invoked - function - expression</code></p><p>立即执行函数有一个功能性的说法就是 <strong>初始化函数</strong> 。</p><p>下面，我们简单看一个立即执行函数的例子吧，重点学习语法，下面规范也是 <code>W3C</code>建议：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a+b);</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>下面写法也是可以的，但不是 <code>W3C</code>建议的写法。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">或者</span><br><span class="line">(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a+b);</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>有的时候，我们想要拿到函数返回值，那么立即执行函数每次执行完都会立即释放，直接 <code>return</code>我们是拿不到的，该如何是好？</p><p>原来，立即执行函数也是有返回值的，我们可以将 <code>return</code> 的结果直接返回给一个变量存起来，如下：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable">res</span> <span class="title function_">=</span> (<span class="title function_">function</span>(<span class="params">a</span>,<span class="params">b</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">a</span> <span class="operator">+</span> <span class="variable">b</span>;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="variable">console</span>.<span class="property">log</span>(<span class="variable">res</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>总结一下：<code>()</code>包括的内容相当于 <strong>表达式</strong> 。</p><p>比较下面结果，思考一下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a,b</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(a+b);</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>得到的结果： <strong>一定是表达式才能被执行符号执行</strong> 。</p><p>证明立即自执行函数执行完后立即释放：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(test); <span class="comment">// [Function: test]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;()</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(test1);</span><br></pre></td></tr></table></figure><p>打印 <code>1 undefined</code> ，因为立即自执行函数执行完后，立即销毁，所以 <code>test1</code> 接收不到函数体。</p><p>补充：函数声明变成表达式的方法： + - ! &amp;&amp; ||</p><p>举个例子：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>下面来一道经典面试题，将数组每一位都存放一个匿名函数，最后遍历执行时会打印什么？</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  var arr <span class="operator">=</span> []<span class="comment">;</span></span><br><span class="line">  for(var i<span class="operator">=</span><span class="number">0</span><span class="comment">;i&lt;10;i++)&#123;</span></span><br><span class="line">    arr[i] <span class="operator">=</span> function()&#123;</span><br><span class="line">      console.log(i)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return arr<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">var myArr <span class="operator">=</span> test()<span class="comment">;</span></span><br><span class="line">for(var i<span class="operator">=</span><span class="number">0</span><span class="comment">;i&lt;10;i++)&#123;</span></span><br><span class="line">  myArr[i]()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>10个10</code> ，其实是在 <code>test</code> 函数里面返回了 <code>10</code> 个匿名函数，而这 <code>10</code>个函数还没有执行，和上文闭包基础讲的例题一样，形成了一个闭包。原本 <code>test</code> 的 <code>AO</code> 中是有变量 <code>i</code>的，经过for循环，使得变量 <code>i</code> 变为 10了，而 <code>test</code>的 <code>AO</code>只是剪掉了，而那十个匿名函数的作用域链还连着的。所以后面我们一个个执行的时候，拿到的还是 <code>test</code>里面的 <code>AO</code>的 <code>i</code>值。</p><p>那么，对于上述代码，如果想要打印 <code>0-9</code>，要怎么做呢？ 根据当前标题，就可知道可以使用立即执行函数。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function <span class="built_in">test</span>() &#123;</span><br><span class="line">  for (var i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    (function() &#123;</span><br><span class="line">      console<span class="selector-class">.log</span>(i);</span><br><span class="line">    &#125;())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">test</span>();</span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">j</span>) &#123;</span><br><span class="line">      arr[j] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.<span class="built_in">log</span>(j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;(i))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  myArr[i]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，再来一道面试题，看看会返回什么？</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="function"><span class="keyword">fn</span> = <span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">function</span> test1<span class="params">()</span>&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> <span class="number">1</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">function</span> test2<span class="params">()</span>&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">return</span> <span class="string">&#x27;2&#x27;</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">)</span><span class="params">()</span></span>;</span><br><span class="line">console.log(typeof(<span class="function"><span class="keyword">fn</span>))</span>;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是返回 <code>string</code> ，因为括号里的逗号运算，会返回最后一个，如下，会返回 <code>2</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">console</span>.log((<span class="number">1</span>,<span class="number">2</span>)); // <span class="number">2</span></span><br></pre></td></tr></table></figure><p>因此括号里面放两个函数，以逗号分隔，就会立即执行 <code>test2</code>，然后 <code>typeof</code> 之后，就会返回 <code>string</code>了。</p><p>继续，我们再来一道面试题：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;&#125;)&#123;</span><br><span class="line">  a += <span class="built_in">typeof</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(a);</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案    </button><div class="hide-content"><p>答案是：</p></div></div><p>答案是 <code>10undefined</code> ，解释一下，首先 <code>if</code> 判断是要执行的，然后 <code>(function b()&#123;&#125;)</code>这个，是不是就是一个表达式了，然后忽略名称， <code>function()&#123;&#125;</code>，到下面的时候函数 <code>b</code>已经不存在了都。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之CSS篇</title>
    <link href="https://superq314.github.io/posts/42b47695/"/>
    <id>https://superq314.github.io/posts/42b47695/</id>
    <published>2022-10-25T07:28:56.000Z</published>
    <updated>2022-10-26T06:03:25.632Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="CSS中有哪些长度单位"><a href="#CSS中有哪些长度单位" class="headerlink" title="CSS中有哪些长度单位"></a>CSS中有哪些长度单位</h3><ul><li>绝对长度单位：<code>px</code></li><li>百分比: <code>%</code></li><li>相对父元素字体大小单位: <code>em</code></li><li>相对于根元素字体大小的单位: <code>rem</code></li><li>相对于视口*宽度的百分比(100vw即视窗宽度的100%): <code>vw</code></li><li>相对于视口*高度的百分比(100vh即视窗高度的100%): <code>vh</code></li></ul><h3 id="CSS有哪些基本的选择器，执行先后顺序？"><a href="#CSS有哪些基本的选择器，执行先后顺序？" class="headerlink" title="CSS有哪些基本的选择器，执行先后顺序？"></a>CSS有哪些基本的选择器，执行先后顺序？</h3><ul><li>id选择器        &#x3D;&gt; <code>#myId &#123;&#125;</code></li><li>类选择器        &#x3D;&gt; <code>.myClass &#123;&#125;</code></li><li>标签选择器      &#x3D;&gt; <code>p,h1 &#123;&#125;</code></li><li>后代选择器      &#x3D;&gt; <code>div h1 &#123;&#125;</code></li><li>子选择器        &#x3D;&gt; <code>div&gt;h1 &#123;&#125;</code></li><li>兄弟选择器      &#x3D;&gt; <code>ul~h1 &#123;&#125;</code></li><li>相邻兄弟选择器  &#x3D;&gt; <code>ul+h1 &#123;&#125;</code></li><li>属性选择器      &#x3D;&gt; <code>li[name=&#39;sss&#39;] &#123;&#125;</code></li><li>伪类选择器      &#x3D;&gt; <code>h1:hover &#123;&#125;</code></li><li>伪元素选择器    &#x3D;&gt; <code>h1::before&#123;&#125;</code></li><li>通配符选择器*   &#x3D;&gt; <code>* &#123;&#125;</code></li></ul><blockquote><p>!important &gt; 内联样式(非选择器) &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符选择器(*)</p></blockquote><p>浏览器body默认margin<br>ie8 -&gt; 上下16px 左右8px<br>ie7 -&gt; 上下15px 左右11px</p><h3 id="常用的块元素与行内元素有哪些？有什么特征"><a href="#常用的块元素与行内元素有哪些？有什么特征" class="headerlink" title="常用的块元素与行内元素有哪些？有什么特征"></a>常用的块元素与行内元素有哪些？有什么特征</h3><p>块元素：div、h1~h6、ul、li、table、p、br、form。</p><p>特征：独占一行，换行显示，可以设置宽高，可以嵌套块和行</p><p>行内元素：span、a、img、textarea、select、option、input。</p><p>特征：只有在行内显示，内容撑开宽、高，不可以设置宽、高（img、input、textarea等除外）。</p><h3 id="隐藏元素的方法及区别"><a href="#隐藏元素的方法及区别" class="headerlink" title="隐藏元素的方法及区别"></a>隐藏元素的方法及区别</h3><ol><li><code>display: none;</code>：该元素不会在页面中占据位置，渲染书不会渲染，更不会响应绑定的监听事件。</li><li><code>visibility: hidden;</code>：元素在页面中仍占据位置，但是不会响应绑定的监听事件。</li><li><code>opacity: 0;</code>：仅仅是透明度为0，在页面中占据位置，也能够响应元素绑定的监听事件。</li><li><code>position: absolute;</code>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li><li><code>z- index:99999;</code>：设置负值，使其他元素遮盖住该元素，以此来实现隐藏。</li><li><code>transform: scale(0,0);</code>：将元素内容缩放为0,但元素的大小不变，在页面中占据位置，但是不会响应绑定的监听事件。</li></ol><p>注意:</p><ol><li><code>display: none;</code>是非继承属性，子孙节点会随着父节点从渲染树消失，通过修改子孙节点的属性也无法显示;</li><li><code>visibility: hidden;</code>是继承属性，子孙节点消失是由于继承了hidden,通过设置visibility: visible可以让子孙节点显示;</li><li>设置display会造成文档重排，而visibility只会诰成本元素重绘;</li></ol><h3 id="display-none和visibility-hidden的区别"><a href="#display-none和visibility-hidden的区别" class="headerlink" title="display:none和visibility:hidden的区别"></a>display:none和visibility:hidden的区别</h3><ul><li><code>display:none</code>：隐藏元素，在文档布局中不在给它分配空间（从文档中移除），会引起回流（重排）</li><li><code>visibility:hidden</code>: 隐藏元素，但是在文档布局中仍保留原来的空间（还在文档中），不会引起回流（重绘）</li></ul><h3 id="常用布局方式有哪些？什么是盒模型？"><a href="#常用布局方式有哪些？什么是盒模型？" class="headerlink" title="常用布局方式有哪些？什么是盒模型？"></a>常用布局方式有哪些？什么是盒模型？</h3><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>父级div定义overflow:hidden（如果父级元素有定位元素超出父级，超出部分会隐藏）<br>给浮动元素父级增加标签（由于新增标签会造成不必要的渲染，不建议使用）<br>伪元素清除浮动：给浮动元素父级增加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">   <span class="attribute">content</span>: ‘’;</span><br><span class="line">   <span class="attribute">display</span>: table;</span><br><span class="line">   <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（不会新增标签，不会有其他影响）</p><h3 id="垂直水平居中方式有哪些？"><a href="#垂直水平居中方式有哪些？" class="headerlink" title="垂直水平居中方式有哪些？"></a>垂直水平居中方式有哪些？</h3><h3 id="解决纵向重叠问题"><a href="#解决纵向重叠问题" class="headerlink" title="解决纵向重叠问题?"></a>解决纵向重叠问题?</h3><p>对于兄弟元素之间重叠:</p><ul><li>底部元素变为行内盒子: display: inline-block</li><li>底部元素设置浮动: float</li><li>底部元素的position的值为absolute&#x2F; fixed</li></ul><p>对于父子元素重叠:</p><ul><li>父元素加入: overflow: hidden</li><li>父元素添加透明边框: border:1px solidtr ansparent</li><li>子元素变为行内盒子: display: inline _block子元素加入浮动属性或定位</li></ul><h3 id="用CSS实现三角形"><a href="#用CSS实现三角形" class="headerlink" title="用CSS实现三角形"></a>用CSS实现三角形</h3><h3 id="CSS3新特征"><a href="#CSS3新特征" class="headerlink" title="CSS3新特征"></a>CSS3新特征</h3><ul><li>圆角（border-radius）</li><li>阴影（box-shadow）</li><li>文字特效(text-shadow)</li><li>线性渐变（gradient）</li><li>变换(transform)</li><li>更多的CSS选择器</li><li>更多背景设置（background）</li><li>色彩模式（rgba）</li><li>伪元素（::selection）</li><li>媒体查询（@media）</li><li>多栏布局（column）</li><li>图片边框（border-image）</li></ul><h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><h3 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h3><h3 id="什么是重绘，重排？如何解决？"><a href="#什么是重绘，重排？如何解决？" class="headerlink" title="什么是重绘，重排？如何解决？"></a>什么是重绘，重排？如何解决？</h3><h4 id="重绘（repaint-x2F-redraw）"><a href="#重绘（repaint-x2F-redraw）" class="headerlink" title="重绘（repaint&#x2F;redraw）"></a>重绘（repaint&#x2F;redraw）</h4><p>某个dom节点的颜色，背景颜色变了，字体大小，只影响自己，不影响其他元素。</p><p>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。</p><h4 id="重排（回流-x2F-reflow-x2F-重构）"><a href="#重排（回流-x2F-reflow-x2F-重构）" class="headerlink" title="重排（回流&#x2F;reflow&#x2F;重构）"></a>重排（回流&#x2F;reflow&#x2F;重构）</h4><p>某个dom节点的宽高，布局，隐藏等发生改变，不仅自身发生了改变，而且其他元素也会受到影响随之发生改变。每个页面最少一次回流，就是页面第一次加载的时候。</p><h4 id="触发重排的原因"><a href="#触发重排的原因" class="headerlink" title="触发重排的原因"></a>触发重排的原因</h4><p>页面初始化渲染（无可避免）</p><p>添加或删除可见的DOM元素</p><p>元素尺寸的改变——大小，外边距；边框</p><p>浏览器窗口尺寸的变化</p><p>填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变</p><p>读取某些元素属性：（offsetLeft&#x2F;Top&#x2F;Height&#x2F;Width,　clientTop&#x2F;Left&#x2F;Width&#x2F;Height,　scrollTop&#x2F;Left&#x2F;Width&#x2F;Height,　width&#x2F;height,　getComputedStyle(), currentStyle(IE))</p><blockquote><p>1.重绘不一定重排，但是重排一定会重绘</p></blockquote><blockquote><p>2.重绘和重排的成本都是非常高的，要尽量减少dom的增删改</p></blockquote><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><p>不要直接操作样式，先设置好class，然后修改DOM的className;</p><p>position:absolute 与flex 不会导致重排</p><p>不要把DOM 节点的属性放在一个循环当成循环的变量；</p><p>需要动画的元素脱离文档流；</p><p>不使用table 布局，</p><p>尽量不修改影响范围比较大的DOM;</p><p>如果要多次添加DOM,先使用  document.createDocumentFragment() 创建一个盒子，完盒子里面先添加子元素，添加完成在插入元素中；</p><h3 id="transition都有哪些过渡属性？"><a href="#transition都有哪些过渡属性？" class="headerlink" title="transition都有哪些过渡属性？"></a>transition都有哪些过渡属性？</h3><h3 id="link和-import的区别？"><a href="#link和-import的区别？" class="headerlink" title="link和@import的区别？"></a>link和@import的区别？</h3><p>link属于html标签，而@import是css提供的。</p><p>页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载的。</p><p>兼容性问题：@import只在IE5以上才能识别，而link是html标签，无兼容性问题。</p><p>权重问题:@import的权重要高于link。</p><p>DOM操作:DOM可以操作link中的样式，而不可以操作@import中的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- html 文件 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- link 方式，推荐 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;linkrel=&quot;stylesheet&quot;type=&quot;text/css&quot;href=&quot;style.css&quot;media=&quot;screen&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- @import 方式 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;styletype=&quot;text/css&quot;media=&quot;screen&quot;&gt;</span><br><span class="line"></span><br><span class="line">    @importurl(style.css);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常用的动画库有哪些？"><a href="#常用的动画库有哪些？" class="headerlink" title="常用的动画库有哪些？"></a>常用的动画库有哪些？</h3><h3 id="href与src的区别"><a href="#href与src的区别" class="headerlink" title="href与src的区别"></a>href与src的区别</h3><h3 id="如何让CSS只在当前组件中起作用？"><a href="#如何让CSS只在当前组件中起作用？" class="headerlink" title="如何让CSS只在当前组件中起作用？"></a>如何让CSS只在当前组件中起作用？</h3><p>将当前组件的 <code>&lt;style&gt;</code>修改为 <code>&lt;style scoped&gt;</code>。</p><h3 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h3><p>box-shadow：水平位置（必） 垂直位置（必）模糊距离 阴影的尺寸（相当于在水平和垂直上的一个增量） 阴影颜色 阴影的种类</p><p>兼容性写法</p><p>-webkit-box-shadow: 0 0 10px;<br>-moz-box-shadow: 0 0 10px;<br>-o-box-shadow: 0 0 10px;</p><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><p>纯圆 50% 宽高一样</p><p>半圆角 height&#x2F;2 + px</p><p>遇到图片突出覆盖问题，可以用 overflow: hidden 来解决。</p><h3 id="网站cover背景图缩放不改变比例"><a href="#网站cover背景图缩放不改变比例" class="headerlink" title="网站cover背景图缩放不改变比例"></a>网站cover背景图缩放不改变比例</h3><p>.banner{<br>  width: 100%;<br>  height: 600px;<br>  background-color: orange;<br>  background-image: url(img&#x2F;xxx.jpg);<br>  background-repeat: no-repeat;<br>  background-size: cover;<br>  background-position: center center;<br>}</p><h3 id="背景图不随滚动条变化"><a href="#背景图不随滚动条变化" class="headerlink" title="背景图不随滚动条变化"></a>背景图不随滚动条变化</h3><p>background-attachment 有两个属性值， scrool（默认值，会跟随滚动条而变化），fixed（不会随着滚动条变化）</p><p>html{<br>  height: 100%;<br>  background-color: orange;<br>  background-image: url(img&#x2F;xxx.jpg);<br>  background-size: 100% 100%;<br>  background-attachment: fixed;<br>}</p><h3 id="logo公司常用写法模板"><a href="#logo公司常用写法模板" class="headerlink" title="logo公司常用写法模板"></a>logo公司常用写法模板</h3><p>解决因为网络问题导致css加载不出来时有一个补救措施</p><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>logo公司常用写法模板</title>  <style type="text/css">    h1{      margin: 0;    }<pre><code>.logo&#123;  width: 142px;  height: 58px;&#125;.logo h1 .logo-hd&#123;  display: block;  width: 142px;  height: 0;  padding-top: 58px;  background: url(img/logo.png) no-repeat 0 0/142px 58px;  overflow: hidden;&#125;`&lt;/style&gt;`</code></pre></head><body>  <div class="logo">    <h1>      <a href="" class="logo-hd">淘宝网</a>    </h1>  </div></body></html><h3 id="BFC特点"><a href="#BFC特点" class="headerlink" title="BFC特点"></a>BFC特点</h3><p>有点像完全独立出来的容器，不会对外面元素的布局产生影响。<br>属于普通流的范畴<br>如何让一个元素成为BFC<br>body本身就是BFC元素<br>被定义float: left &#x2F; right<br>position: absolute &#x2F; fixed<br>display: inline-block &#x2F; table-cell &#x2F; flex<br>overflow: auto &#x2F; hidden &#x2F; scroll</p><h3 id="BFC解决了什么问题"><a href="#BFC解决了什么问题" class="headerlink" title="BFC解决了什么问题"></a>BFC解决了什么问题</h3><p>它解决了什么问题？</p><p>margin合并问题<br>高度塌陷问题<br>margin塌陷问题<br>还是讲解一下 margin塌陷问题，如下代码，当我们在子级盒子里面设置 margin-top 发现会带着父级盒子一起下去了。</p><!DOCTYPE html><html lang="en"><head>  <meta charset="UTF-8">  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <title>BFC：margin塌陷问题</title>  <style type="text/css">    .box1{      width: 300px;      height: 300px;      background-color: #000;    }<pre><code>.box2&#123;  width: 50px;  height: 50px;  margin: 0 auto;  margin-top: 100px;  background-color: orange;&#125;`&lt;/style&gt;`</code></pre></head><body>  <div class="box1">    <div class="box2"></div>  </div></body></html><p>解决方式，就是利用BFC特性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>BFC：margin塌陷问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 可选方式 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* border: 1px solid transparent; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 解决方式，形成BFC */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* display: table-cell; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* overflow: hidden; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h3><p>显示属性：display position float clear<br>自身属性：width height margin padding border background<br>文本属性：color font text-align vertical-aligin white-space</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试之HTML篇</title>
    <link href="https://superq314.github.io/posts/58958bc4/"/>
    <id>https://superq314.github.io/posts/58958bc4/</id>
    <published>2022-10-25T07:28:43.000Z</published>
    <updated>2022-10-26T06:03:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="语义话的目的是什么？"><a href="#语义话的目的是什么？" class="headerlink" title="语义话的目的是什么？"></a>语义话的目的是什么？</h3><p>语义化的主要目的可以概括为用正确的标签做正确的事</p><p>HTMl语义化可以让页面的内容结构化，以便于浏览器解析和搜索引擎解析，<br>并且提高了代码的可读性便于代码维护，</p><h3 id="HTML5新增元素"><a href="#HTML5新增元素" class="headerlink" title="HTML5新增元素"></a>HTML5新增元素</h3><p>Canvas绘图以及SVG绘图。<br>拖放（Drag and drop）API<br>语义化标签（header、nav、footer、article、section）<br>音频、视频（audio、video）API<br>地理定位（Geolocation）<br>本地离线存储（localStorage）,长期存储数据，关闭浏览器后不丢失。<br>会话储存（sessionStorage）,数据在关闭浏览器后自动删除。<br>表单控件（calendar、date、time、email、url、search）</p><h3 id="cookie与sessionStorage和localStorage的区别"><a href="#cookie与sessionStorage和localStorage的区别" class="headerlink" title="cookie与sessionStorage和localStorage的区别"></a>cookie与sessionStorage和localStorage的区别</h3><ul><li>保存方式<ul><li>cookie存放在客户的浏览器上。</li><li>session都在客户端中保存，不参与服务器通讯。</li></ul></li><li>生命周期<ul><li>cookie可设置失效时间</li><li>localStorage除非手动清除否则永久保存</li><li>sessionStorage关闭当前页面或浏览器后失效</li></ul></li><li>存储的大小<ul><li>cookie 4kb左右</li><li>session 5M</li></ul></li><li>易用性<ul><li>cookie需自己封装</li><li>session可以接受原生接口</li></ul></li></ul><p>因为cookie每次请求都会携带在http请求中,所以它的主要用来识别用户登录,localStorage可以用来跨页面传参,sessionStorage可以用来保留一些临时数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>JS的运行机制</title>
    <link href="https://superq314.github.io/posts/b422724c/"/>
    <id>https://superq314.github.io/posts/b422724c/</id>
    <published>2022-10-24T14:09:43.000Z</published>
    <updated>2022-10-25T02:34:39.609Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="js单线程"><a href="#js单线程" class="headerlink" title="js单线程"></a>js单线程</h3><p>JavaScript语言的一大特点就是单线程，即同一时间只能做一件事情。</p><p>JavaScript的单线程，与它的用途有关。作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</p><p>为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。</p><h3 id="js事件循环"><a href="#js事件循环" class="headerlink" title="js事件循环"></a>js事件循环</h3><p>js代码执行过程中会有很多任务，这些任务总的分成两类：</p><ul><li>同步任务</li><li>异步任务</li></ul><p>当我们打开网站时，网页的渲染过程就是一大堆同步任务，比如页面骨架和页面元素的渲染。而像加载图片音乐之类占用资源大耗时久的任务，就是异步任务。，我们用导图来说明：<br><img src="file:///C:\Users\ADMINI~1\AppData\Local\Temp\ksohtml17948\wps6.jpg"></p><p>这里解释一下这张图：</p><ol><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。</li></ol><p><strong>那主线程执行栈何时为空呢？</strong><br>js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p><p>以上就是js运行的整体流程</p><p>面试中该如何回答呢？下面是我个人推荐的回答：</p><ol><li>首先js 是单线程运行的，在代码执行的时候，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。</li><li>在执行同步代码的时候，如果遇到了异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务</li><li>当同步事件执行完毕后，再将异步事件对应的回调加入到与当前执行栈中不同的另一个任务队列中等待执行。</li><li>任务队列可以分为宏任务对列和微任务对列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务对列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。</li><li>当微任务对列中的任务都执行完成后再去判断宏任务对列中的任务。</li></ol><p>最后可以用下面一道题检测一下收获：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">   <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>第一轮：主线程开始执行，遇到setTimeout，将setTimeout的回调函数丢到宏任务队列中，在往下执行new Promise立即执行，输出2，then的回调函数丢到微任务队列中，再继续执行，遇到process.nextTick，同样将回调函数扔到为任务队列，再继续执行，输出5，当所有同步任务执行完成后看有没有可以执行的微任务，发现有then函数和nextTick两个微任务，先执行哪个呢？process.nextTick指定的异步任务总是发生在所有异步任务之前，因此先执行process.nextTick输出4然后执行then函数输出3，第一轮执行结束。<br>第二轮：从宏任务队列开始，发现setTimeout回调，输出1执行完毕<br>因此结果是25431</p><p>相关资料：</p><ul><li><a href="https://juejin.cn/post/6844903606466904078" title="https://juejin.cn/post/6844903606466904078">《浏览器事件循环机制（event loop）》</a></li><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/33058983" title="https://zhuanlan.zhihu.com/p/33058983">《详解 JavaScript 中的 Event Loop（事件循环）机制》</a></li><li><a href="https://link.juejin.cn/?target=http://www.ruanyifeng.com/blog/2013/10/event_loop.html" title="http://www.ruanyifeng.com/blog/2013/10/event_loop.html">《Event Loop》</a></li><li><a href="https://juejin.cn/post/6844903512845860872" title="https://juejin.cn/post/6844903512845860872">《这一次，彻底弄懂 JavaScript 执行机制》</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    <category term="异步编程" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>状态管理</title>
    <link href="https://superq314.github.io/posts/8dbe3817/"/>
    <id>https://superq314.github.io/posts/8dbe3817/</id>
    <published>2022-10-24T07:32:38.000Z</published>
    <updated>2022-10-24T08:29:30.533Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>状态管理</p><blockquote><p>理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了。我们以一个简单的计数器组件为例：</p></blockquote><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 状态</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 动作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">count</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 视图 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">count</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>它是一个独立的单元，由以下几个部分组成：</p><ul><li>状态：驱动整个应用的数据源；</li><li>视图：对状态的一种声明式映射；</li><li>交互：状态根据用户在视图中的输入而作出相应变更的可能方式。<br>下面是“单向数据流”这一概念的简单图示：<br><img src="/image/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/1666598553488.png" alt="1666598553488"><br>然而，当我们有多个组件共享一个共同的状态时，就没有这么简单了：</li><li>多个视图可能都依赖于同一份状态。</li><li>来自不同视图的交互也可能需要更改同一份状态。<br>对于情景 1，一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：Prop 逐级透传问题。<br>对于情景 2，我们经常发现自己会直接通过模板引用获取父&#x2F;子实例，或者通过触发的事件尝试改变和同步多个状态的副本。但这些模式的健壮性都不甚理想，很容易就会导致代码难以维护。<br>一个更简单直接的解决方案是抽取出组件间的共享状态，放在一个全局单例中来管理。这样我们的组件树就变成了一个大的“视图”，而任何位置上的组件都可以访问其中的状态或触发动作。</li></ul><h2 id="用响应式-API-做简单状态管理"><a href="#用响应式-API-做简单状态管理" class="headerlink" title="用响应式 API 做简单状态管理"></a>用响应式 API 做简单状态管理</h2><p>如果你有一部分状态需要在多个组件实例间共享，你可以使用 reactive() 来创建一个响应式对象，并将它导入到多个组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- ComponentA.vue --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      store</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span>From A: </span><span class="template-variable">&#123;&#123; <span class="name">store.count</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!-- ComponentB.vue --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      store</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span>From B: </span><span class="template-variable">&#123;&#123; <span class="name">store.count</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>现在每当 store 对象被更改时，<ComponentA> 与 <ComponentB> 都会自动更新它们的视图。现在我们有了单一的数据源。<br>然而，这也意味着任意一个导入了 store 的组件都可以随意修改它的状态：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;store.count++&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    From B: </span><span class="template-variable">&#123;&#123; <span class="name">store.count</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>虽然这在简单的情况下是可行的，但从长远来看，可以被任何组件任意改变的全局状态是不太容易维护的。为了确保改变状态的逻辑像状态本身一样集中，建议在 store 上定义方法，方法的名称应该要能表达出行动的意图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;store.increment()&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    From B: </span><span class="template-variable">&#123;&#123; <span class="name">store.count</span> &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>TIP：这里点击的处理函数使用了 store.increment()，带上了圆括号作为内联表达式调用，因为它并不是组件的方法，并且必须要以正确的 this 上下文来调用。<br>除了我们这里用到的单个响应式对象作为一个 store 之外，你还可以使用其他响应式 API 例如 ref() 或是 computed()，或是甚至通过一个组合式函数来返回一个全局状态：</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; <span class="keyword">ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局状态，创建在模块作用域下</span></span><br><span class="line"><span class="keyword">const</span> globalCount = <span class="keyword">ref</span>(<span class="number">1</span>)</span><br><span class="line"><span class="function">export function <span class="title">useCount</span>()</span> &#123;  </span><br><span class="line">  <span class="comment">// 局部状态，每个组件都会创建</span></span><br><span class="line">  <span class="keyword">const</span> localCount = <span class="keyword">ref</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    globalCount,</span><br><span class="line">    localCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，Vue 的响应性系统与组件层是解耦的，这使得它非常灵活。</p><h2 id="SSR-相关细节"><a href="#SSR-相关细节" class="headerlink" title="SSR 相关细节"></a>SSR 相关细节</h2><p>如果你正在构建一个需要利用服务端渲染 (SSR) 的应用，由于 store 是跨多个请求共享的单例，上述模式可能会导致问题。这在 SSR 指引那一章节会讨论更多细节。</p><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p>虽然我们的手动状态管理解决方案在简单的场景中已经足够了，但是在大规模的生产应用中还有很多其他事项需要考虑：</p><ul><li>更强的团队协作约定</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试</li><li>模块热更新 (HMR)</li><li>服务端渲染支持<br>Pinia 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue 2 和 Vue 3 都可用。<br>现有用户可能对 Vuex 更熟悉，它是 Vue 之前的官方状态管理库。由于 Pinia 在生态系统中能够承担相同的职责且能做得更好，因此 Vuex 现在处于维护模式。它仍然可以工作，但不再接受新的功能。对于新的应用，建议使用 Pinia。<br>事实上，Pinia 最初正是为了探索 Vuex 的下一个版本而开发的，因此整合了核心团队关于 Vuex 5 的许多想法。最终，我们意识到 Pinia 已经实现了我们想要在 Vuex 5 中提供的大部分内容，因此决定将其作为新的官方推荐。<br>相比于 Vuex，Pinia 提供了更简洁直接的 API，并提供了组合式风格的 API，最重要的是，在使用 TypeScript 时它提供了更完善的类型推导。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="应用规模化" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E5%BA%94%E7%94%A8%E8%A7%84%E6%A8%A1%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>路由管理</title>
    <link href="https://superq314.github.io/posts/8086859f/"/>
    <id>https://superq314.github.io/posts/8086859f/</id>
    <published>2022-10-24T07:32:25.000Z</published>
    <updated>2022-10-24T08:29:30.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="客户端-vs-服务端路由"><a href="#客户端-vs-服务端路由" class="headerlink" title="客户端 vs. 服务端路由"></a>客户端 vs. 服务端路由</h2><p>服务端路由指的是服务器根据用户访问的 URL 路径返回不同的响应结果。当我们在一个传统的服务端渲染的 web 应用中点击一个链接时，浏览器会从服务端获得全新的 HTML，然后重新加载整个页面。<br>然而，在单页面应用中，客户端的 JavaScript 可以拦截页面的跳转请求，动态获取新的数据，然后在无需重新加载的情况下更新当前页面。这样通常可以带来更顺滑的用户体验，尤其是在更偏向“应用”的场景下，因为这类场景下用户通常会在很长的一段时间中做出多次交互。<br>在这类单页应用中，“路由”是在客户端执行的。一个客户端路由器的职责就是利用诸如 History API 或是 hashchange 事件这样的浏览器 API 来管理应用当前应该渲染的视图。</p><h2 id="官方路由"><a href="#官方路由" class="headerlink" title="官方路由"></a>官方路由</h2><p>Vue 很适合用来构建单页面应用。<br>对于大多数此类应用，都推荐使用官方支持的路由库。要了解更多细节，请查看 Vue Router 的文档。</p><h3 id="从头开始实现一个简单的路由"><a href="#从头开始实现一个简单的路由" class="headerlink" title="从头开始实现一个简单的路由"></a>从头开始实现一个简单的路由</h3><p>如果你只需要一个简单的页面路由，而不想为此引入一整个路由库，你可以通过动态组件的方式，监听浏览器 hashchange 事件或使用 History API 来更新当前组件。<br>下面是一个简单的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./Home.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./About.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;./NotFound.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> routes = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&#x27;/&#x27;</span>: <span class="title class_">Home</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&#x27;/about&#x27;</span>: <span class="title class_">About</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentPath = <span class="title function_">ref</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  currentPath.<span class="property">value</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentView = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> routes[currentPath.<span class="property">value</span>.<span class="title function_">slice</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span>] || <span class="title class_">NotFound</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/non-existent-path&quot;</span>&gt;</span>Broken Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentView&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="应用规模化" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E5%BA%94%E7%94%A8%E8%A7%84%E6%A8%A1%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>工具链</title>
    <link href="https://superq314.github.io/posts/30a49cf0/"/>
    <id>https://superq314.github.io/posts/30a49cf0/</id>
    <published>2022-10-24T07:31:40.000Z</published>
    <updated>2022-10-24T08:44:10.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="项目脚手架"><a href="#项目脚手架" class="headerlink" title="项目脚手架"></a>项目脚手架</h2><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">Vite</button></li><li class="tab"><button type="button" data-href="#super-2">Vue CLI</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>Vite 是一个轻量级的、速度极快的构建工具，对 Vue SFC 提供第一优先级支持。<br>要使用 Vite 来创建一个 Vue 项目，非常简单：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> init vue@latest</span><br></pre></td></tr></table></figure><p>这个命令会安装和执行 create-vue，它是 Vue 提供的官方脚手架工具。跟随命令行的提示继续操作即可。</p><ul><li>要学习更多关于 Vite 的知识，请查看 Vite 官方文档。</li><li>若要了解如何为一个 Vite 项目配置 Vue 相关的特殊行为，比如向 Vue 编译器传递相关选项，请查看 @vitejs&#x2F;plugin-vue 的文档。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>Vue CLI 是官方提供的基于 Webpack 的 Vue 工具链，它现在处于维护模式。我们建议使用 Vite 开始新的项目，除非你依赖特定的 Webpack 的特性。在大多数情况下，Vite 将提供更优秀的开发体验。<br>关于从 Vue CLI 迁移到 Vite 的资源：</p><ul><li>VueSchool.io 的 Vue CLI -&gt; Vite 迁移指南</li><li>迁移支持工具 &#x2F; 插件</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="浏览器内模板编译注意事项"><a href="#浏览器内模板编译注意事项" class="headerlink" title="浏览器内模板编译注意事项"></a>浏览器内模板编译注意事项</h2><p>当以无构建步骤方式使用 Vue 时，组件模板要么是写在页面的 HTML 中，或者是内联的 JavaScript 字符串。在这些场景中，为了执行动态模板编译，Vue 需要将模板编译器运行在浏览器中。相对的，如果我们使用了构建步骤，由于提前编译了模板，那么就无须再在浏览器中运行了。为了减小打包出的客户端代码体积，Vue 提供了多种格式的“构建文件”以适配不同场景下的优化需求。</p><ul><li>前缀为 vue.runtime.* 的文件是只包含运行时的版本：不包含编译器，当使用这个版本时，所有的模板都必须由构建步骤预先编译。</li><li>名称中不包含 .runtime 的文件则是完全版：即包含了编译器，并支持在浏览器中直接编译模板。然而，体积也会因此增长大约 14kb。<br>默认的工具链中都会使用仅含运行时的版本，因为所有 SFC 中的模板都已经被预编译了。如果因为某些原因，在有构建步骤时，你仍需要浏览器内的模板编译，你可以更改构建工具配置，将 vue 改为相应的版本 vue&#x2F;dist&#x2F;vue.esm-bundler.js。</li></ul><h2 id="IDE-支持"><a href="#IDE-支持" class="headerlink" title="IDE 支持"></a>IDE 支持</h2><ul><li>推荐使用的 IDE 是 VSCode，配合 Volar 插件。Volar 提供了语法高亮、TypeScript 支持，以及模板内表达式与组件 props 的智能提示。<blockquote><p>TIP：Volar 取代了我们之前为 Vue 2 提供的官方 VSCode 扩展 Vetur。如果你之前已经安装了 Vetur，请确保在 Vue 3 的项目中禁用它。</p></blockquote></li><li>WebStorm 同样也为 Vue 的单文件组件提供了很好的内置支持。</li><li>其他支持语言服务协议 (LSP) 的 IDE 也可以通过 LSP 享受到 Volar 所提供的的核心功能：</li><li>Sublime Text 通过 LSP-Volar 支持。</li><li>vim &#x2F; Neovim 通过 coc-volar 支持。</li><li>emacs 通过 lsp-mode 支持。</li></ul><h2 id="浏览器开发者插件"><a href="#浏览器开发者插件" class="headerlink" title="浏览器开发者插件"></a>浏览器开发者插件</h2><p>Vue 的浏览器开发者插件使我们可以浏览一个 Vue 应用的组件树，查看各个组件的状态，追踪状态管理的事件，还可以进行组件性能分析。</p><ul><li>文档</li><li>Chrome 插件商店页</li><li>Firefox 所属插件页</li><li>独立的 Electron 应用所属插件</li></ul><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul><li>Volar 插件能够为<code>&lt;script lang=&quot;ts&quot;&gt;</code>块提供类型检查，也能对模板内表达式和组件之间 props 提供自动补全和类型验证。</li><li>使用 vue-tsc 可以在命令行中执行相同的类型检查，通常用来生成单文件组件的 d.ts文件。</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>Cypress 推荐用于 E2E 测试。也可以通过 Cypress 组件测试运行器来给 Vue SFC 作单文件组件测试。</li><li>Vitest 是一个追求更快运行速度的测试运行器，由Vue &#x2F; Vite团队成员开发。主要针对基于 Vite 的应用设计，可以为组件提供即时响应的测试反馈。</li><li>Jest 可以通过 vite-jest 配合 Vite 使用。不过只推荐在你已经有一套基于 Jest 的测试集、且想要迁移到基于 Vite 的开发配置时使用，因为 Vitest 也能够提供类似的功能，且后者与 Vite 的集成更方便高效。</li></ul><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>Vue 团队维护着 eslint-plugin-vue 项目，它是一个 ESLint 插件，会提供 SFC 相关规则的定义。<br>之前使用 Vue CLI 的用户可能习惯于通过 webpack loader 来配置规范检查器。然而，若基于 Vite 构建，我们一般推荐：</p><ol><li>npm install -D eslint eslint-plugin-vue，然后遵照 eslint-plugin-vue 的指引进行配置。</li><li>启用 ESLint IDE 插件，比如 ESLint for VSCode，然后你就可以在开发时获得规范检查器的反馈。这同时也避免了启动开发服务器时不必要的规范检查。</li><li>将 ESLint 格式检查作为一个生产构建的步骤，保证你可以在最终打包时获得完整的规范检查反馈。</li><li>(可选) 启用类似 lint-staged 一类的工具在 git commit 提交时自动执行规范检查。</li></ol><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><ul><li>Volar VSCode 插件为 Vue SFC 提供了开箱即用的格式化功能。</li><li>Prettier 也提供了内置的 Vue SFC 格式化支持。</li></ul><h2 id="SFC-自定义块集成"><a href="#SFC-自定义块集成" class="headerlink" title="SFC 自定义块集成"></a>SFC 自定义块集成</h2><p>自定义块被编译成导入到同一 Vue 文件的不同请求查询。这取决于底层构建工具如何处理这类导入请求。</p><ul><li>如果使用 Vite，需使用一个自定义 Vite 插件将自定义块转换为可执行的 JavaScript 代码。</li><li>如果使用 Vue CLI 或只是 webpack，需要使用一个 loader 来配置如何转换匹配到的自定义块。</li></ul><h2 id="底层库"><a href="#底层库" class="headerlink" title="底层库"></a>底层库</h2><ul><li><p><code>@vue/compiler-sfc</code></p><p>Vue 核心 monorepo 的一部分，并始终和 vue 主包版本号保持一致。它已经成为 vue 主包的一个依赖并代理到了 vue&#x2F;compiler-sfc 目录下，因此你无需单独安装它。<br>这个包本身提供了处理 Vue SFC 的底层的功能，并只适用于需要支持 Vue SFC 相关工具链的开发者。</p><blockquote><p>TIP：请始终选择通过 vue&#x2F;compiler-sfc 的深度导入来使用这个包，因为这样可以确保其与 Vue 运行时版本同步。</p></blockquote></li><li><p><code>@vitejs/plugin-vue</code><br>为 Vite 提供 Vue SFC 支持的官方插件。</p></li><li><p><code>vue-loader</code><br>为 webpack 提供 Vue SFC 支持的官方 loader。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="应用规模化" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E5%BA%94%E7%94%A8%E8%A7%84%E6%A8%A1%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>插件</title>
    <link href="https://superq314.github.io/posts/def84ee6/"/>
    <id>https://superq314.github.io/posts/def84ee6/</id>
    <published>2022-10-24T07:30:31.000Z</published>
    <updated>2022-10-24T08:31:15.935Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>插件</p><blockquote><p>一种能为 Vue 添加全局功能的工具代码。<br>安装插件的示例：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(myPlugin, &#123;  <span class="comment">/* 可选的选项 */</span>&#125;)</span><br></pre></td></tr></table></figure><p>一个插件可以是一个拥有 install() 方法的对象，也可以直接是一个安装函数本身。安装函数会接收到安装它的应用实例和传递给 app.use()的额外选项作为参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 配置此应用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p><ol><li>通过 app.component() 和 app.directive() 注册一到多个全局组件或自定义指令。</li><li>通过 app.provide() 使一个资源可被注入进整个应用。</li><li>向 app.config.globalProperties 中添加一些全局实例属性或方法</li><li>一个可能上述三种都包含了的功能库 (例如 vue-router)。</li></ol><h2 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h2><p>从设置插件对象开始。<br>建议在一个单独的文件中创建并导出它，以保证更好地管理逻辑，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/i18n.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在这里编写插件代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们希望有一个翻译函数，这个函数接收一个以 . 作为分隔符的 key 字符串，用来在用户提供的翻译字典中查找对应语言的文本。期望的使用方式如下：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">$translate</span>(<span class="name">&#x27;greetings.hello&#x27;</span>) &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个函数应当能够在任意模板中被全局调用。这一点可以通过在插件中将它添加到 app.config.globalProperties 上来实现：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/i18n.js</span></span><br><span class="line">export default &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注入一个全局可用的 $translate() 方法</span></span><br><span class="line">    app.config.globalProperties.<span class="symbol">$tra</span>nslate = <span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取 `options` 对象的深层属性</span></span><br><span class="line">      <span class="comment">// 使用 `key` 作为索引</span></span><br><span class="line">      <span class="keyword">return</span> key.<span class="built_in">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="built_in">reduce</span>(<span class="function">(<span class="params">o, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o) <span class="keyword">return</span> o[i]</span><br><span class="line">      &#125;, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的 $translate 函数会接收一个例如 greetings.hello 的字符串，在用户提供的翻译字典中查找，并返回翻译得到的值。<br>用于查找的翻译字典对象则应当在插件被安装时作为 app.use() 的额外参数被传入：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18nPlugin <span class="keyword">from</span> <span class="string">&#x27;./plugins/i18n&#x27;</span></span><br><span class="line"></span><br><span class="line">app.use(i18nPlugin, &#123;</span><br><span class="line">  greetings: &#123;</span><br><span class="line">    hello: <span class="string">&#x27;Bonjour!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样，我们一开始的表达式 $translate(‘greetings.hello’) 就会在运行时被替换为 Bonjour! 了。<br>TIP：请谨慎使用全局属性，如果在整个应用中使用不同插件注入的太多全局属性，很容易让应用变得难以理解和维护。</p><h2 id="插件中的-Provide-x2F-Inject"><a href="#插件中的-Provide-x2F-Inject" class="headerlink" title="插件中的 Provide &#x2F; Inject"></a>插件中的 Provide &#x2F; Inject</h2><p>在插件中，我们可以通过 provide 来为插件用户供给一些内容。举例来说，我们可以将插件接收到的 options 参数提供给整个应用，让任何组件都能使用这个翻译字典对象。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> plugins/i18n.js</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install: <span class="function"><span class="params">(app, options)</span> =&gt;</span> &#123;</span><br><span class="line">    app.config.globalProperties.$translate = <span class="function"><span class="params">(key)</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> key.split(<span class="string">&#x27;.&#x27;</span>).reduce(<span class="function"><span class="params">(o, i)</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o) <span class="keyword">return</span> o[i]</span><br><span class="line">      &#125;, options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.provide(<span class="string">&#x27;i18n&#x27;</span>, options)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，插件用户就可以在他们的组件中以 i18n 为 key 注入并访问插件的选项对象了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;i18n&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">i18n</span>.<span class="property">greetings</span>.<span class="property">hello</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="逻辑复用" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义指令</title>
    <link href="https://superq314.github.io/posts/71ab3b72/"/>
    <id>https://superq314.github.io/posts/71ab3b72/</id>
    <published>2022-10-24T07:30:19.000Z</published>
    <updated>2022-10-24T08:42:18.055Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>组件</strong>和<strong>组合式函数</strong>是两种在 Vue 中重用代码的方式。</p><ul><li>组件是主要的构建模块</li><li>组合式函数则侧重于有状态的逻辑<br>自定义指令主要是为了重用涉及普通元素的底层 DOM 访问的逻辑。<br>一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。<br>钩子函数会接收到指令所绑定元素作为其参数。<br>下面是一个自定义指令的例子，当一个 input 元素被 Vue 插入到 DOM 中后，它会被自动聚焦：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> focus = &#123;</span><br><span class="line">  <span class="attr">mounted</span>: <span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="comment">// 在模板中启用 v-focus</span></span><br><span class="line">    focus</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你还未点击页面中的其他地方，那么上面这个 input 元素应该会被自动聚焦。该指令比 autofocus attribute 更有用，因为它不仅仅可以在页面加载完成后生效，还可以在 Vue 动态插入元素后生效。<br>和组件类似，自定义指令在模板中使用前必须先注册。在上面的例子中，我们使用 directives 选项完成了指令的局部注册。<br>将一个自定义指令全局注册到应用层级也是一种常见的做法：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 使 v-focus 在所有组件中都可用</span><br><span class="line">app.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="regexp">/* ... */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>TIP：只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令。其他情况下应该尽可能地使用 v-bind 这样的内置指令来声明式地使用模板，这样更高效，也对服务端渲染更友好。</p></blockquote><h2 id="指令钩子"><a href="#指令钩子" class="headerlink" title="指令钩子"></a>指令钩子</h2><p>一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">const</span> <span class="variable">myDirective</span> <span class="operator">=</span> &#123;</span><br><span class="line">  <span class="comment">// 在绑定元素的 attribute 前</span></span><br><span class="line">  <span class="comment">// 或事件监听器应用前调用</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面会介绍各个参数的细节</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在元素被插入到 DOM 前调用</span></span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都挂载完成后调用</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件更新前调用</span></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 在绑定元素的父组件</span></span><br><span class="line">  <span class="comment">// 及他自己的所有子节点都更新后调用</span></span><br><span class="line">  <span class="title function_">updated</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载前调用</span></span><br><span class="line">  <span class="title function_">beforeUnmount</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;,</span><br><span class="line">  <span class="comment">// 绑定元素的父组件卸载后调用</span></span><br><span class="line">  <span class="title function_">unmounted</span>(<span class="params">el</span>, <span class="params">binding</span>, <span class="params">vnode</span>, <span class="params">prevVnode</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="钩子参数"><a href="#钩子参数" class="headerlink" title="钩子参数"></a>钩子参数</h2><p>指令的钩子会传递以下几种参数：</p><ul><li><code>el</code>：指令绑定到的元素。这可以用于直接操作 <code>DOM</code>。</li><li><code>binding</code>：一个对象，包含以下属性。<ul><li><code>value </code>：传递给指令的值。例如在 <code>v-my-directive=&quot;1 + 1&quot;</code>中，值是 <code>2</code></li><li><code>oldValue</code>：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。</li><li><code>arg</code>：传递给指令的参数 (如果有的话)。例如在 <code>v-my-directive:foo</code>中，参数是 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象 (如果有的话)。例如在 <code>v-my-directive.foo.bar</code>中，修饰符对象是 <code>&#123; foo: true, bar: true &#125;</code>。</li><li><code>instance</code>：使用该指令的组件实例。</li><li><code>dir</code>：指令的定义对象。</li></ul></li><li><code>vnode</code>：代表绑定元素的底层 <code>VNode</code>。</li><li><code>prevNode</code>：之前的渲染中代表指令所绑定元素的 <code>VNode</code>。仅在 <code>beforeUpdate </code>和 <code>updated</code>钩子中可用。<br>举例来说，像下面这样使用指令：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-example:foo.<span class="attribute">bar</span>=<span class="string">&quot;baz&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><code>binding</code>参数会是一个这样的对象：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  arg: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  modifiers: &#123; bar: true &#125;,</span><br><span class="line">  value: <span class="comment">/* `baz` 的值 */</span>,</span><br><span class="line">  oldValue: <span class="comment">/* 上一次更新时 `baz` 的值 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和内置指令类似，自定义指令的参数也可以是动态的。举例来说：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> v-example:[arg]=<span class="string">&quot;value&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>这里指令的参数会基于组件的 <code>arg</code>数据属性响应式地更新。</p><blockquote><p>Note：除了 el 外，其他参数都是只读的，不要更改它们。</p></blockquote><h2 id="简化形式"><a href="#简化形式" class="headerlink" title="简化形式"></a>简化形式</h2><p>对于自定义指令来说，一个很常见的情况是仅仅需要在 <code>mounted</code>和 <code>updated</code>上实现相同的行为，除此之外并不需要其他钩子。这种情况下我们可以直接用一个函数来定义指令，如下所示：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> v-color=<span class="string">&quot;color&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app<span class="selector-class">.directive</span>(<span class="string">&#x27;color&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 这会在 `mounted` 和 `updated` 时都调用</span></span><br><span class="line">  el<span class="selector-class">.style</span><span class="selector-class">.color</span> = binding<span class="selector-class">.value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><p>如果你的指令需要多个值，你可以向它传递一个 JavaScript 对象字面量。别忘了，指令也可以接收任何合法的 JavaScript 表达式。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app<span class="selector-class">.directive</span>(<span class="string">&#x27;demo&#x27;</span>, (el, binding) =&gt; &#123;</span><br><span class="line">  console<span class="selector-class">.log</span>(binding<span class="selector-class">.value</span>.<span class="attribute">color</span>) // =&gt; <span class="string">&quot;white&quot;</span></span><br><span class="line">  console<span class="selector-class">.log</span>(binding<span class="selector-class">.value</span>.text) <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="在组件上使用"><a href="#在组件上使用" class="headerlink" title="在组件上使用"></a>在组件上使用</h2><p>当在组件上使用自定义指令时，它会始终应用于组件的根节点，和透传 attributes 类似。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent v-demo<span class="operator">=</span><span class="string">&quot;test&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyComponent 的模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- v-demo 指令会被应用在此处 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>My component content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是组件可能含有多个根节点。当应用到一个多根组件时，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 v-bind&#x3D;”$attrs”来传递给一个不同的元素。总的来说，不推荐在组件上使用自定义指令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="逻辑复用" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>组合式函数</title>
    <link href="https://superq314.github.io/posts/f41f26a4/"/>
    <id>https://superq314.github.io/posts/f41f26a4/</id>
    <published>2022-10-24T07:29:43.000Z</published>
    <updated>2022-10-24T08:38:46.358Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">标准化</button></li><li class="tab"><button type="button" data-href="#super-2">“组合式函数”</button></li><li class="tab"><button type="button" data-href="#super-3">异步状态处理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">定义</button></li><li class="tab"><button type="button" data-href="#super-2">输入参数</button></li><li class="tab"><button type="button" data-href="#super-3">返回值</button></li><li class="tab"><button type="button" data-href="#super-4">副作用</button></li><li class="tab"><button type="button" data-href="#super-5">使用限制</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><blockquote><p>组合式函数约定用驼峰命名法命名，并以“use”作为开头。<br>一个利用 Vue 的组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数。</p></blockquote><p>当构建前端应用时，我们常常需要复用公共任务的逻辑。复用无状态逻辑的库有很多，比如lodash[lodash.com] 、 date-fns[date-fns.org]。<br>相比之下，<strong>有状态逻辑</strong>负责管理会随时间而变化的状态。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>尽管其响应性不依赖 ref，组合式函数仍可接收 ref 参数。如果编写的组合式函数会被其他开发者使用，你最好在处理输入参数时兼容 ref 而不只是原始的值。unref() 工具函数会对此非常有帮助：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useFeature</span>(<span class="params">maybeRef</span>) &#123;</span><br><span class="line">  <span class="comment">// 若 maybeRef 确实是一个 ref，它的 .value 会被返回</span></span><br><span class="line">  <span class="comment">// 否则，maybeRef 会被原样返回</span></span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">unref</span>(maybeRef)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的组合式函数在接收 ref 为参数时会产生响应式 effect，请确保使用 watch() 显式地监听此 ref，或者在 watchEffect() 中调用 unref()来进行正确的追踪。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>你可能已经注意到了，我们一直在组合式函数中使用 ref() 而不是 reactive()。我们推荐的约定是组合式函数始终返回一个包含多个 ref 的普通的非响应式对象，这样该对象在组件中被解构为 ref 之后仍可以保持响应性：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x 和 y 是两个 ref</span></span><br><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = useMouse()</span><br></pre></td></tr></table></figure><p>从组合式函数返回一个响应式对象会导致在对象解构过程中丢失与组合式函数内状态的响应性连接。与之相反，ref 则可以维持这一响应性连接。<br>如果你更希望以对象属性的形式来使用组合式函数中返回的状态，你可以将返回的对象用 reactive() 包装一次，这样其中的 ref 会被自动解包，例如：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">mouse</span> = reactive(useMouse())</span><br><span class="line"><span class="comment">// mouse.x 链接到了原来的 x ref</span></span><br><span class="line">console.<span class="keyword">log</span>(<span class="keyword">mouse</span>.x)</span><br></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">Mouse position is at: </span><span class="template-variable">&#123;&#123; <span class="name">mouse.x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="template-variable">&#123;&#123; <span class="name">mouse.y</span> &#125;&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>在组合式函数中的确可以执行副作用 (例如：添加 DOM 事件监听器或者请求数据)，但请注意以下规则：</p><ul><li>如果你的应用用到了服务端渲染 (SSR)，请确保在组件挂载后才调用的生命周期钩子中执行 DOM 相关的副作用，例如：onMounted()。这些钩子仅会在浏览器中被调用，因此可以确保能访问到 DOM。</li><li>确保在 onUnmounted() 时清理副作用。举例来说，如果一个组合式函数设置了一个事件监听器，它就应该在 onUnmounted() 中被移除 (就像我们在 useMouse() 示例中看到的一样)。当然也可以像之前的 useEventListener() 示例那样，使用一个组合式函数来自动帮你做这些事。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>组合式函数在<code>&lt;script setup&gt;</code>或<code>setup()</code>钩子中，应始终被同步地调用。在某些场景下，你也可以在像<code>onMounted()</code>这样的生命周期钩子中使用他们。<br>这个限制是为了让 Vue 能够确定当前正在被执行的到底是哪个组件实例，只有能确认当前组件实例，才能够：</p><ol><li>将生命周期钩子注册到该组件实例上</li><li>将计算属性和监听器注册到该组件实例上，以便在该组件被卸载时停止监听，避免内存泄漏。<blockquote><p>TIP：<code>&lt;script setup&gt;</code>是唯一在调用 await 之后仍可调用组合式函数的地方。编译器会在异步操作之后自动为你恢复当前的组件实例。</p></blockquote></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>一个简单的例子：跟踪当前鼠标在页面中的位置。</p><blockquote><p>在实际应用中，也可能是像触摸手势或与数据库的连接状态这样的更复杂的逻辑。</p></blockquote><p>鼠标跟踪器示例</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">1. 直接在组件中使用组合式 API 实现功能逻辑</button></li><li class="tab"><button type="button" data-href="#super-2">2. 多个组件复用功能逻辑</button></li><li class="tab"><button type="button" data-href="#super-3">3. 嵌套多个组合式函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  x.<span class="property">value</span> = event.<span class="property">pageX</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  y.<span class="property">value</span> = event.<span class="property">pageY</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span>Mouse position is at: </span><span class="template-variable">&#123;&#123; <span class="name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="template-variable">&#123;&#123; <span class="name">y</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>把这个逻辑以一个组合式函数的形式提取到外部文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouse.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照惯例，组合式函数名以“use”开头</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMouse</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 被组合式函数封装和管理的状态</span></span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组合式函数可以随时更改其状态。</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    x.<span class="property">value</span> = event.<span class="property">pageX</span></span><br><span class="line">    y.<span class="property">value</span> = event.<span class="property">pageY</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个组合式函数也可以挂靠在所属组件的生命周期上</span></span><br><span class="line">  <span class="comment">// 来启动和卸载副作用</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span><br><span class="line">  <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, update))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过返回值暴露所管理的状态</span></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是它在组件中使用的方式：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; useMouse &#125; <span class="keyword">from</span> <span class="string">&#x27;./mouse.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span>Mouse position is at: </span><span class="template-variable">&#123;&#123; <span class="name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="template-variable">&#123;&#123; <span class="name">y</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>核心逻辑完全一致，只是把它移到一个外部函数中去，并返回需要暴露的状态。和在组件中一样，也可以在组合式函数中使用所有的组合式 API。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>一个组合式函数可以调用一个或多个其他的组合式函数。这使得我们可以像使用多个组件组合成整个应用一样，用多个较小且逻辑独立的单元来组合形成复杂的逻辑。<br>举例来说，我们可以将添加和清除 DOM 事件监听器的逻辑也封装进一个组合式函数中：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event.js</span></span><br><span class="line">import &#123; onMounted, onUnmounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">function</span> use<span class="constructor">EventListener(<span class="params">target</span>, <span class="params">event</span>, <span class="params">callback</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 如果你想的话，</span></span><br><span class="line">  <span class="comment">// 也可以用字符串形式的 CSS 选择器来寻找目标 DOM 元素</span></span><br><span class="line">  on<span class="constructor">Mounted(()</span> =&gt; target.add<span class="constructor">EventListener(<span class="params">event</span>, <span class="params">callback</span>)</span>)</span><br><span class="line">  on<span class="constructor">Unmounted(()</span> =&gt; target.remove<span class="constructor">EventListener(<span class="params">event</span>, <span class="params">callback</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了它，之前的 useMouse() 组合式函数可以被简化为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouse.js</span></span><br><span class="line">import &#123; <span class="keyword">ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">import &#123; useEventListener &#125; <span class="keyword">from</span> <span class="string">&#x27;./event&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function">export function <span class="title">useMouse</span>()</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="keyword">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> y = <span class="keyword">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEventListener(window, <span class="string">&#x27;mousemove&#x27;</span>, (<span class="keyword">event</span>) =&gt; &#123;</span><br><span class="line">    x.<span class="keyword">value</span> = <span class="keyword">event</span>.pageX</span><br><span class="line">    y.<span class="keyword">value</span> = <span class="keyword">event</span>.pageY</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TIP：每一个调用 useMouse() 的组件实例会创建其独有的 x、y 状态拷贝，因此他们不会互相影响。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>useMouse() 组合式函数没有接收任何参数，因此让我们再来看一个需要接收一个参数的组合式函数示例。在做异步数据请求时，我们常常需要处理不同的状态：加载中、加载成功和加载失败。</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">1. 传统处理方式</button></li><li class="tab"><button type="button" data-href="#super-2">2. 抽取成一个组合式函数</button></li><li class="tab"><button type="button" data-href="#super-3">3. 如果想让它在每次 URL 变化时都重新请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>如果在每个需要获取数据的组件中都要重复这种模式，那就太繁琐了。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">fetch</span>(<span class="string">&#x27;...&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> (data.<span class="property">value</span> = json))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> (error.<span class="property">value</span> = err))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;error&quot;</span>&gt;</span>Oops! Error encountered: </span><span class="template-variable">&#123;&#123; <span class="name">error.message</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Data loaded:</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">data</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(url)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> (data.<span class="property">value</span> = json))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> (error.<span class="property">value</span> = err))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; data, error &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件里只需要：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123; useFetch &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="keyword">from</span> <span class="string">&#x27;./fetch.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> </span></span><span class="template-variable">&#123; data, error &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="title function_">useFetch</span>(<span class="string">&#x27;...&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>useFetch() 接收一个静态的 URL 字符串作为输入，所以它只执行一次请求，然后就完成了。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>可以让它同时允许接收 ref 作为参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fetch.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, isRef, unref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> error = <span class="title function_">ref</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">doFetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在请求之前重设状态...</span></span><br><span class="line">    data.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">    error.<span class="property">value</span> = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// unref() 解包可能为 ref 的值</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="title function_">unref</span>(url))</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> (data.<span class="property">value</span> = json))</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> (error.<span class="property">value</span> = err))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(url)) &#123;</span><br><span class="line">    <span class="comment">// 若输入的 URL 是一个 ref，那么启动一个响应式的请求</span></span><br><span class="line">    <span class="title function_">watchEffect</span>(doFetch)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 否则只请求一次</span></span><br><span class="line">    <span class="comment">// 避免监听器的额外开销</span></span><br><span class="line">    <span class="title function_">doFetch</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; data, error &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本的 useFetch() 现在同时可以接收静态的 URL 字符串和 URL 字符串的 ref。当通过 isRef() 检测到 URL 是一个动态 ref 时，它会使用 watchEffect() 启动一个响应式的 effect。该 effect 会立刻执行一次，并在此过程中将 URL 的 ref 作为依赖进行跟踪。当 URL 的 ref 发生改变时，数据就会被重置，并重新请求。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="通过抽取组合式函数改善代码结构"><a href="#通过抽取组合式函数改善代码结构" class="headerlink" title="通过抽取组合式函数改善代码结构"></a>通过抽取组合式函数改善代码结构</h2><p>抽取组合式函数不仅是为了复用，也是为了代码组织。随着组件复杂度的增高，你可能会最终发现组件多得难以查询和理解。组合式 API 会给予你足够的灵活性，让你可以基于逻辑问题将组件代码拆分成更小的函数：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123; useFeatureA &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="keyword">from</span> <span class="string">&#x27;./featureA.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123; useFeatureB &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="keyword">from</span> <span class="string">&#x27;./featureB.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> </span></span><span class="template-variable">&#123; useFeatureC &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="keyword">from</span> <span class="string">&#x27;./featureC.js&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> </span></span><span class="template-variable">&#123; foo, bar &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="title function_">useFeatureA</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> </span></span><span class="template-variable">&#123; baz &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="title function_">useFeatureB</span>(foo)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> </span></span><span class="template-variable">&#123; qux &#125;</span><span class="language-xml"> = useFeatureC(baz)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在某种程度上，你可以将这些提取出的组合式函数看作是可以相互通信的组件范围内的服务。<br>在选项式 API 中使用组合式函数<br>组合式函数必须在 setup() 中调用。且其返回的绑定必须在 setup() 中返回，以便暴露给 this 及其模板：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMouse &#125; <span class="keyword">from</span> <span class="string">&#x27;./mouse.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useFetch &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetch.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMouse</span>()</span><br><span class="line">    <span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useFetch</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; x, y, data, error &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setup() 暴露的属性可以在通过 `this` 访问到</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...其他选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="与其他模式的比较"><a href="#与其他模式的比较" class="headerlink" title="与其他模式的比较"></a>与其他模式的比较</h2><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">和 Mixin 的对比</button></li><li class="tab"><button type="button" data-href="#super-2">和无渲染组件的对比</button></li><li class="tab"><button type="button" data-href="#super-3">和 React Hooks 的对比</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>Vue 2 的用户可能会对 mixins 选项比较熟悉。它也让我们能够把组件逻辑提取到可复用的单元里。然而 mixins 有三个主要的短板：</p><ol><li>不清晰的数据来源：当使用了多个 mixin 时，实例上的数据属性来自哪个 mixin 变得不清晰，这使追溯实现和理解组件行为变得困难。这也是我们推荐在组合式函数中使用 ref + 解构模式的理由：让属性的来源在消费组件时一目了然。</li><li>命名空间冲突：多个来自不同作者的 mixin 可能会注册相同的属性名，造成命名冲突。若使用组合式函数，你可以通过在解构变量时对变量进行重命名来避免相同的键名。</li><li>隐式的跨 mixin 交流：多个 mixin 需要依赖共享的属性名来进行相互作用，这使得它们隐性地耦合在一起。而一个组合式函数的返回值可以作为另一个组合式函数的参数被传入，像普通函数那样。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>在组件插槽一章中，我们讨论过了基于作用域插槽的无渲染组件。我们甚至用它实现了一样的鼠标追踪器示例。<br>组合式函数相对于无渲染组件的主要优势</p><blockquote><p>组合式函数不会产生额外的组件实例开销。当在整个应用中使用时，由无渲染组件产生的额外组件实例会带来无法忽视的性能开销。<br>推荐在纯逻辑复用时使用组合式函数<br>在需要同时复用逻辑和视图布局时使用无渲染组件。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>如果你有 React 的开发经验，你可能注意到组合式函数和自定义 React hooks 非常相似。组合式 API 的一部分灵感正来自于 React hooks，Vue 的组合式函数也的确在逻辑组合能力上与 React hooks 相近。然而，Vue 的组合式函数是基于 Vue 细粒度的响应性系统，这和 React hooks 的执行模型有本质上的不同。这一话题在组合式 API 的常见问题中有更细致的讨论。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="逻辑复用" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>key在React和Vue中的作用</title>
    <link href="https://superq314.github.io/posts/e9daea21/"/>
    <id>https://superq314.github.io/posts/e9daea21/</id>
    <published>2022-10-20T09:12:48.000Z</published>
    <updated>2022-10-20T11:18:51.045Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、虚拟DOM中key的作用：<br>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：<br><img src="/image/key%E5%9C%A8React%E5%92%8CVue%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/1666257319648.png" alt="1666257319648"><br>​ 对比规则：<br>​ (1).旧虚拟DOM中找到了与新虚拟DOM相同的key：<br>​ ①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！<br>​ ②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</p><p>​ (2).旧虚拟DOM中未找到与新虚拟DOM相同的key<br>​ 创建新的真实DOM，随后渲染到到页面。<br>​</p><p>2、用index作为key或者不声明key的时候（此时默认key的value值为index时）可能会引发的问题：</p><p>​ (1).若对数据进行：逆序添加、逆序删除等破坏顺序操作:<br>​ 会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</p><p>​ (2).如果结构中还包含输入类的DOM：<br>​ 会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</p><p>3、开发中如何选择key?:<br>(1).最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。<br>(2).如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>key的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;Vue/js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 遍历数组 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;&#123;<span class="name">p.name</span>&#125;&#125;</span><span class="language-xml">-</span><span class="template-variable">&#123;&#123;<span class="name">p.age</span>&#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">persons</span>:[</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> p=&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">age</span>:<span class="number">40</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>手动搭建模块化webpack开发环境</title>
    <link href="https://superq314.github.io/posts/62be68dc/"/>
    <id>https://superq314.github.io/posts/62be68dc/</id>
    <published>2022-10-20T03:08:59.000Z</published>
    <updated>2022-10-20T06:55:26.535Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>新建文件夹：<code>mkdir react-webpack</code></p><p>打开文件夹：<code>cd react-webpack</code></p><h2 id="快速初始化项目"><a href="#快速初始化项目" class="headerlink" title="快速初始化项目"></a>快速初始化项目</h2><p><code>npm init -y</code></p><p>文件夹中自动生成 package.json 文件</p><h2 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h2><p><code>dist</code>：webpack打包生成的文件于此</p><p><code>src</code>：于此进行开发</p><p><a href="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426195640829-110551594.png"><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426195640829-110551594.png"></a></p><h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p><strong>命令集合</strong></p><p>打包工具：<code>npm i webpack webpack-cli -D</code></p><p>实时编译：<code>npm i webpack-dev-server -D</code></p><p>插 件：<code>npm i html-webpack-plugin -D</code></p><h3 id="🌸打包工具"><a href="#🌸打包工具" class="headerlink" title="🌸打包工具"></a>🌸打包工具</h3><p>命令：<code>npm i webpack webpack-cli -D</code></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>1.webpack.config.js</strong></p><p>设置打包模式：<code>mode: &#39;development&#39;, //必选：development  production</code></p><p><code>mode</code>必须设置。<code>development</code>表明以开发模式进行打包，<code>production</code>用于产品上线的时候打包，可以自己测试下打包结果的区别。</p><p>webpack配置中的一些基本概念建议看下官网<a href="https://www.webpackjs.com/concepts/">webpack官方中文文档</a></p><p><code>webpack4.x</code>中的 <code>entry</code>、<code>output</code>属性可省略（默认入口：<code>src/index.js</code>，默认出口：<code>dist/main.js</code>）</p><p><a href="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426202528411-778250179.png"><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426202528411-778250179.png"></a></p><p><strong>2.package.json添加build</strong></p><p><code>&quot;build&quot;: &quot;webpack&quot;,</code></p><p><a href="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426203443158-1571004375.png"><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426203443158-1571004375.png"></a></p><h4 id="执行打包命令"><a href="#执行打包命令" class="headerlink" title="执行打包命令"></a>执行打包命令</h4><p>经过上面的配置，我们现在可以使用命令 <code>npm run build</code>进行打包，默认入口为 <code>src/index.js</code>。此时 <code>dist</code>文件夹中生成 <code>main.js</code>（默认出口）</p><h3 id="🌸实时编译"><a href="#🌸实时编译" class="headerlink" title="🌸实时编译"></a>🌸实时编译</h3><p>命令：<code>npm i -D webpack-dev-server</code></p><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p><strong>1.package.json添加dev</strong></p><p><code>&quot;dev&quot;:&quot;webpack-dev-server --port 8081 --hot --host 127.0.0.1&quot;</code></p><p>这里建议手打一遍，不要直接复制。我从onenote中复制自己存的这行代码到vscode中居然报错了，找了半天原因，结果自己手打一遍就好了</p><p><a href="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426210617855-446782502.png"><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426210617855-446782502.png"></a></p><p><code>--open</code>：执行命令后打开浏览器。–open iexplore表示打开IE浏览器<br><code>--port 8081</code>：端口8081<br><code>--hot</code>：实现版本大补丁而非重写文件。实现网页无刷新就能执行index.js中更改的代码<br><code>--host</code>：ip地址。默认为localhost<br><code>--contentBase src</code>：指定托管的根目录为src文件夹</p><h4 id="执行实时编译命令"><a href="#执行实时编译命令" class="headerlink" title="执行实时编译命令"></a>执行实时编译命令</h4><p>经过上面的配置，我们现在可以使用命令 <code>npm run dev</code> 进行实时预编译，打包好的main.js托管于内存中，而非根目录中。</p><h4 id="内存托管解释"><a href="#内存托管解释" class="headerlink" title="内存托管解释"></a>内存托管解释</h4><p>假设打包好的main.js放于根目录了，程序员有个随时保存的习惯，如果经常保存的话就会容易损害物理（机械）磁盘。内存比机械磁盘更快，处于性能考虑，将打包好的main.js文件放于内存中，将html放于物理磁盘中。</p><h3 id="🌸webpack-plugin插件"><a href="#🌸webpack-plugin插件" class="headerlink" title="🌸webpack-plugin插件"></a>🌸webpack-plugin插件</h3><p>命令：<code>npm i html-webpack-plugin -D</code></p><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><p><a href="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426213946784-416697885.png"><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200426213946784-416697885.png" alt="img"></a></p><p>此时index.html和main.js都处于内存中，且webpack-plugin会自动将main.js添加到html中。因此此时，index.html中不用写 这句话了</p><p><del><code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code></del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue族谱架构</title>
    <link href="https://superq314.github.io/posts/a97a1a46/"/>
    <id>https://superq314.github.io/posts/a97a1a46/</id>
    <published>2022-10-17T09:55:40.000Z</published>
    <updated>2022-10-24T07:38:50.737Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>静态网站：html 放到服务器，ok了。</li><li>动态网站: 静态网站 + 动态语言 + 链接数据库</li><li>Node.js</li></ul><blockquote><p>nodejs中文网: <a href="http://nodejs.cn/">http://nodejs.cn/</a><br>官方介绍：Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p></blockquote><ul><li>WebPack</li></ul><blockquote><p>WebPack官网：<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a><br>官方介绍：打包所有的样式 脚本 资源 图片</p></blockquote><ul><li>@vue&#x2F;cli-service</li></ul><blockquote><p>脚手架</p></blockquote><ul><li>Babel</li></ul><blockquote><p>Babel官网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a><br>官方介绍：Babel 是一个 JavaScript 编译器。</p></blockquote><ul><li>Eslint</li></ul><blockquote><p>Eslint官网：<a href="https://eslint.org/">https://eslint.org/</a><br>官方介绍：Find and fix problems in your JavaScript code</p></blockquote><p>前台核心基本功</p><ul><li>ES6</li></ul><blockquote><p>ES6官网：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a><br>官方介绍：《ECMAScript 6 入门教程》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。</p></blockquote><ul><li>VUE 2.x</li></ul><blockquote><p>Vue官网：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a><br>官方介绍：Vue是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></blockquote><ul><li>vue-router</li></ul><blockquote><p>vue-router官网：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a><br>官方介绍：Vue Router 是 Vue.js 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。</p></blockquote><ul><li>vuex</li></ul><blockquote><p>vuex官网：<a href="https://vuex.vuejs.org/zh/">https://vuex.vuejs.org/zh/</a><br>官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote><ul><li>Axios</li></ul><blockquote><p>个人介绍：当年的Ajax，如今的Axios</p></blockquote><ul><li>LESS</li></ul><blockquote><p>LESS中文官网：<a href="http://lesscss.cn/">http://lesscss.cn/</a><br>官方介绍：Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。Less 可以运行在 Node 或浏览器端。</p></blockquote><ul><li>VIEW-Design</li></ul><blockquote><p>VIEW-Design官网：<a href="https://www.iviewui.com/">https://www.iviewui.com/</a><br>官方介绍：View UI，即原先的 iView，是一套基于 Vue.js 的开源 UI 组件库，主要服务于 PC 界面的中后台产品。</p></blockquote><p>一般常用拓展库</p><ul><li>Echarts</li></ul><blockquote><p>Echarts官网：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a><br>官方介绍：ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p></blockquote><ul><li>VueTreeSelect</li></ul><blockquote><p>VueTreeSelect官网：<a href="https://vue-treeselect.js.org/">https://vue-treeselect.js.org/</a><br>官方介绍：vue-treeselect is a multi-select component with nested options support for Vue.js.</p></blockquote><ul><li>print-js</li></ul><blockquote><p>print-js官网：<a href="https://printjs.crabbly.com/">https://printjs.crabbly.com/</a><br>官方介绍：A tiny javascript library to help printing from the web.</p></blockquote><ul><li>js-cookie</li></ul><blockquote><p>js-cookie官网：<a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a><br>官方介绍：A simple, lightweight JavaScript API for handling cookies</p></blockquote><ul><li>lodash</li></ul><blockquote><p>lodash官网：<a href="https://www.lodashjs.com/">https://www.lodashjs.com/</a><br>官方介绍：Lodash是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p></blockquote><ul><li>Mockjs</li></ul><blockquote><p>Mockjs官网：<a href="http://mockjs.com/">http://mockjs.com/</a><br>官方介绍：生成随机数据，拦截 Ajax 请求</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vue" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/"/>
    
    <category term="应用规模化" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Vue/%E5%BA%94%E7%94%A8%E8%A7%84%E6%A8%A1%E5%8C%96/"/>
    
    
  </entry>
  
</feed>
