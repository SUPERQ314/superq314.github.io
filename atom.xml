<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>superQ的个人小站</title>
  <icon>https://www.gravatar.com/avatar/53ec4cae8bfa9696385d334042db5c18</icon>
  <subtitle>山海无畏</subtitle>
  <link href="https://superq314.github.io/atom.xml" rel="self"/>
  
  <link href="https://superq314.github.io/"/>
  <updated>2022-09-10T12:31:17.167Z</updated>
  <id>https://superq314.github.io/</id>
  
  <author>
    <name>superQ</name>
    <email>220202090@seu.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器输入url回车之后发生了什么</title>
    <link href="https://superq314.github.io/2022/09/10/computerBasics/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://superq314.github.io/2022/09/10/computerBasics/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2022-09-10T11:23:12.000Z</published>
    <updated>2022-09-10T12:31:17.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><ul><li>URL 解析</li><li>DNS 查询</li><li>TCP 连接</li><li>处理请求</li><li>接受响应</li><li>渲染页面</li><li>URL 解析</li><li>地址解析：</li></ul><p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p><p>HSTS</p><p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：你所不知道的 HSTS。</p><p>其他操作</p><p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p><p>检查缓存</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter.png"></p><h2 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h2><p>基本步骤</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_baisc_process.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">浏览器缓存</button></li><li class="tab"><button type="button" data-href="#super-2">操作系统缓存</button></li><li class="tab"><button type="button" data-href="#super-3">路由器缓存</button></li><li class="tab"><button type="button" data-href="#super-4">ISP DNS 缓存</button></li><li class="tab"><button type="button" data-href="#super-5">根域名服务器查询</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>操作系统也有自己的 DNS 缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>路由器也有自己的缓存。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：<br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_dns.png"></p><blockquote><p>根域名服务器：维基百科<br>需要注意的点</p></blockquote><ol><li>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地 DNS 服务器的过程）</li><li>迭代方式，就是本地 DNS 服务器到根域名服务器查询的方式。</li><li>什么是 DNS 劫持</li><li>前端 dns-prefetch 优化</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h2><p>TCP&#x2F;IP 分为四层，在发送数据时，每层都要对数据进行封装：<br><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_tcp.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">应用层：发送 HTTP 请求</button></li><li class="tab"><button type="button" data-href="#super-2">传输层：TCP 传输报文</button></li><li class="tab"><button type="button" data-href="#super-3">网络层：IP 协议查询 Mac 地址</button></li><li class="tab"><button type="button" data-href="#super-4">链路层：以太网协议</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p><ul><li>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等</li><li>请求主体（其他参数）</li></ul><p>其中需要注意的点：</p><ul><li>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够準确地还原报文信息。<br>在建立连接前，会先进行 TCP 三次握手。</p><blockquote><p>关于 TCP&#x2F;IP 三次握手，网上已经有很多段子和图片生动地描述了。<br>相关知识点：</p><ol><li>SYN 泛洪攻击</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>将数据段打包，并加入源及目标的 IP 地址，并且负责寻找传输路线。</p><p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p><blockquote><p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP&#x2F;IP 中，它位于网络层。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">以太网协议</button></li><li class="tab"><button type="button" data-href="#super-2">Mac 地址</button></li><li class="tab"><button type="button" data-href="#super-3">广播</button></li><li class="tab"><button type="button" data-href="#super-4">服务器接受请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>根据以太网协议将数据分为以 “帧” 为单位的数据包，每一帧分为两个部分：</p><ul><li>标头：数据包的发送者、接受者、数据类型</li><li>数据：数据包具体内容</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>以太网规定了连入网络的所有设备都必须具备 “网卡” 接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p><p>注意：接收方回应是单播。</p><blockquote><p>相关知识点：</p><ol><li>ARP 攻击</li></ol></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>接受过程就是把以上步骤逆转过来，参见上图。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h2><p>大致流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_1.png"></p><p>HTTPD</p><p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p><p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p><p>处理请求</p><p>接受 TCP 报文后，会对连接进行处理，对 HTTP 协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p><ul><li>验证是否配置虚拟主机</li><li>验证虚拟主机是否接受此方法</li><li>验证该用户可以使用该方法（根据 IP 地址、身份信息等）</li></ul><p>重定向</p><p>假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p><blockquote><p>关于更多：详见这篇文章</p></blockquote><p>URL 重写</p><p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js 文件等，则会直接把这个文件返回。</p><p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p><p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p><p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p><h2 id="浏览器接受响应"><a href="#浏览器接受响应" class="headerlink" title="浏览器接受响应"></a>浏览器接受响应</h2><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p><p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p><p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p><p>然后，对响应资源做缓存。</p><p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image 各有不同的解析方式）。</p><h2 id="渲染页面"><a href="#渲染页面" class="headerlink" title="渲染页面"></a>渲染页面</h2><p>浏览器内核</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_broswer.png"></p><p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p><p>基本流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_2.png"></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">HTML 解析</button></li><li class="tab"><button type="button" data-href="#super-2">CSS 解析</button></li><li class="tab"><button type="button" data-href="#super-3">渲染树</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p><p>解析的过程可以分为四个步骤：</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">1. 解码（encoding）</button></li><li class="tab"><button type="button" data-href="#super-2">2. 预解析（pre-parsing）</button></li><li class="tab"><button type="button" data-href="#super-3">3.1 符号化（Tokenization）</button></li><li class="tab"><button type="button" data-href="#super-4">3.2 构建树（tree construction）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如 UTF-8）转换成字符串，也就是 HTML 代码。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p><p>它通过一个状态机去识别符号的状态，比如遇到&lt;，&gt;状态都会产生变化。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><blockquote><p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建DOM对象并把这些符号插入到DOM对象中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web page parsing<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is an example Web page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_html.png"></p><p>浏览器容错进制</p><p>你从来没有在浏览器看过类似” 语法无效” 的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p><p>事件</p><p>当整个解析的过程完成以后，浏览器会通过DOMContentLoaded事件来通知DOM解析完成。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p><p>CSS 匹配规则</p><p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p><p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p><blockquote><p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了display:none的节点。</p></blockquote><p>计算</p><p>通过计算让任何尺寸值都减少到三个可能之一：auto、百分比、px，比如把rem转化为px。</p><p>级联</p><p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做specificity的公式，这个公式会通过：</p><ol><li>标签名、class、id</li><li>是否内联样式</li><li>!important</li></ol><p>然后得出一个权重值，取最高的那个。</p><p>渲染阻塞</p><p>当遇到一个script标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p><p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p><p>所有我们知道：</p><ul><li>CSS 会阻塞 JS 执行</li><li>JS 会阻塞后面的 DOM 解析</li></ul><p>为了避免这种情况，应该以下原则：</p><ul><li>CSS 资源排在 JavaScript 资源前面</li><li>JS 放在 HTML 最底部，也就是 <code>&lt;/body&gt;</code>前</li></ul><p>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：这篇文章</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">佈局与绘製</button></li><li class="tab"><button type="button" data-href="#super-2">合并渲染层</button></li><li class="tab"><button type="button" data-href="#super-3">回流与重绘</button></li><li class="tab"><button type="button" data-href="#super-4">JavaScript 编译执行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p><p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>把以上绘制的所有图片合并，最终输出一张图片。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>回流 (reflow)</p><p>当浏览器发现某个部分发现变化影响了佈局时，需要倒回去重新渲染，会从html标签开始递归往下，重新计算位置和大小。</p><p>reflow 基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p><p>重绘 (repaint)</p><p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p><p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p><p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p><p>比如：</p><ul><li>display:none 会触发回流，而 visibility:hidden 只会触发重绘。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>大致流程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_3.png"></p><p>可以分为三个阶段：</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">词法分析</button></li><li class="tab"><button type="button" data-href="#super-2">预编译</button></li><li class="tab"><button type="button" data-href="#super-3">执行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出 “语法错误”，停止执行。</p><p>几个步骤：</p><ul><li>分词，例如将var a &#x3D; 2，，分成var、a、&#x3D;、2这样的词法单元。</li><li>解析，将词法单元转换成抽象语法树（AST）。</li><li>代码生成，将抽象语法树转换成机器指令。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>JS 有三种运行环境：</p><ul><li>全局环境</li><li>函数环境</li><li>eval</li></ul><p>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p><p>创建执行上下文</p><p>创建执行上下文的过程中，主要做了以下三件事：</p><ul><li>创建变量对象<ul><li>参数、函数、变量</li></ul></li><li>建立作用域链<ul><li>确认当前执行环境是否能访问变量</li></ul></li><li>确定 This 指向</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>JS 线程</p><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/What_happens_when_you_type_an_URL_in_the_browser_and_press_enter_7.png"></p><p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p><blockquote><p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p></blockquote><ul><li>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎</li><li>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行</li><li>定时器触发线程：主要控制setInterval和setTimeout，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。</li><li>HTTP 异步请求线程：通过 XMLHttpRequest 连接后，通过浏览器新开的一个线程，监控 readyState 状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待 JS 引擎线程执行。</li></ul><p>注：浏览器对同一域名的併发连接数是有限的，通常为 6 个。</p><p>宏任务</p><p>分为：</p><ul><li>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务</li><li>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待 JS 引擎主线程上的任务执行完毕时才开始执行，例如异步 Ajax、DOM 事件，setTimeout 等。</li></ul><p>微任务</p><p>微任务是 ES6 和 Node 环境下的，主要 API 有：Promise，process.nextTick。</p><p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p><p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png"></p><p>代码例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 宏任务 异步</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 宏任务 同步</span></span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>) <span class="comment">// 微任务</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>) <span class="comment">// 宏任务 同步</span></span><br></pre></td></tr></table></figure><p>以上代码输出顺序为：1,3,5,4,2</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>chrome调试</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/0-0grammar/chrome%E8%B0%83%E8%AF%95/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/0-0grammar/chrome%E8%B0%83%E8%AF%95/</id>
    <published>2022-09-10T11:14:55.000Z</published>
    <updated>2022-09-10T11:16:26.080Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开调试器F12,或者点击鼠标右键，选择检查或检查属性</p><p>elements[元素]：这里就是html和css了，我们经常在这里进行样式css调试</p><p>console[控制台]：这里是打印器，可以理解为一个记录日志，所有的报错信息会在这里体现</p><p>sources[源代码]：这里是断点调试，也就是debugger，不明的话在你的js里面打上一个debugger试试就知道了，方便按步执行代码，找出代码在那一步出的错</p><p>Network[网络]：这里是http请求的调试器，在这里可以查看所有的http请求，包括你的请求头，请求路径，请求参数，后台返回的数据还有请求的状态等等：</p><p>Performance[性能]：</p><p>Memory[内存]：</p><p>application[应用程序]：这里就是我们说的浏览器缓存了，存放着缓存的数据，缓存分两种</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue实现网易云音乐</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/6Vue/vue%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/6Vue/vue%E5%AE%9E%E7%8E%B0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</id>
    <published>2022-09-10T11:08:45.000Z</published>
    <updated>2022-09-10T11:11:05.008Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="技术基础"><a href="#技术基础" class="headerlink" title="技术基础"></a>技术基础</h2><p>Vue(2.5) + vuex + vue-router + vue-axios +better-scroll + Scss + ES6</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>开发一款移动端webAPP，</p><p>UI界面参考安卓版的网易云音乐，</p><p>flex布局适配常见移动端</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>Vue：用于构建用户界面的 MVVM 框架</p><p>vue-router：为单页面应用提供的路由系统，使用了 Lazy Loading Routes 技术来实现异步加载优化性能</p><p>vuex：Vue 集中状态管理，在多个组件共享某些状态时非常便捷</p><p>vue-lazyload：实现图片懒加载，节省用户流量，优化页面加载速度</p><p>better-scroll：解决移动端各种滚动场景需求的插件，使移动端滑动体验更加流畅</p><p>SCSS：css 预编译处理器</p><p>ES6：ECMAScript 新一代语法，模块化、解构赋值、Promise、Class 等方法非常好用</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>Node.js：利用 Express 搭建的本地测试服务器</p><p>vue-axios：用来请求后端 API 音乐数据</p><p>NeteaseCloudMusicApi：网易云音乐 NodeJS 版 API，提供音乐数据</p><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><p>vue-cli：Vue 脚手架工具，快速初始化项目代码</p><p>eslint：代码风格检查工具，帮助我们规范代码书写（一定要养成良好的代码规范）</p><p>iconfont ：阿里巴巴图标库，</p><p>fastclick ：消除 click 移动游览器 300ms 的延时</p><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>初始加载页面、播放器内核、轮播图（新歌首发、MV首发等）、每日推荐、推荐歌单（左右滑屏）、热榜页面、歌手页面、歌单详情、歌手详情、排行榜详情、搜索页面、播放列表、用户中心等等功能。</p><h3 id="推荐页面"><a href="#推荐页面" class="headerlink" title="推荐页面"></a>推荐页面</h3><p>推荐页分成三个部分，分别是 banner 轮播图、推荐歌单、推荐歌曲，数据都是使用 axios 请求 API 获取得到的，图片都使用 vue-lazyload 实现懒加载。</p><ol><li>轮播图 ：使用 better-scroll 实现，具体可以看这里 Slide 。点击跳转方面只实现歌曲和歌单的跳转，因为暂时只实现了这两个功能。</li><li>推荐歌单，推荐歌曲 ：使用 vuex 管理数据，方便组件之间的数据交互（播放器播放歌曲）。因为数据上还有播放数量，所以就顺便也加上去了。</li></ol><h3 id="排行榜页面"><a href="#排行榜页面" class="headerlink" title="排行榜页面"></a>排行榜页面</h3><p>同样是通过 API 获取到排行榜的数据，但是因为 API 获取到的是排行榜中所有歌曲的数据，所以难免在加载速度上有点慢，后期再看能不能优化一下，加载的慢毕竟太影响用户体验了，别的就没什么了。</p><h3 id="歌手页面"><a href="#歌手页面" class="headerlink" title="歌手页面"></a>歌手页面</h3><p>实现歌手列表的左右联动（这个需要理解理解），因为之前已经写过和这个有关的博客，所以就不多写了，具体可以看我之前的这个笔记移动端字母索引导航。</p><h3 id="歌曲列表组件"><a href="#歌曲列表组件" class="headerlink" title="歌曲列表组件"></a>歌曲列表组件</h3><p>用来显示歌曲列表，在很多的地方都进行了复用，例如：歌单详情页、排行榜详情页、歌手详情页、搜索结果、用户中心等等。</p><ol><li>歌单详情页  ： 通过歌单的 ID 来获取歌单中的歌曲数据，然后还做了一些体验上面的交互，比如上滑显示状态栏然后将状态栏标题变为歌单名，具体可以尝试一下就知道了。</li></ol><p>然后就是复用歌曲列表组建来显示歌曲。</p><ol start="2"><li>排行榜详情、歌手详情  ： 和歌单详情基本上没有什么区别，除了 UI 界面方面有细微的改动（根据不同的内容作出不同的优化）。</li><li>搜索功能</li></ol><p>实现功能：搜索歌手、歌单、歌曲、热门搜索、数据节流、上拉刷新、保存搜索记录。</p><p>通过关键字请求 API 获取搜索数据，显示歌手、歌单、歌曲。</p><p>实现了上刷新，因为搜索可以设置请求数据的条数，所以可以用来实现上刷新的功能。</p><p>通过节流函数实现数据节流，通过 localstorage 存储搜索数据。</p><ol start="4"><li>用户中心 ：将在本地存储的数据显示出来，方便用户使用，后期准备添加更多功能。</li></ol><h3 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h3><p>最最最重要的组件，毕竟是个音乐播放器，不能放歌那啥都是扯淡了。</p><p>实现功能：顺序播放、单曲循环、随机播放、收藏等。</p><p>播放、暂停使用 HTML5 的 audio 实现。</p><p>数据、播放状态、播放历史、习惯歌曲等方面使用了 vuex 来进行管理，因为数据太多，组件直接传递的话是会死人的，所以还是老老实实的用 vuex 吧，数据之前的传递真的很方便。</p><p>图标使用 iconfont 阿里巴巴图标库，中间的唱片旋转动画使用了 animation 实现。</p><p>歌词部分获取到网易的歌词数据，然后使用第三方库 lyric-parser 进行处理。实现显示歌词、拖动进度条歌词同步滚动、歌词跟随歌曲进度高亮。</p><p>通过 localstorage 存储喜欢歌曲、播放历史数据。</p><p>audio 标签在移动端不能够自动播放的问题</p><p>电脑端是没有这个问题的，这个问题真的是让我很头大，最后是用了很鬼畜的方法解决了（使用 addEventListener 监听 touchend 事件，然后在回调函数中让 audio 播放一次，具体看 App.vue 文件，注释有写）。</p><h3 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h3><p>显示和管理当前播放歌曲，可以用来删除列表中的歌曲、以及选择播放歌曲。</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>优化排行榜加载速度</li><li>优化重复代码</li><li>增加歌曲评论</li><li>增加 MV、电台 功能</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>创建vue项目过程</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/6Vue/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/6Vue/%E5%88%9B%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E8%BF%87%E7%A8%8B/</id>
    <published>2022-09-10T11:00:37.000Z</published>
    <updated>2022-09-10T11:07:24.239Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="启动运行vue-js项目（维护他人的项目）的方法"><a href="#启动运行vue-js项目（维护他人的项目）的方法" class="headerlink" title="启动运行vue.js项目（维护他人的项目）的方法"></a>启动运行vue.js项目（维护他人的项目）的方法</h2><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><p>由于npm有些资源被屏蔽或者是国外资源的原因，经常会导致用npm安装依赖包的时候失败，所以还需要npm的国内镜像—cnpm<br>在命令行中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> cnpm <span class="literal">--registry</span>=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>webpack是一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less&#x2F;sass）、图片等都作为模块来使用和处理。 webpack 的核心是 依赖分析,把依赖分析出来了，其他都是细枝末节。</p><h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure><p>vue-cli是vue.js的脚手架，用于自动生成vue.js+webpack的项目模板，这个过程会耗时十几秒，等走完就好；好了，到此整个环境就搭建好了</p><h3 id="cd-x2F-项目名称"><a href="#cd-x2F-项目名称" class="headerlink" title="cd &#x2F;项目名称"></a>cd &#x2F;项目名称</h3><p>下面就是运行项目了，cd &#x2F;项目名称，进入项目。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ShopApp</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>进入项目之后安装依赖，安装成功</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>注意：在这一步可能会出现这样的错误；因为你打开的是别人的项目，项目之中肯定有 node_modules模块，那么先删除掉，在执行npm install命令</p><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>一切准备就绪，启动项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="自动启动浏览器就会打开项目了"><a href="#自动启动浏览器就会打开项目了" class="headerlink" title="自动启动浏览器就会打开项目了"></a>自动启动浏览器就会打开项目了</h3><p>在浏览器中输入<a href="http://localhost:8080/#/%EF%BC%9B%E8%BF%9B%E5%85%A5%E9%A1%B9%E7%9B%AE%E9%A6%96%E9%A1%B5">http://localhost:8080/#/；进入项目首页</a></p><p>若是要访问其他页面，直接在#后面加上组件名称即可：例如<a href="http://localhost:8080/#/adjustIntegral">http://localhost:8080/#/adjustIntegral</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>拓展内容-自学之路</title>
    <link href="https://superq314.github.io/2022/09/10/frontEnd/expandContent/%E6%8B%93%E5%B1%95%E5%86%85%E5%AE%B9-%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF/"/>
    <id>https://superq314.github.io/2022/09/10/frontEnd/expandContent/%E6%8B%93%E5%B1%95%E5%86%85%E5%AE%B9-%E8%87%AA%E5%AD%A6%E4%B9%8B%E8%B7%AF/</id>
    <published>2022-09-10T10:55:52.000Z</published>
    <updated>2022-09-10T10:57:57.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTTP理论、交互通信原理、服务端http服务器搭建、MIME、报文端口、监听抓包、网络业务模型、代理缓存、cookie session 鉴权认证、安全加密、Token、JWT、oauth、session管理、RESTful接口设计、协商合约、资源标识等原理规则性知识，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WebStorage</title>
    <link href="https://superq314.github.io/2022/09/09/WebStorage/"/>
    <id>https://superq314.github.io/2022/09/09/WebStorage/</id>
    <published>2022-09-09T09:56:20.000Z</published>
    <updated>2022-09-09T10:08:11.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="Cookie概述"><a href="#Cookie概述" class="headerlink" title="Cookie概述"></a>Cookie概述</h2><p>Cookie 是一些数据，存储于你电脑上的文本文件中，当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息，Cookie 的作用就是用于解决 “如何记录客户端的用户信息”：</p><p>当用户访问 web 页面时，它的名字可以记录在 cookie 中。<br>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。<br>Cookie 以名&#x2F;值对形式存储，如下所示：<br><code>username=zhangsan</code><br>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中，服务端通过这种方式来获取用户的信息。</p><p>JavaScript 可以使用 document.cookie 属性来创建 、读取、及删除 Cookie。</p><h2 id="Cookie创建"><a href="#Cookie创建" class="headerlink" title="Cookie创建"></a>Cookie创建</h2><p>JavaScript 中，创建 cookie 如下所示：<br><code>document.cookie = &quot;username=zhangsan&quot;;</code><br>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除。<br><code>document.cookie = &quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;</code><br>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。<br><code>document.cookie = &quot;username=zhangsan; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;</code></p><h2 id="Cookie读取"><a href="#Cookie读取" class="headerlink" title="Cookie读取"></a>Cookie读取</h2><p>JavaScript 中，读取 cookie 如下所示：</p><p>document.cookie 将以字符串的方式返回所有的 cookie，类型格式： cookie1&#x3D;value; cookie2&#x3D;value; cookie3&#x3D;value;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f5f050ac3395ad2d8e04a83f52b9f17.png" alt="image-20201023124113003"></p><h2 id="Cookie修改"><a href="#Cookie修改" class="headerlink" title="Cookie修改"></a>Cookie修改</h2><p>JavaScript 中，修改 cookie 如下所示：</p><p>使用 document.cookie 将旧的 cookie 将被覆盖就是修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=lisi&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fe094b63b05824c69ed5147e180b298b.png" alt="image-20201023124645689"></p><h2 id="Cookie删除"><a href="#Cookie删除" class="headerlink" title="Cookie删除"></a>Cookie删除</h2><p>JavaScript 中，删除 cookie 如下所示：</p><p>删除 cookie 非常简单，您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=zhangsan&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> cookies = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cookies);</span><br></pre></td></tr></table></figure><h2 id="Cookie值设置函数"><a href="#Cookie值设置函数" class="headerlink" title="Cookie值设置函数"></a>Cookie值设置函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Cookie值设置函数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cvalue    cookie值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> exdays    过期天数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">cname, cvalue, exdays</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">d.<span class="title function_">setTime</span>(d.<span class="title function_">getTime</span>() + (exdays * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">var</span> expires = <span class="string">&quot;expires=&quot;</span> + d.<span class="title function_">toGMTString</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = cname + <span class="string">&quot;=&quot;</span> + cvalue + <span class="string">&quot;; &quot;</span> + expires;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cookie值获取函数"><a href="#Cookie值获取函数" class="headerlink" title="Cookie值获取函数"></a>Cookie值获取函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Cookie值获取函数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> cname     cookie名称</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">cname</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = cname + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> ca = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ca.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = ca[i].<span class="title function_">trim</span>();</span><br><span class="line">        <span class="keyword">if</span> (c.<span class="title function_">indexOf</span>(name) == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> c.<span class="title function_">substring</span>(name.<span class="property">length</span>, c.<span class="property">length</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h1><h2 id="WebStorage概述"><a href="#WebStorage概述" class="headerlink" title="WebStorage概述"></a>WebStorage概述</h2><p>WebStorage是HTML5中本地存储的解决方案之一，在HTML5的WebStorage概念引入之前除去IE User Data、Flash Cookie、Google Gears等看名字就不靠谱的解决方案，浏览器兼容的本地存储方案只有使用Cookie。有同学可能会问，既然有了Cookie本地存储，为什么还要引入WebStorage的概念？那就要说一说Cookie的缺陷了：</p><p>数据大小：作为存储容器，Cookie的大小限制在4KB左右这是非常坑爹的，尤其对于现在复杂的业务逻辑需求，4KB的容量除了存储一些配置字段还简单单值信息，对于绝大部分开发者来说真的不知指望什么了。<br>安全性问题：由于在HTTP请求中的Cookie是明文传递的（HTTPS不是），带来的安全性问题还是很大的。<br>网络负担：我们知道Cookie会被附加在每个HTTP请求中，在HttpRequest和HttpResponse的header中都是要被传输的，所以无形中增加了一些不必要的流量损失。<br>虽然WebStorage是HTML5新增的本地存储解决方案之一，但并不是为了取代Cookie而制定的标准，Cookie作为HTTP协议的一部分用来处理客户端和服务器通信是不可或缺的，session正是依赖于实现的客户端状态保持。WebStorage的意图在于解决本来不应该Cookie做，却不得不用Cookie的本地存储的应用场景。</p><h2 id="WebStorage分类"><a href="#WebStorage分类" class="headerlink" title="WebStorage分类"></a>WebStorage分类</h2><p>Web Storage又分为两种： sessionStorage 和localStorage ，即这两个是Storage的一个实例。从字面意思就可以很清楚的看出来，sessionStorage将数据保存在session中，浏览器关闭也就没了；而localStorage则一直将数据保存在客户端本地； 不管是sessionStorage，还是localStorage，使用的API都相同。</p><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理，低版本IE可以使用json2.js</p><h2 id="localStorage方法"><a href="#localStorage方法" class="headerlink" title="localStorage方法"></a>localStorage方法</h2><p>对象介绍：</p><p>localStorage在本地永久性存储数据，除非显式将其删除或清空。</p><p>常见方法：</p><p>保存单个数据：localStorage.setItem(key,value);<br>读取单个数据：localStorage.getItem(key);<br>删除单个数据：localStorage.removeItem(key);<br>删除所有数据：localStorage.clear();<br>获取某个索引的key：localStorage.key(index);<br>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age=&quot;</span> + <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sex=&quot;</span> + <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代localStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="variable language_">localStorage</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + <span class="variable language_">localStorage</span>[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代localStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">localStorage</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="variable language_">localStorage</span>.<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="keyword">var</span> value = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>控制台：<br><img src="https://img-blog.csdnimg.cn/img_convert/61686f1b890e4aed66a29ca7b99fb017.png" alt="image-20201023220221557"></p><h2 id="sessionStorage方法"><a href="#sessionStorage方法" class="headerlink" title="sessionStorage方法"></a>sessionStorage方法</h2><p>对象介绍：</p><p>sessionStorage对象存储特定于某个对话的数据，也就是它的生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了。存储在sessionStorage中的数据可以跨越页面刷新而存在，同时如果浏览器支持，浏览器崩溃并重启之后依然可以使用（注意：Firefox和Weblit都支持，IE则不行）。</p><p>因为sessionStorage对象绑定于某个服务器会话，所以当文件在本地运行的时候是不可用的。存储在sessionStorage中的数据只能由最初给对象存储数据的页面访问到，所以对多页面应用有限制。</p><p>不同浏览器写入数据方法略有不同。Firefox和Webkit实现了同步写入，所以添加到存储空间中的数据是立刻被提交的。而IE的实现则是异步写入数据，所以在设置数据和将数据实际写入磁盘之间可能有一些延迟。</p><p>常见方法：</p><p>保存单个数据：sessionStorage.setItem(key,value);<br>读取单个数据：sessionStorage.getItem(key);<br>删除单个数据：sessionStorage.removeItem(key);<br>删除所有数据：sessionStorage.clear();<br>获取某个索引的key：sessionStorage.key(index);<br>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除单个数据</span></span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存两个数据</span></span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">sessionStorage.<span class="title function_">setItem</span>(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age=&quot;</span> + sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sex=&quot;</span> + sessionStorage.<span class="title function_">getItem</span>(<span class="string">&quot;sex&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in循环来迭代sessionStorage中的键值对、属性和方法：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> sessionStorage) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + sessionStorage[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for循环来迭代sessionStorage中的键值对：</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sessionStorage.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = sessionStorage.<span class="title function_">key</span>(i);</span><br><span class="line">    <span class="keyword">var</span> value = sessionStorage.<span class="title function_">getItem</span>(key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p>控制台：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1325a4d3c63e875d47b815eae84a29ac.png" alt="image-20201023220326391"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="https://superq314.github.io/2022/09/09/JSON/"/>
    <id>https://superq314.github.io/2022/09/09/JSON/</id>
    <published>2022-09-09T09:55:43.000Z</published>
    <updated>2022-09-09T10:11:58.954Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JSON概述"><a href="#JSON概述" class="headerlink" title="JSON概述"></a>JSON概述</h2><p>JSON：JavaScript Object Notation（JavaScript 对象标记法），它是一种存储和交换数据的语法。</p><p>当数据在浏览器与服务器之间进行交换时，这些数据只能是文本，JSON 属于文本并且我们能够把任何 JavaScript 对象转换为 JSON，然后将 JSON 发送到服务器。我们也能把从服务器接收到的任何 JSON 转换为 JavaScript 对象。以这样的方式，我们能够把数据作为 JavaScript 对象来处理，无需复杂的解析和转译。</p><h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h2><p>在json中，每一个数据项，都是由一个键值对（或者说是名值对）组成的，但是键必须是字符串，且由双引号包围，而值必须是以下数据类型之一：</p><ul><li>字符串（在 JSON 中，字符串值必须由双引号编写）</li><li>数字</li><li>对象（JSON 对象）</li><li>数组</li><li>布尔</li><li>null</li></ul><p>JSON 的值不可以是以下数据类型之一：</p><ul><li>函数</li><li>日期</li><li>undefined</li></ul><p>因为 JSON 语法由 JavaScript 对象标记法衍生而来，所以很少需要其它额外的软件来处理 JavaScript 中的 JSON。</p><p>通过 JavaScript，您能够创建对象并向其分配数据，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;BeiJing&quot;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d3060f7c44592e4b2e269ec2f290155a.png" alt="image-20201023091704109"></p><h2 id="JSON数据类型"><a href="#JSON数据类型" class="headerlink" title="JSON数据类型"></a>JSON数据类型</h2><h3 id="JSON-字符串"><a href="#JSON-字符串" class="headerlink" title="JSON 字符串"></a>JSON 字符串</h3><p>JSON 中的字符串必须用双引号包围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-数字"><a href="#JSON-数字" class="headerlink" title="JSON 数字"></a>JSON 数字</h3><p>JSON 中的数字必须是整数或浮点数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p>JSON 中的值可以是对象，JSON 中作为值的对象必须遵守与 JSON 对象相同的规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;employee&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bill Gates&quot;</span>, </span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">62</span>, </span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;Seattle&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>JSON 中的值可以是数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;employees&quot;</span>: [<span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;Steve&quot;</span>, <span class="string">&quot;David&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-布尔"><a href="#JSON-布尔" class="headerlink" title="JSON 布尔"></a>JSON 布尔</h3><p>JSON 中的值可以是 true&#x2F;false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;sale&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-null"><a href="#JSON-null" class="headerlink" title="JSON null"></a>JSON null</h3><p>JSON 中的值可以是 null。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;middlename&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON字符串转JS对象"><a href="#JSON字符串转JS对象" class="headerlink" title="JSON字符串转JS对象"></a>JSON字符串转JS对象</h2><p>JSON.parse()：可以将以JSON字符串转换为JS对象，它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回</p><p>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/75043196321febfa7ff2044a01c36251.png" alt="image-20201023093124404"></p><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p><h2 id="JS对象转JSON字符串"><a href="#JS对象转JSON字符串" class="headerlink" title="JS对象转JSON字符串"></a>JS对象转JSON字符串</h2><p>JSON.stringify()：可以将一个JS对象转换为JSON字符串，需要一个js对象作为参数，会返回一个JSON字符串</p><p>案例演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;猪八戒&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f7dc872335de8f09109ea0c9b9f798b4.png" alt="image-20201023093346336"></p><p>注意 ：JSON这个对象在IE7及以下的浏览器中不支持，所以在这些浏览器中调用时会报错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="https://superq314.github.io/2022/09/06/frontEnd/3JavaScript/2functionalProgramming/function/%E5%9F%BA%E7%A1%80/"/>
    <id>https://superq314.github.io/2022/09/06/frontEnd/3JavaScript/2functionalProgramming/function/%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-06T13:35:46.000Z</published>
    <updated>2022-09-07T00:44:36.129Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>underscorejs源码分析</title>
    <link href="https://superq314.github.io/2022/09/05/frontEnd/3JavaScript/2functionalProgramming/function/underscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://superq314.github.io/2022/09/05/frontEnd/3JavaScript/2functionalProgramming/function/underscorejs%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-09-05T02:35:51.000Z</published>
    <updated>2022-09-05T06:55:40.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="java的Stream流式编程"><a href="#java的Stream流式编程" class="headerlink" title="java的Stream流式编程"></a>java的Stream流式编程</h2><ul><li>流式处理<br>流是一系列数据项，一次只生成一项。程序可以从输入流中一个一个读取数据项，然后以同样的方式将数据项写入输出流。一个程序的输出流很可能是另一个程序的输入流。</li><li>流的特点<br>元素序列——就像集合一样，流也提供了一个接口，可以访问特定元素类型的一组有序值。集合讲的是数据，流讲的是计算。<br><code>menu.stream().filter(d -&gt; getCalories &gt; 300).map(Dish::getName);</code></li><li>数据处理操作<br>流的数据处理功能支持类似于数据库的操作，以及函数式编程语言中的常用操作，如filter、map、reduce、find、match、sort等。流操作可以顺序执行，也可并行执行。</li></ul><h2 id="Underscore结构"><a href="#Underscore结构" class="headerlink" title="Underscore结构"></a>Underscore结构</h2><h3 id="作用域包裹"><a href="#作用域包裹" class="headerlink" title="作用域包裹"></a>作用域包裹</h3><p>与其他第三库一样，Underscore 也通过<strong>立即执行函数</strong>来包裹自己的业务逻辑。</p><p>目的</p><ul><li>避免全局污染：所有库的逻辑，库所定义和使用的变量全部被封装到了该函数的作用域中。</li><li>隐私保护：但凡在立即执行函数中声明的函数、变量等，除非是自己想暴露，否则绝无可能在外部获得。<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// ...执行逻辑</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="_对象"></a>_对象</h3><p>underscore 有下划线的意思，所以 underscore 通过一个下划线变量 _ 来标识自身。</p><p>注意：<br>_是一个函数对象，之后所有的 api 都会被挂载到这个到对象上，如 _.each, _.map 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> _)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_</span>(obj);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wrapped</span> = obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="面向对象风格支持"><a href="#面向对象风格支持" class="headerlink" title="面向对象风格支持"></a>面向对象风格支持</h2><h3 id=""><a href="#" class="headerlink" title="_()"></a>_()</h3><p>虽然Underscore推崇函数式编程，但也支持面向对象风格的函数调用，仅需要通过 _() 来包裹对象即可。</p><p>当我们进行如下调用时：<br><code>_([2,3,4])</code><br>会创建一个新的underscore对象（从而能够调用underscore提供的方法），并在this._wrapped中存储传入的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> _) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">instanceof</span> _)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">_</span>(obj);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wrapped</span> = obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="literal">_</span>.mixin = <span class="function"><span class="keyword">function</span> </span>(obj) &#123;</span><br><span class="line">    <span class="literal">_</span>.each(<span class="literal">_</span>.<span class="keyword">function</span>(obj), <span class="function"><span class="keyword">function</span></span>(name) &#123;</span><br><span class="line">        <span class="keyword">var</span> func = <span class="literal">_</span>[name] = obj[name];</span><br><span class="line">        <span class="literal">_</span>.prototype[name] = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">            <span class="keyword">var</span> args = [<span class="built_in">this</span>._wrapped];</span><br><span class="line">            push.apply(args, arguments);</span><br><span class="line">            <span class="keyword">return</span> chain(<span class="built_in">this</span>, func.apply(..., args));</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">_</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mixin（混入）模式是增加代码复用度的一个广泛使用的设计模式。<br>_.mixin(obj)：为 underscore 对象混入 obj 具有的功能。</p><h2 id="链接式调用"><a href="#链接式调用" class="headerlink" title="链接式调用"></a>链接式调用</h2><h3 id="链接式调用-1"><a href="#链接式调用-1" class="headerlink" title="链接式调用"></a>链接式调用</h3><ul><li>jQuery链接式调用。<br>  <code>$(&#39;.div&#39;).css(&#39;color&#39;, &#39;red&#39;).show();</code></li><li>想要实现链式调用，通常我们会在支持链式调用的函数中返回对象本身。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">RULES</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">x</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(x);<span class="keyword">return</span> <span class="variable language_">this</span>;&#125;,</span><br><span class="line">    <span class="attr">mult</span>: <span class="keyword">function</span> (<span class="params">y</span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(y);<span class="keyword">return</span> <span class="variable language_">this</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable constant_">RULES</span>.<span class="title function_">add</span>(<span class="number">4</span>).<span class="title function_">mult</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li><li>但是，这样做并不优雅，这需要我们手动地在函数中添加 return this 语句。更好的做法是我们创建一个通用函数，它能为指定的对象方法增加链式调用机制。</li></ul><h3 id="chain"><a href="#chain" class="headerlink" title="_.chain()"></a>_.chain()</h3><ul><li><em>.chain(obj)：为 underscore 对象的方法增加链式调用能力。</em></li><li>.chain 源码如下:  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_.<span class="property">chain</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="title function_">_</span>(obj);</span><br><span class="line">    instance.<span class="property">_chain</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>underscore 还提供了一个帮助函数 result，该函数将会判断方法调用结果，如果该方法的调用者被标识了需要链化，则链化当前的方法执行结果。  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chainResult = <span class="keyword">function</span> (<span class="params">instance, obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance.<span class="property">_chain</span> ? <span class="title function_">_</span>(obj).<span class="property">chain</span>:obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>自定义404界面</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/</id>
    <published>2022-09-02T13:38:01.277Z</published>
    <updated>2022-09-02T13:41:37.823Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="找到你中意的404页面"><a href="#找到你中意的404页面" class="headerlink" title="找到你中意的404页面"></a>找到你中意的404页面</h3><p>推荐一款：<a href="https://404.life/">https://404.life</a></p><p>预览保存，如果你看到其他喜欢的页面如何F12扒页面我就不教咯~</p><h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><h4 id="把css和js放在博客下"><a href="#把css和js放在博客下" class="headerlink" title="把css和js放在博客下"></a>把css和js放在博客下</h4><p>我是放在这儿的，你也可以放在github，用jsd加速。</p><p><img src="https://img-blog.csdnimg.cn/20200518185047670.png" alt="在这里插入图片描述"></p><h4 id="新建404-html"><a href="#新建404-html" class="headerlink" title="新建404.html"></a>新建404.html</h4><p>路径是在：<code>博客\source\404.html</code>，它和 <code>_post</code>同级。<br>修改页面内容。（注意css的引用路径）</p><p><img src="https://img-blog.csdnimg.cn/20200518185231776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="设置404跳过渲染：-config-yml"><a href="#设置404跳过渲染：-config-yml" class="headerlink" title="设置404跳过渲染：_config.yml"></a>设置404跳过渲染：_config.yml</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render: ##跳过指定渲染，忽略文章skip_render: <span class="string">&quot;_posts/hello-world.md&quot;</span></span><br><span class="line">  - <span class="number">404.</span>html</span><br></pre></td></tr></table></figure><p>页面效果：</p><p><img src="https://img-blog.csdnimg.cn/20200518185317300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>tips:butterfly主题可以关掉默认的404页面</p><p><img src="https://img-blog.csdnimg.cn/20200518185455559.png" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>友链页面优化</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-02T13:27:46.438Z</published>
    <updated>2022-09-02T13:37:47.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>默认：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113224158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>优化：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113308946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考链接：<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo关于Butterfly的一些小修改</a></p><h3 id="修改-themes-Butterfly-layout-flink-pug渲染样式"><a href="#修改-themes-Butterfly-layout-flink-pug渲染样式" class="headerlink" title="修改 themes\Butterfly\layout\flink.pug渲染样式"></a>修改 <code>themes\Butterfly\layout\flink.pug</code>渲染样式</h3><p>（ctrl+&#x2F;注释掉原来的内容，将下面添加进去：）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># page</span><br><span class="line">  .flink  # article-container</span><br><span class="line">    each i <span class="keyword">in</span> site.data.links</span><br><span class="line">      h2= i.class_name</span><br><span class="line">      .post-cards</span><br><span class="line">        .md-links</span><br><span class="line">          each item <span class="keyword">in</span> i.link_list</span><br><span class="line">            .md-links-item(<span class="built_in">style</span>= item.<span class="built_in">color</span> ? `--primary-<span class="built_in">color</span>:$&#123;item.<span class="built_in">color</span>&#125;;<span class="built_in">border</span>-<span class="built_in">width</span>:$&#123;item.<span class="built_in">width</span>&#125;;<span class="built_in">border</span>-<span class="built_in">style</span>:$&#123;item.<span class="built_in">style</span>&#125;;<span class="built_in">animation</span>: $&#123;item.custom&#125; $&#123;item.<span class="built_in">time</span>&#125; infinite alternate; <span class="built_in">background</span>:$&#123;item.<span class="built_in">background</span>&#125;` : &#x27;<span class="built_in">border</span>-<span class="built_in">width</span>:<span class="number">0px</span>;<span class="built_in">border</span>-<span class="built_in">style</span>:solid;<span class="built_in">animation</span>: link_custom <span class="number">0s</span> infinite alternate;<span class="built_in">background</span>:<span class="number">0</span>&#x27;)</span><br><span class="line">              a.customcolor(href=item.link  <span class="built_in">title</span>=item.name target=<span class="string">&quot;_blank&quot;</span> rel=item.<span class="built_in">remove</span> ? <span class="string">&quot;external nofollow&quot;</span> : <span class="string">&quot;&quot;</span> <span class="built_in">style</span>=item.namecolor ? `--namecolor:$&#123;item.namecolor&#125;` : &#x27;&#x27;)</span><br><span class="line">                <span class="keyword">if</span> theme.lazyload.enable</span><br><span class="line">                  img.lazyload(data-src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name,<span class="built_in">style</span>=item.rotate ? `--primary-rotate:$&#123;item.rotate&#125;;--autotime:$&#123;item.autotime&#125;;` : &#x27;--primary-rotate:<span class="number">0deg</span>&#x27; class=item.autorotate ? `$&#123;item.autorotate&#125;` : &#x27;&#x27;)</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                  img(src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name )</span><br><span class="line">                .md-links-<span class="built_in">title</span>= item.name</span><br><span class="line">                .md-links-des= item.descr</span><br><span class="line">    != page.<span class="built_in">content</span></span><br><span class="line">  <span class="keyword">if</span> page.comments !== <span class="literal">false</span></span><br><span class="line">    include includes/comments/index.pug</span><br></pre></td></tr></table></figure><h3 id="添加css样式，外链"><a href="#添加css样式，外链" class="headerlink" title="添加css样式，外链"></a>添加css样式，外链</h3><p>（ctrl+F全局搜索 css: ，并添加外链 ）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- https:<span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>sviptzk<span class="regexp">/HexoStaticFile@master/</span>Hexo<span class="regexp">/css/</span>flink.min.css</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020042311371055.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>在link.yml里写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">姓名</span></span><br><span class="line"><span class="attr">link:</span> <span class="string">地址</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">头像</span></span><br><span class="line"><span class="attr">descr:</span> <span class="string">描述</span></span><br><span class="line"><span class="comment"># 边框大小 默认为0</span></span><br><span class="line"><span class="attr">width:</span> <span class="string">0px</span></span><br><span class="line"><span class="comment"># 边框样式 默认 solid</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">solid</span></span><br><span class="line"><span class="comment"># 边框颜色 默认淡蓝色 #49b1f5</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment"># 自动旋转 可选值 flash（闪现） link_custom（单色呼吸灯） link_custom1（彩色呼吸灯）</span></span><br><span class="line"><span class="attr">custom:</span> <span class="string">link_custom</span></span><br><span class="line"><span class="comment"># 动画时长设定，默认为0</span></span><br><span class="line"><span class="attr">time:</span> <span class="string">4s</span></span><br><span class="line"><span class="comment"># name的颜色</span></span><br><span class="line"><span class="attr">namecolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># descr的颜色</span></span><br><span class="line"><span class="attr">descolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line"><span class="attr">background:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 鼠标悬停旋转角度</span></span><br><span class="line"><span class="attr">rotate:</span> <span class="string">360deg</span></span><br><span class="line"><span class="comment"># 自动旋转 latuo左旋转 rauto右旋转</span></span><br><span class="line"><span class="attr">autorotate:</span> <span class="string">&quot;lauto&quot;</span></span><br><span class="line"><span class="comment"># 旋转的周期（时长）</span></span><br><span class="line"><span class="attr">autotime:</span> <span class="string">0s</span></span><br><span class="line"><span class="comment">#移除此链接的权重 0为否 非0为移除</span></span><br><span class="line"><span class="attr">remove:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>添加天气小部件</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/</id>
    <published>2022-09-02T07:25:23.976Z</published>
    <updated>2022-09-02T13:21:18.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>电脑端<br><img src="https://img-blog.csdnimg.cn/img_convert/7f5f29b374a476be60a5bdc97aa9d0c9.png"><br>手机端<br><img src="https://img-blog.csdnimg.cn/img_convert/30f3b2d2d678c6ea3afede3b51de3552.png"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="申请天气API"><a href="#申请天气API" class="headerlink" title="申请天气API"></a>申请天气API</h3><p>国内天气API有多种，此处推荐和风天气，如果第一次使用和风天气</p><p>首先，在官网注册账号，<a href="https://id.qweather.com/#/register?redirect=https%3A%2F%2Fconsole.qweather.com">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/0ef8012a413fb671007f3df28c642249.png" alt="img"></p><p>申请账号并登录后，到和风天气开发平台创建一个简约插件，<a href="https://widget.qweather.com/create-simple">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/d4133d6ab5b989d8c1298dcf6f129ab2.png" alt="img"></p><p>  配置插件的相关属性，首先，您应该为您的插件取一个名字，内容属性均可以自定义。</p><p>注意：为了确保天气小部件的正常显示，这里选择固定在浏览器中，具体位置后续在调节。<br><img src="https://img-blog.csdnimg.cn/img_convert/fbd29cde597ca0071fe9efa5e78968e4.png" alt="img"></p><p>设置完成后，点击下面的生成代码即可，生成的代码如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;he-plugin-simple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable constant_">WIDGET</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;01234&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;10px 10px 10px 10px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;0&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;left&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;left&quot;</span>: <span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;top&quot;</span>: <span class="string">&quot;10&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;个人key&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加div"><a href="#添加div" class="headerlink" title="添加div"></a>添加div</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\layout\includes\header</code>目录下的 <code>nav.pug</code>文件中添加以下内容。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">&quot;he-plugin-simple&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>也可以写成这种形式 <code>#he-plugin-simple</code></p></blockquote><h3 id="添加weather-js"><a href="#添加weather-js" class="headerlink" title="添加weather.js"></a>添加weather.js</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\source\js</code>目录下添加 <code>weather.js</code>文件，并填入以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WIDGET</span> = &#123;</span><br><span class="line">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;01234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span><br><span class="line">    <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;left&quot;</span>: <span class="string">&quot;125&quot;</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;你的key&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inject引入"><a href="#Inject引入" class="headerlink" title="Inject引入"></a>Inject引入</h3><p>在配置文件 <code>_config.butterfly</code>的 <code>inject</code>属性中引入以下代码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/font_3332915_ymmoy7wnkg.css&quot;&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;themes/butterfly/source/css/iconfont.css&quot;&gt;`</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># -`&lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;`&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;60198&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-autoplay=&quot;true&quot; data-listfolded=&quot;true&quot;&gt;` `&lt;/div&gt;`&#x27;</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在终端输入</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><ul><li>运行博客后，调试<code>left</code>和<code>top</code>属性，使天气小部件显示在合适位置。</li><li>前端调试后，记修改<code>weather.js</code>文件中的<code>left</code>、<code>top</code>属性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>代码性能指标</title>
    <link href="https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/2functionalProgramming/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/2functionalProgramming/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
    <published>2022-09-02T05:49:41.021Z</published>
    <updated>2022-09-05T01:46:35.231Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h2><p>定义：代码抗击风险的能力</p><p>目的：</p><ul><li>避免和程序无关的因素，导致代码报错</li><li>快速给出问题反馈</li><li>不至于因为非必要性bug，而导致程序执行中断</li></ul><p>做法</p><ul><li>参数做好默认值，做好检测</li><li>程序做好意外情况处理</li></ul><h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><p>定义：代码阅读起来很清楚</p><p>目的</p><ul><li>代码结构清晰</li><li>便于他人阅读</li></ul><p>方法</p><ul><li>优化丑陋结构<ul><li>if-else分支过长&#x3D;&#x3D;&gt; 策略模式、状态</li><li>分支嵌套</li><li>回调地狱 &#x3D;&#x3D;&gt; promise、async</li></ul></li><li>遵循命令规范<ul><li>常量名<strong>全部大写</strong></li><li>类名的<strong>首字母大写</strong></li><li>局部变量名以<strong>下划线开头</strong></li></ul></li><li>及时进行注释</li></ul><h2 id="可复用性"><a href="#可复用性" class="headerlink" title="可复用性"></a>可复用性</h2><p>定义：重复利用</p><p>目的</p><ul><li>无需重复书写</li><li>减少代码量</li></ul><p>做法：</p><ul><li>桥接模式</li><li>享元模式</li><li>函数式编程</li><li>低耦合，高内聚</li></ul><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>定义：</p><p>对于以后的变更，代码无需进行大规模的改动</p><p>做法：</p><ul><li>留出扩展接口</li><li>模块低耦合，高内聚</li><li>良好的模块组织</li><li>良好的扩展方案</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>控制流程</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/1controlFlow/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/1controlFlow/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2022-08-29T13:33:03.422Z</published>
    <updated>2022-09-05T01:41:25.222Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach"><a href="#for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach" class="headerlink" title="for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach"></a>for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach</h2><ol><li>for()</li><li>for (variable of iterable)</li></ol><blockquote><p>遍历的是：<strong>iterable元素值</strong><br>适用遍历可迭代(数组Array、Map、Set、String、arguments对象、Nodelist对象)。<br>不能遍历对象，因为没有迭代器对象。</p></blockquote><ol start="3"><li>for (variable in object)</li></ol><blockquote><p>遍历的是：<strong>object键名</strong>，其为<strong>字符串型</strong>，不能直接进行几何运算<br>以<strong>任意顺序</strong>遍历一个对象的除Symbol以外的可枚举属性（包括<strong>其原型对象</strong>、<strong>其本身属性值</strong>）。<br>适合遍历<strong>对象</strong></p></blockquote><ol start="4"><li>arr.forEach(function(value, index, oObj) {});</li></ol><blockquote><p>不能遍历对象<br>总结：</p></blockquote><ul><li>for循环：可以中断（return、break）；</li><li>for in ：适用于<strong>纯对象</strong>的遍历，并且只能输出可枚举属性，不能中断（break、return）；</li><li>forEach：适用于<strong>需要知道索引值</strong>的数组遍历，但是不能中断（return、break）；</li><li>for of ：适用于<strong>无需知道索引值</strong>的数组遍历，因为可以中断（return、break）。另外对于其他字符串、类数组、类型数组的迭代，for of也更适用；</li></ul><h2 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h2><p>原理：当有多个表达式（值），左边的表达式的值可以确定结果时，就不再继续运算右边的表达式的值<br>逻辑与&amp;&amp;</p><p>逻辑或||</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>按位与(AND) &amp;<br>按位或(OR) |<br>按位异或(XOR) ^<br>按位非(NOT) ~<br>左移（Left shift）&lt;&lt;<br>有符号右移&gt;&gt;<br>无符号右移&gt;&gt;&gt;</p><h3 id="位运算符在js中的妙用"><a href="#位运算符在js中的妙用" class="headerlink" title="位运算符在js中的妙用"></a>位运算符在js中的妙用</h3><h4 id="1-判断奇偶性——-amp-运算符"><a href="#1-判断奇偶性——-amp-运算符" class="headerlink" title="1. 判断奇偶性——&amp;运算符"></a>1. 判断奇偶性——&amp;运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 偶数 &amp; 1 = 0</span></span><br><span class="line"><span class="comment">// 奇数 &amp; 1 = 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &amp; <span class="number">1</span>)    <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &amp; <span class="number">1</span>)    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符"><a href="#2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符" class="headerlink" title="2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符"></a>2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符</h4><p>相当于使用Math.floor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~ <span class="number">6.83</span>)    <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &lt;&lt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> | <span class="number">0</span>)   <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;不可对负数取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt;&gt; <span class="number">0</span>)   <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="3-值交换-必须是整数-——-运算符"><a href="#3-值交换-必须是整数-——-运算符" class="headerlink" title="3. 值交换(必须是整数)——^运算符"></a>3. 值交换(必须是整数)——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)   <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)   <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">[a, b] = [b, a] <span class="comment">// ES6解构赋值</span></span><br></pre></td></tr></table></figure><h4 id="4-得2的次方——1-lt-lt-num运算符"><a href="#4-得2的次方——1-lt-lt-num运算符" class="headerlink" title="4. 得2的次方——1 &lt;&lt; num运算符"></a>4. 得2的次方——1 &lt;&lt; num运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">// 4, 即 2的2次方</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">10</span> <span class="comment">// 1024, 即 2的10次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是要注意使用场景, 非1的数字，会改变首位的正负</span></span><br><span class="line">a = <span class="number">2e9</span>;   <span class="comment">// 2000000000</span></span><br><span class="line">a &lt;&lt; <span class="number">1</span>;    <span class="comment">// -294967296</span></span><br></pre></td></tr></table></figure><h4 id="5-判断值是否相等——-运算符"><a href="#5-判断值是否相等——-运算符" class="headerlink" title="5. 判断值是否相等——^运算符"></a>5. 判断值是否相等——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a !== <span class="number">1171</span>) &#123;...&#125;;  </span><br><span class="line"><span class="comment">// 等价于 </span></span><br><span class="line"><span class="keyword">if</span> (a ^ <span class="number">1171</span>) &#123;...&#125;;  </span><br></pre></td></tr></table></figure><h4 id="6-n-是-2-的整数幂——n-amp-n-1-x3D-0"><a href="#6-n-是-2-的整数幂——n-amp-n-1-x3D-0" class="headerlink" title="6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0"></a>6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0</h4><h4 id="7-判断数组中某项是否存在——按位取反"><a href="#7-判断数组中某项是否存在——按位取反" class="headerlink" title="7. 判断数组中某项是否存在——按位取反(~)"></a>7. 判断数组中某项是否存在——按位取反(~)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用有且仅有-1取反为0,即~-1 === 0</span></span><br><span class="line"><span class="keyword">if</span>(~arr.<span class="title function_">indexof</span>(item)) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">if</span>(arr.<span class="title function_">indexof</span>(item) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h2><p>基本语法为: expression ? sentence1 : sentence2</p><h2 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter()过滤"></a>filter()过滤</h2><p>filter(item, i, arr)：数组过滤器，参数接收一个函数，数组的每一项经过函数过滤，返回一个符合过滤条件的新数组<br>函数接收三个参数：</p><ul><li>item （当前遍历的数组项）</li><li>i （当前项索引）</li><li>arr （调用filter数组本身）</li></ul><h3 id="1-过滤出数组中大于5的数"><a href="#1-过滤出数组中大于5的数" class="headerlink" title="1.过滤出数组中大于5的数"></a>1.过滤出数组中大于5的数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v&gt;<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr);             <span class="comment">//输出[6,7]</span></span><br></pre></td></tr></table></figure><h3 id="2-通过filter判断数组中是否存在某个值"><a href="#2-通过filter判断数组中是否存在某个值" class="headerlink" title="2.通过filter判断数组中是否存在某个值"></a>2.通过filter判断数组中是否存在某个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v==<span class="number">5</span>).<span class="property">length</span>==<span class="number">0</span>?<span class="string">&quot;不存在&quot;</span>:<span class="string">&quot;存在&quot;</span>)<span class="comment">//输出存在</span></span><br></pre></td></tr></table></figure><h3 id="3-去掉空数组空字符串、undefined、null"><a href="#3-去掉空数组空字符串、undefined、null" class="headerlink" title="3.去掉空数组空字符串、undefined、null"></a>3.去掉空数组空字符串、undefined、null</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;&quot;</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr)<span class="comment">//输出[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><h3 id="利用ES6-Set去重（ES6中最常用）"><a href="#利用ES6-Set去重（ES6中最常用）" class="headerlink" title="利用ES6 Set去重（ES6中最常用）"></a>利用ES6 Set去重（ES6中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><h3 id="利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="利用for嵌套for，然后splice去重（ES5中最常用）"></a>利用for嵌套for，然后splice去重（ES5中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;          </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[j]) &#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><h3 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;    <span class="comment">// includes 检测数组是否有某个值</span></span><br><span class="line">            array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用sort"><a href="#利用sort" class="headerlink" title="利用sort()"></a>利用sort()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]    </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a>利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]  </span></span><br><span class="line"><span class="comment">// 两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="利用hasOwnProperty"><a href="#利用hasOwnProperty" class="headerlink" title="利用hasOwnProperty"></a>利用hasOwnProperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用hasOwnProperty 判断是否存在对象属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// 所有的都去重了</span></span><br></pre></td></tr></table></figure><h3 id="利用filter"><a href="#利用filter" class="headerlink" title="利用filter"></a>利用filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="利用递归去重"><a href="#利用递归去重" class="headerlink" title="利用递归去重"></a>利用递归去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array= arr;</span><br><span class="line">    <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>]) &#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用Map数据结构去重"><a href="#利用Map数据结构去重" class="headerlink" title="利用Map数据结构去重"></a>利用Map数据结构去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">            array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用reduce-includes"><a href="#利用reduce-includes" class="headerlink" title="利用reduce+includes"></a>利用reduce+includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS-面试题</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-08-29T10:52:54.631Z</published>
    <updated>2022-09-12T09:05:39.721Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="pixels、percent、em、rem、vw-x2F-vh的区别"><a href="#pixels、percent、em、rem、vw-x2F-vh的区别" class="headerlink" title="pixels、percent、em、rem、vw&#x2F;vh的区别"></a>pixels、percent、em、rem、vw&#x2F;vh的区别</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">pixels</button></li><li class="tab"><button type="button" data-href="#super-2">percent</button></li><li class="tab"><button type="button" data-href="#super-3">em</button></li><li class="tab"><button type="button" data-href="#super-4">rem</button></li><li class="tab"><button type="button" data-href="#super-5">vw/vh</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>Pixels，即 px 像素。</p><ul><li>绝对单位。</li><li>相对于显示器屏幕分辨率而言</li><li>如果 px 要换算成物理长度，需要指定精度 DPI。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>percent，即 % 百分比</p><ul><li>相对单位</li><li>基于父级元素的比例放缩</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><ul><li>相对长度单位</li><li>相对于当前对象内文本的字体尺寸</li><li>会继承父级元素的字体大小，因此不是一个固定值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><ul><li>CSS3 新增</li><li>相对单位</li><li>基于 HTML 根标签。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>vw：基于屏幕的百分比宽<br>vh：基于屏幕的百分比高</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="简述同步和异步的区别"><a href="#简述同步和异步的区别" class="headerlink" title="简述同步和异步的区别"></a>简述同步和异步的区别</h3><p>同步是阻塞模式，异步是非阻塞模式。</p><blockquote><p>同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；<br>异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p></blockquote><h3 id="简述一下src与href的区别"><a href="#简述一下src与href的区别" class="headerlink" title="简述一下src与href的区别"></a>简述一下src与href的区别</h3><blockquote><p>href：指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p><p>src：指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。</p></blockquote><h3 id="为什么将js脚本放在底部而不是头部"><a href="#为什么将js脚本放在底部而不是头部" class="headerlink" title="为什么将js脚本放在底部而不是头部?"></a>为什么将js脚本放在底部而不是头部?</h3><p>当浏览器解析到使用src的元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。</p><h3 id="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p><img src="https://img2020.cnblogs.com/blog/1019981/202007/1019981-20200709214305074-1329021472.png" alt="img"></p><p>浏览器的默认行为是把inline元素间的空白字符（空格换行tab）渲染成一个空格，也就是 <code>&lt;li&gt;</code>换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。<br>方法一：既然是因为 <code>&lt;li&gt;</code>换行导致的，那就可以将 <code>&lt;li&gt;</code>代码全部写在一排（但是可读性不高）。<br>方法二：既然是空格占一个字符的宽度，那我们索性就将 <code>&lt;ul&gt;</code>内的字符尺寸直接设为0， ul{font-size:0px;}。<br>方法三：消除ul中的间隔 ul{letter-spacing: -5px;}，恢复li中的间隔 ul li{letter-spacing: normal;}。<br>方法四：使用浮动。</p><h3 id="position跟display、overflow、float这些特性相互叠加后会怎么样？"><a href="#position跟display、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="position跟display、overflow、float这些特性相互叠加后会怎么样？"></a>position跟display、overflow、float这些特性相互叠加后会怎么样？</h3><ul><li>position  &#x3D;&#x3D;&gt;   元素的定位类型</li><li>display   &#x3D;&#x3D;&gt;   元素应该生成的框类型</li><li>float     &#x3D;&#x3D;&gt;   布局方式（定义元素的浮动方向）</li><li>overflow  &#x3D;&#x3D;&gt;   溢出元素内容区的内容的处理方式</li></ul><p>类似于优先级机制：position：absolute&#x2F;fixed优先级最高，有它在时，float不起作用，display值需要调整。</p><p>额外补充：float意味着使用块布局，它在某些情况下会修改 display 值的计算值。</p><h3 id="display-none与visibility-hidden有什么区别"><a href="#display-none与visibility-hidden有什么区别" class="headerlink" title="display: none与visibility: hidden有什么区别"></a>display: none与visibility: hidden有什么区别</h3><h3 id="如何设置一个0-5px宽度的边框线"><a href="#如何设置一个0-5px宽度的边框线" class="headerlink" title="如何设置一个0.5px宽度的边框线"></a>如何设置一个0.5px宽度的边框线</h3><p>实现方法:通过缩小50%的1px的边框来实现<br>①设定目标元素的参考位置<br>②给目标元素添加一个伪元素before或者after，并设置绝对定位<br>③给伪元素添加1px边框<br>④用box-sizing:border-box属性把边框都包进宽和高里面<br>⑤宽和高设置为200%<br>⑥整个盒子模型缩小为0.5<br>⑦调整盒子模型的位置，以左上角为基准: <code>transform-origin: 0 0;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="comment">/* webkit-transform-origin: 0 0; */</span> </span><br><span class="line">    -moz-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容火狐浏览器*/</span> </span><br><span class="line">    -ms-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容ie浏览器*/</span> </span><br><span class="line">    -o-<span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; <span class="comment">/*兼容0pera浏览器*/</span> </span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>; </span><br><span class="line">    <span class="comment">/* -webkit-transform: scale(0.5，0.5); */</span> </span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>，<span class="number">0.5</span>); </span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box; <span class="comment">/*兼容chrome浏览器*/</span> </span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box; </span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何水平居中div-x2F-垂直居中div"><a href="#如何水平居中div-x2F-垂直居中div" class="headerlink" title="如何水平居中div&#x2F;垂直居中div"></a>如何水平居中div&#x2F;垂直居中div</h3><h3 id="header标签中的meta属性的作用-x2F-具体内容"><a href="#header标签中的meta属性的作用-x2F-具体内容" class="headerlink" title="header标签中的meta属性的作用&#x2F;具体内容"></a>header标签中的meta属性的作用&#x2F;具体内容</h3><h3 id="CSS选择器的权重关系"><a href="#CSS选择器的权重关系" class="headerlink" title="CSS选择器的权重关系"></a>CSS选择器的权重关系</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Html-面试题</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/1Html/html-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/1Html/html-%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-08-29T10:45:13.060Z</published>
    <updated>2022-09-05T01:34:35.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="为什么-h4-h5-h6-标签很少用到"><a href="#为什么-h4-h5-h6-标签很少用到" class="headerlink" title="为什么 h4, h5, h6 标签很少用到?"></a>为什么 h4, h5, h6 标签很少用到?</h3><p>标题标签包括 h1 到 h6, 我们常用 h1, h2, h3, 但极少用到 h4, h5 和 h6.</p><p>在一个合理语义化, 敢于裸奔 (不使用 CSS 进行布局) 的网站里面, 标题标签除了语义化, 还带有一些样式作用. 但在 CSS 普及的今天, 用 h1 和 h6 其实没有太大区别, 反正外观也能随便套.</p><p>作为标题标签, 有更牛逼的功能, 标题元素意味着页面上高权值的关键词, 所以 h1, h2 和 h3 被频繁利用来为关键词加权. 而 h4, h5 和 h6 的权值并不高, 甚至比不上 strong 和 em, 所以很少被用到. 估计他们权限层次如下:</p><p>h1 &gt; h2 &gt; h3 &gt; strong &gt; em &gt; h4 &gt; h5 &gt; h6</p><h3 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h3><p>区别1：link是HTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。<br>区别2：link引⽤CSS时，在页⾯载⼊时同时加载；@import需要页⾯⽹页完全载⼊以后加载。<br>区别3：link是HTML标签，⽆兼容问题；@import是在CSS2.1提出的，低版本的浏览器不⽀持。<br>区别4：link⽀持使⽤Javascript控制DOM去改变样式；⽽@import不⽀持</p><h3 id="img标签中的alt和title的区别"><a href="#img标签中的alt和title的区别" class="headerlink" title="img标签中的alt和title的区别"></a>img标签中的alt和title的区别</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Html" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Html/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/interview/promise/"/>
    <id>https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/interview/promise/</id>
    <published>2022-08-25T04:09:47.179Z</published>
    <updated>2022-08-25T04:11:11.744Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://juejin.cn/post/6844904077537574919">45道Promise面试题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/JavaScript/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>手写Promise</title>
    <link href="https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/7newFeaturesofES/%E6%89%8B%E5%86%99promise/"/>
    <id>https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/7newFeaturesofES/%E6%89%8B%E5%86%99promise/</id>
    <published>2022-08-25T03:39:39.767Z</published>
    <updated>2022-09-12T07:34:22.897Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://juejin.cn/post/6945319439772434469#heading-6">手写promise实现过程</a></p><p><a href="https://github.com/leocoder351/my-promise">leocoder351&#x2F;my-promise</a></p><p><a href="https://juejin.cn/post/6924188714419634190">看懂此文，手写十种Promise！</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建 QPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 QPromise 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QPromise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">        <span class="comment">// executor是一个执行器，进入会立即执行</span></span><br><span class="line">        <span class="comment">// 传入resolve和reject方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果有错误，就直接执行reject</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储状态的变量，初始值是pending</span></span><br><span class="line">    status = <span class="variable constant_">PENDING</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功之后的值</span></span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//失败之后的原因</span></span><br><span class="line">    reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组-存储-成功回调函数</span></span><br><span class="line">    <span class="comment">// onFulfilledCallback = null;</span></span><br><span class="line">    onFulfilledCallbacks = [];</span><br><span class="line">    <span class="comment">// 数组-存储-失败回调函数</span></span><br><span class="line">    <span class="comment">// onRejectedCallback = null;</span></span><br><span class="line">    onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">    <span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">    <span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line">    <span class="comment">// 更改成功后的状态</span></span><br><span class="line">    resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">            <span class="comment">// 状态修改为“已成功”</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">            <span class="comment">// 保存成功之后的值</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">            <span class="comment">// 判断成功回调函数是否存在，如果存在就调用</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，shift不是纯函数，取出后，数组将失去该元素，直到数组为空</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">shift</span>()(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 更改失败后的状态</span></span><br><span class="line">    reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">            <span class="comment">// 状态修改为“已失败”</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">            <span class="comment">// 保存失败之后的原因</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">            <span class="comment">// 判断失败回调函数是否存在，如果存在就调用</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">shift</span>()(reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果不传，就使用默认函数</span></span><br><span class="line">        <span class="keyword">const</span> realOnFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onFulfilled</span>:<span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="keyword">const</span> realOnRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onRejected</span>:<span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">        <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">fulfilledMicroMask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待promise2完成初始化</span></span><br><span class="line">                <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取调用-成功回调函数的执行结果</span></span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">                        <span class="comment">// 传入resolvePromise集中处理</span></span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);   </span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">rejectedMicroMask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待promise2完成初始化</span></span><br><span class="line">                <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取调用-成功回调函数的执行结果</span></span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                        <span class="comment">// 传入resolvePromise集中处理</span></span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">                <span class="title function_">fulfilledMicroMask</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">                <span class="title function_">rejectedMicroMask</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">                <span class="comment">// 等到执行成功/失败函数的时候再传递</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(fulfilledMicroMask);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(rejectedMicroMask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">parameter</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果传入 QPromise 就直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(parameter <span class="keyword">instanceof</span> <span class="title class_">QPromise</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parameter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转成常规方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(parameter);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reject 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">    <span class="keyword">if</span>(promise === x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The promise and the return value are the same&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// x 为 null 直接返回，走后面的逻辑会报错</span></span><br><span class="line">        <span class="keyword">if</span>(x === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> then;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把 x.then 赋值给 then </span></span><br><span class="line">            then = x.<span class="property">then</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果取 x.then 的值时抛出错误 error ，则以 error 为据因拒绝 promise</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 then 是函数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                then.<span class="title function_">call</span>(</span><br><span class="line">                    <span class="comment">// this 指向 x</span></span><br><span class="line">                    x,</span><br><span class="line">                    <span class="comment">// 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span></span><br><span class="line">                    <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果 resolvePromise 和 rejectPromise 均被调用，</span></span><br><span class="line">                        <span class="comment">// 或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span></span><br><span class="line">                        <span class="comment">// 实现这条需要前面加一个变量 called</span></span><br><span class="line">                        <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                        called = <span class="literal">true</span>;</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise, y, resolve, reject);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 如果 rejectPromise 以据因 z 为参数被调用，则以据因 z 拒绝 promise</span></span><br><span class="line">                    <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                        called = <span class="literal">true</span>;</span><br><span class="line">                        <span class="title function_">reject</span>(z);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="comment">// 如果调用 then 方法抛出了异常 error：</span></span><br><span class="line">                <span class="comment">// 如果 resolvePromise 或 rejectPromise 已经被调用，直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 否则以 error 为据因拒绝 promise</span></span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果then不是函数，以x为参数执行promise</span></span><br><span class="line">            <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span></span><br><span class="line">        <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">QPromise</span>.<span class="property">defer</span> = <span class="title class_">QPromise</span>.<span class="property">deferred</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    result.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        result.<span class="property">resolve</span> = resolve;</span><br><span class="line">        result.<span class="property">reject</span> = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">QPromise</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="ES新特性" scheme="https://superq314.github.io/tags/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>布局及应用代码</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</id>
    <published>2022-08-22T11:37:17.536Z</published>
    <updated>2022-09-10T13:21:55.379Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="实现上中下三行布局，顶部和底部最小高度是100px，中间自适应"><a href="#实现上中下三行布局，顶部和底部最小高度是100px，中间自适应" class="headerlink" title="实现上中下三行布局，顶部和底部最小高度是100px，中间自适应?"></a>实现上中下三行布局，顶部和底部最小高度是100px，中间自适应?</h3><h3 id="如何判断一个元素-CSS-样式溢出，从而可以选择性的加-title-或者-Tooltip"><a href="#如何判断一个元素-CSS-样式溢出，从而可以选择性的加-title-或者-Tooltip" class="headerlink" title="如何判断一个元素 CSS 样式溢出，从而可以选择性的加 title 或者 Tooltip?"></a>如何判断一个元素 CSS 样式溢出，从而可以选择性的加 title 或者 Tooltip?</h3><h3 id="如何让-CSS-元素左侧自动溢出（…-溢出在左侧）"><a href="#如何让-CSS-元素左侧自动溢出（…-溢出在左侧）" class="headerlink" title="如何让 CSS 元素左侧自动溢出（… 溢出在左侧）"></a>如何让 CSS 元素左侧自动溢出（… 溢出在左侧）</h3><h3 id="用纯CSS创建一个三角形的原理是什么？"><a href="#用纯CSS创建一个三角形的原理是什么？" class="headerlink" title="用纯CSS创建一个三角形的原理是什么？"></a>用纯CSS创建一个三角形的原理是什么？</h3><p><a href="https://www.cnblogs.com/L-xmin/p/13269181.html">CSS 边框的基础使用</a></p><p><img src="https://img2020.cnblogs.com/blog/1019981/202007/1019981-20200709092043512-112476183.png" alt="img"></p><h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><a href="#">Post not found: frontEnd/CSS/布局居中</a><h3 id="满屏品字布局"><a href="#满屏品字布局" class="headerlink" title="满屏品字布局"></a>满屏品字布局</h3><p>涉及知识点：</p><ol><li>解决上下两行占总高50%</li><li>上面的‘口’居中布局，<code>margin:0 auto</code></li><li>下面两个‘口’左右布局，<code>float:left;width:50%</code></li></ol><p>无非就是综合了各种布局的使用，代码放于文末</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>满屏品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header水平居中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- main中的元素左右布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重点是html的height也得是100% */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fae3d9</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bbded6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8ac6d1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"><a href="#有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度" class="headerlink" title="有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"></a>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</h3><p>思路：在div上方留出100px的padding，想方设法将A覆盖掉这100px的padding。<br>三种方法，代码放于文末。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span><span class="attr">media</span>=<span class="string">&quot;screen and (max-width: 500px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度(三种方案)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案一*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案二*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案三*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="固定宽高的块级盒子"><a href="#固定宽高的块级盒子" class="headerlink" title="固定宽高的块级盒子"></a>固定宽高的块级盒子</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">absolute + 负 margin</button></li><li class="tab"><button type="button" data-href="#super-2">absolute + margin auto</button></li><li class="tab"><button type="button" data-href="#super-3">absolute + calc</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-fixed-width-height-way-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-fixed-width-height-way-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-fixed-width-height-way-3.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="不固定宽高的块级盒子"><a href="#不固定宽高的块级盒子" class="headerlink" title="不固定宽高的块级盒子"></a>不固定宽高的块级盒子</h3><p>这里列了 6 种方法，其中的两种 line-height 和 writing-mode 方案看后让我惊唿：还有这种操作？学到了学到了。</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">absolute + transform</button></li><li class="tab"><button type="button" data-href="#super-2">line-height + vertical-align</button></li><li class="tab"><button type="button" data-href="#super-3">writing-mode</button></li><li class="tab"><button type="button" data-href="#super-4">table-cell</button></li><li class="tab"><button type="button" data-href="#super-5">flex</button></li><li class="tab"><button type="button" data-href="#super-6">grid</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-2.png" alt="640"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-3.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-4.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-5.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-6"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-baisc-review-not-fixed-width-height-way-6.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="常用布局"><a href="#常用布局" class="headerlink" title="常用布局"></a>常用布局</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">两栏布局（边栏定宽主栏自适应）</button></li><li class="tab"><button type="button" data-href="#super-2">三栏布局（两侧栏定宽主栏自适应）</button></li><li class="tab"><button type="button" data-href="#super-3">多列等高布局</button></li><li class="tab"><button type="button" data-href="#super-4">三行布局（头尾定高主栏自适应）</button></li><li class="tab"><button type="button" data-href="#super-5">super 5</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>针对以下这些方案写了几个示例：<a href="https://codepen.io/bulandent/pen/JjbqxbM">两栏布局（边栏定宽主栏自适应） (codepen.io)</a></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">float + overflow（BFC 原理）</button></li><li class="tab"><button type="button" data-href="#super-2">float + margin</button></li><li class="tab"><button type="button" data-href="#super-3">flex</button></li><li class="tab"><button type="button" data-href="#super-4">grid</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-two-column-layout-way-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-two-column-layout-way-3.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-two-column-layout-way-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-two-column-layout-way-4.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>针对以下这些方案写了几个示例：<a href="https://codepen.io/bulandent/pen/abBrXrj">三栏布局（两侧边栏定宽主栏自适应） (codepen.io)</a></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">圣杯布局</button></li><li class="tab"><button type="button" data-href="#super-2">双飞翼布局</button></li><li class="tab"><button type="button" data-href="#super-3">float + overflow（BFC 原理）</button></li><li class="tab"><button type="button" data-href="#super-4">flex</button></li><li class="tab"><button type="button" data-href="#super-5">grid</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-column-layout-way-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-column-layout-way-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-column-layout-way-4.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-column-layout-way-3.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-column-layout-way-5.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>结合示例阅读更佳：<a href="https://codepen.io/bulandent/pen/jOVogdj">多列等高布局 (codepen.io)</a></p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">padding + 负 margin</button></li><li class="tab"><button type="button" data-href="#super-2">设置父级背景图片</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-more-column-layout-way-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-more-column-layout-way-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>列了 4 种方法，都是基于如下的 HTML 和 CSS 的，结合示例阅读效果更佳：<a href="https://codepen.io/bulandent/pen/yLVdpvr">三行布局（头尾固定主栏自适应） (codepen.io)</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span>, </span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">calc</button></li><li class="tab"><button type="button" data-href="#super-2">absolute</button></li><li class="tab"><button type="button" data-href="#super-3">flex</button></li><li class="tab"><button type="button" data-href="#super-4">grid</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-coulum-calc.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-coulum-flex.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-coulum-absolute.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p><img src="https://cdn.jsdelivr.net/gh/jerryc127/CDN@m2/img/css-basic-review-three-coulum-grid.png" alt="图片"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>常见的兼容性问题</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-22T11:33:42.226Z</published>
    <updated>2022-09-05T01:36:18.709Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一：不同浏览器的标签默认的外补丁和内补丁不同"><a href="#一：不同浏览器的标签默认的外补丁和内补丁不同" class="headerlink" title="一：不同浏览器的标签默认的外补丁和内补丁不同"></a>一：不同浏览器的标签默认的外补丁和内补丁不同</h3><p>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。</p><p>碰到频率:100%</p><p>解决方案：CSS里 *{margin:0;padding:0;}</p><p>备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的CSS文件开头都会用通配符*来设置各个标签的内外补丁是0。</p><h3 id="二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"><a href="#二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大" class="headerlink" title="二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"></a>二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大</h3><p>问题症状:常见症状是IE6中后面的一块被顶到下一行</p><p>碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）</p><p>解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性</p><p>备注：我们最常用的就是div+CSS布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。</p><h3 id="三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"><a href="#三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度" class="headerlink" title="三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"></a>三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度</h3><p>问题症状：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度</p><p>碰到频率：60%</p><p>解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p><p>备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。</p><h3 id="四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug"><a href="#四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug" class="headerlink" title="四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug"></a>四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug</h3><p>问题症状：IE6里的间距比超过设置的间距</p><p>碰到几率：20%</p><p>解决方案 ： 在display:block;后面加入display:inline;display:table;</p><p>备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。</p><h3 id="五：图片默认有间距"><a href="#五：图片默认有间距" class="headerlink" title="五：图片默认有间距"></a>五：图片默认有间距</h3><p>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。</p><p>碰到几率：20%</p><p>解决方案：使用float属性为img布局</p><p>备注 ： 因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（我的一个学生使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以我禁止他们使用）</p><h3 id="六：标签最低高度设置min-height不兼容"><a href="#六：标签最低高度设置min-height不兼容" class="headerlink" title="六：标签最低高度设置min-height不兼容"></a>六：标签最低高度设置min-height不兼容</h3><p>问题症状：因为min-height本身就是一个不兼容的CSS属性，所以设置min-height时不能很好的被各个浏览器兼容</p><p>碰到几率：5%</p><p>解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}</p><p>备注：在B&#x2F;S系统前端开时，有很多情况下我们又这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。</p><h3 id="七：透明度的兼容CSS设置"><a href="#七：透明度的兼容CSS设置" class="headerlink" title="七：透明度的兼容CSS设置"></a>七：透明度的兼容CSS设置</h3><p>一般在ie中用的是filter:alpha(opacity&#x3D;0);这个属性来设置div或者是块级元素的透明度，而在firefox中，一般就是直接使用opacity:0,对于兼容的，一般的做法就是在书写css样式的将2个都写上就行，就能实现兼容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
