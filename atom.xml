<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>superQ的个人小站</title>
  <icon>https://www.gravatar.com/avatar/53ec4cae8bfa9696385d334042db5c18</icon>
  <subtitle>山海无畏</subtitle>
  <link href="https://superq314.github.io/atom.xml" rel="self"/>
  
  <link href="https://superq314.github.io/"/>
  <updated>2022-09-02T13:41:37.823Z</updated>
  <id>https://superq314.github.io/</id>
  
  <author>
    <name>superQ</name>
    <email>220202090@seu.edu.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义404界面</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E8%87%AA%E5%AE%9A%E4%B9%89404%E7%95%8C%E9%9D%A2/</id>
    <published>2022-09-02T13:38:01.277Z</published>
    <updated>2022-09-02T13:41:37.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="找到你中意的404页面"><a href="#找到你中意的404页面" class="headerlink" title="找到你中意的404页面"></a>找到你中意的404页面</h3><p>推荐一款：<a href="https://404.life/">https://404.life</a></p><p>预览保存，如果你看到其他喜欢的页面如何F12扒页面我就不教咯~</p><h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><h4 id="把css和js放在博客下"><a href="#把css和js放在博客下" class="headerlink" title="把css和js放在博客下"></a>把css和js放在博客下</h4><p>我是放在这儿的，你也可以放在github，用jsd加速。</p><p><img src="https://img-blog.csdnimg.cn/20200518185047670.png" alt="在这里插入图片描述"></p><h4 id="新建404-html"><a href="#新建404-html" class="headerlink" title="新建404.html"></a>新建404.html</h4><p>路径是在：<code>博客\source\404.html</code>，它和 <code>_post</code>同级。<br>修改页面内容。（注意css的引用路径）</p><p><img src="https://img-blog.csdnimg.cn/20200518185231776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="设置404跳过渲染：-config-yml"><a href="#设置404跳过渲染：-config-yml" class="headerlink" title="设置404跳过渲染：_config.yml"></a>设置404跳过渲染：_config.yml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">skip_render: ##跳过指定渲染，忽略文章skip_render: &quot;_posts/hello-world.md&quot;</span><br><span class="line">  - 404.html</span><br></pre></td></tr></table></figure><p>页面效果：</p><p><img src="https://img-blog.csdnimg.cn/20200518185317300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>tips:butterfly主题可以关掉默认的404页面</p><p><img src="https://img-blog.csdnimg.cn/20200518185455559.png" alt="在这里插入图片描述"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;找到你中意的404页面&quot;&gt;&lt;a href=&quot;#找到你中意的404页面&quot; class=&quot;headerlink&quot; title=&quot;找到你中意的404页面&quot;&gt;&lt;/a&gt;找到你中意的404页面&lt;/h3&gt;&lt;p&gt;推荐一款：&lt;a href=&quot;https://404.life/&quot;&gt;h</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>友链页面优化</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/</id>
    <published>2022-09-02T13:27:46.438Z</published>
    <updated>2022-09-02T13:37:47.126Z</updated>
    
    <content type="html"><![CDATA[<ul><li>默认：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113224158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>优化：</li></ul><p><img src="https://img-blog.csdnimg.cn/20200423113308946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考链接：<a href="https://www.antmoe.com/posts/a811d614/index.html">Hexo关于Butterfly的一些小修改</a></p><h3 id="修改-themes-Butterfly-layout-flink-pug渲染样式"><a href="#修改-themes-Butterfly-layout-flink-pug渲染样式" class="headerlink" title="修改 themes\Butterfly\layout\flink.pug渲染样式"></a>修改 <code>themes\Butterfly\layout\flink.pug</code>渲染样式</h3><p>（ctrl+&#x2F;注释掉原来的内容，将下面添加进去：）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># page</span><br><span class="line">  .flink  # article-container</span><br><span class="line">    each i in site.data.links</span><br><span class="line">      h2= i.class_name</span><br><span class="line">      .post-cards</span><br><span class="line">        .md-links</span><br><span class="line">          each item in i.link_list</span><br><span class="line">            .md-links-item(style= item.color ? `--primary-color:$&#123;item.color&#125;;border-width:$&#123;item.width&#125;;border-style:$&#123;item.style&#125;;animation: $&#123;item.custom&#125; $&#123;item.time&#125; infinite alternate; background:$&#123;item.background&#125;` : &#x27;border-width:0px;border-style:solid;animation: link_custom 0s infinite alternate;background:0&#x27;)</span><br><span class="line">              a.customcolor(href=item.link  title=item.name target=&quot;_blank&quot; rel=item.remove ? &quot;external nofollow&quot; : &quot;&quot; style=item.namecolor ? `--namecolor:$&#123;item.namecolor&#125;` : &#x27;&#x27;)</span><br><span class="line">                if theme.lazyload.enable</span><br><span class="line">                  img.lazyload(data-src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name,style=item.rotate ? `--primary-rotate:$&#123;item.rotate&#125;;--autotime:$&#123;item.autotime&#125;;` : &#x27;--primary-rotate:0deg&#x27; class=item.autorotate ? `$&#123;item.autorotate&#125;` : &#x27;&#x27;)</span><br><span class="line">                else</span><br><span class="line">                  img(src=item.avatar onerror=`this.onerror=null;this.src=&#x27;` + url_for(theme.lodding_bg.flink) + `&#x27;` alt=item.name )</span><br><span class="line">                .md-links-title= item.name</span><br><span class="line">                .md-links-des= item.descr</span><br><span class="line">    != page.content</span><br><span class="line">  if page.comments !== false</span><br><span class="line">    include includes/comments/index.pug</span><br></pre></td></tr></table></figure><h3 id="添加css样式，外链"><a href="#添加css样式，外链" class="headerlink" title="添加css样式，外链"></a>添加css样式，外链</h3><p>（ctrl+F全局搜索 css: ，并添加外链 ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@master/Hexo/css/flink.min.css</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020042311371055.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N1bmd1ZGFmYQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h3><p>在link.yml里写：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">姓名</span></span><br><span class="line"><span class="attr">link:</span> <span class="string">地址</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">头像</span></span><br><span class="line"><span class="attr">descr:</span> <span class="string">描述</span></span><br><span class="line"><span class="comment"># 边框大小 默认为0</span></span><br><span class="line"><span class="attr">width:</span> <span class="string">0px</span></span><br><span class="line"><span class="comment"># 边框样式 默认 solid</span></span><br><span class="line"><span class="attr">style:</span> <span class="string">solid</span></span><br><span class="line"><span class="comment"># 边框颜色 默认淡蓝色 #49b1f5</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">&quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment"># 自动旋转 可选值 flash（闪现） link_custom（单色呼吸灯） link_custom1（彩色呼吸灯）</span></span><br><span class="line"><span class="attr">custom:</span> <span class="string">link_custom</span></span><br><span class="line"><span class="comment"># 动画时长设定，默认为0</span></span><br><span class="line"><span class="attr">time:</span> <span class="string">4s</span></span><br><span class="line"><span class="comment"># name的颜色</span></span><br><span class="line"><span class="attr">namecolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># descr的颜色</span></span><br><span class="line"><span class="attr">descolor:</span> <span class="string">&quot;#ff6699&quot;</span></span><br><span class="line"><span class="comment"># 背景颜色</span></span><br><span class="line"><span class="attr">background:</span> <span class="number">0</span></span><br><span class="line"><span class="comment"># 鼠标悬停旋转角度</span></span><br><span class="line"><span class="attr">rotate:</span> <span class="string">360deg</span></span><br><span class="line"><span class="comment"># 自动旋转 latuo左旋转 rauto右旋转</span></span><br><span class="line"><span class="attr">autorotate:</span> <span class="string">&quot;lauto&quot;</span></span><br><span class="line"><span class="comment"># 旋转的周期（时长）</span></span><br><span class="line"><span class="attr">autotime:</span> <span class="string">0s</span></span><br><span class="line"><span class="comment">#移除此链接的权重 0为否 非0为移除</span></span><br><span class="line"><span class="attr">remove:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;默认：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200423113224158.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdG</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>添加天气小部件</title>
    <link href="https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/"/>
    <id>https://superq314.github.io/2022/09/02/Hexo/%E9%AD%94%E6%94%B9/%E6%B7%BB%E5%8A%A0%E5%A4%A9%E6%B0%94%E5%B0%8F%E9%83%A8%E4%BB%B6/</id>
    <published>2022-09-02T07:25:23.976Z</published>
    <updated>2022-09-02T13:21:18.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>电脑端<br><img src="https://img-blog.csdnimg.cn/img_convert/7f5f29b374a476be60a5bdc97aa9d0c9.png"><br>手机端<br><img src="https://img-blog.csdnimg.cn/img_convert/30f3b2d2d678c6ea3afede3b51de3552.png"></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="申请天气API"><a href="#申请天气API" class="headerlink" title="申请天气API"></a>申请天气API</h3><p>国内天气API有多种，此处推荐和风天气，如果第一次使用和风天气</p><p>首先，在官网注册账号，<a href="https://id.qweather.com/#/register?redirect=https%3A%2F%2Fconsole.qweather.com">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/0ef8012a413fb671007f3df28c642249.png" alt="img"></p><p>申请账号并登录后，到和风天气开发平台创建一个简约插件，<a href="https://widget.qweather.com/create-simple">点击进入</a><br><img src="https://img-blog.csdnimg.cn/img_convert/d4133d6ab5b989d8c1298dcf6f129ab2.png" alt="img"></p><p>  配置插件的相关属性，首先，您应该为您的插件取一个名字，内容属性均可以自定义。</p><p>注意：为了确保天气小部件的正常显示，这里选择固定在浏览器中，具体位置后续在调节。<br><img src="https://img-blog.csdnimg.cn/img_convert/fbd29cde597ca0071fe9efa5e78968e4.png" alt="img"></p><p>设置完成后，点击下面的生成代码即可，生成的代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;he-plugin-simple&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">WIDGET = &#123;</span><br><span class="line">  &quot;CONFIG&quot;: &#123;</span><br><span class="line">    &quot;modules&quot;: &quot;01234&quot;,</span><br><span class="line">    &quot;background&quot;: &quot;5&quot;,</span><br><span class="line">    &quot;tmpColor&quot;: &quot;FF9900&quot;,</span><br><span class="line">    &quot;tmpSize&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;cityColor&quot;: &quot;4A86E8&quot;,</span><br><span class="line">    &quot;citySize&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;aqiColor&quot;: &quot;FF9900&quot;,</span><br><span class="line">    &quot;aqiSize&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;weatherIconSize&quot;: &quot;24&quot;,</span><br><span class="line">    &quot;alertIconSize&quot;: &quot;18&quot;,</span><br><span class="line">    &quot;padding&quot;: &quot;10px 10px 10px 10px&quot;,</span><br><span class="line">    &quot;shadow&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;language&quot;: &quot;auto&quot;,</span><br><span class="line">    &quot;fixed&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;vertical&quot;: &quot;top&quot;,</span><br><span class="line">    &quot;horizontal&quot;: &quot;left&quot;,</span><br><span class="line">    &quot;left&quot;: &quot;10&quot;,</span><br><span class="line">    &quot;top&quot;: &quot;10&quot;,</span><br><span class="line">    &quot;key&quot;: &quot;个人key&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="添加div"><a href="#添加div" class="headerlink" title="添加div"></a>添加div</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\layout\includes\header</code>目录下的 <code>nav.pug</code>文件中添加以下内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;he-plugin-simple&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>也可以写成这种形式 <code>#he-plugin-simple</code></p></blockquote><h3 id="添加weather-js"><a href="#添加weather-js" class="headerlink" title="添加weather.js"></a>添加weather.js</h3><p>打开个人博客所在文件夹，在 <code>...\themes\butterfly\source\js</code>目录下添加 <code>weather.js</code>文件，并填入以下内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">WIDGET</span> = &#123;</span><br><span class="line">  <span class="string">&quot;CONFIG&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;modules&quot;</span>: <span class="string">&quot;01234&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tmpSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cityColor&quot;</span>: <span class="string">&quot;FF9900&quot;</span>,</span><br><span class="line">    <span class="string">&quot;citySize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiColor&quot;</span>: <span class="string">&quot;4A86E8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;aqiSize&quot;</span>: <span class="string">&quot;16&quot;</span>,</span><br><span class="line">    <span class="string">&quot;weatherIconSize&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alertIconSize&quot;</span>: <span class="string">&quot;18&quot;</span>,</span><br><span class="line">    <span class="string">&quot;padding&quot;</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">    <span class="string">&quot;shadow&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;language&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fixed&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vertical&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;horizontal&quot;</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="string">&quot;left&quot;</span>: <span class="string">&quot;125&quot;</span>,</span><br><span class="line">    <span class="string">&quot;top&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;你的key&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inject引入"><a href="#Inject引入" class="headerlink" title="Inject引入"></a>Inject引入</h3><p>在配置文件 <code>_config.butterfly</code>的 <code>inject</code>属性中引入以下代码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;//at.alicdn.com/t/font_3332915_ymmoy7wnkg.css&quot;&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;themes/butterfly/source/css/iconfont.css&quot;&gt;`</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># -`&lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">src=&quot;https://widget.qweather.net/simple/static/js/he-simple-common.js?v=2.0&quot;&gt;&lt;/script&gt;`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;`&lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;60198&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-autoplay=&quot;true&quot; data-listfolded=&quot;true&quot;&gt;` `&lt;/div&gt;`&#x27;</span></span><br><span class="line">    <span class="string">-`&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;/js/weather.js&quot;&gt;&lt;/script&gt;`</span></span><br></pre></td></tr></table></figure><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>在终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>运行博客后，调试<code>left</code>和<code>top</code>属性，使天气小部件显示在合适位置。</li><li>前端调试后，记修改<code>weather.js</code>文件中的<code>left</code>、<code>top</code>属性。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h2&gt;&lt;p&gt;电脑端&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/img_convert/7f5f2</summary>
      
    
    
    
    <category term="Hexo" scheme="https://superq314.github.io/categories/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/categories/Hexo/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="Hexo" scheme="https://superq314.github.io/tags/Hexo/"/>
    
    <category term="魔改" scheme="https://superq314.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>代码性能指标</title>
    <link href="https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/"/>
    <id>https://superq314.github.io/2022/09/02/frontEnd/3JavaScript/function/%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</id>
    <published>2022-09-02T05:49:41.021Z</published>
    <updated>2022-09-02T05:59:13.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h2><p>定义：代码抗击风险的能力</p><p>目的：</p><ul><li>避免和程序无关的因素，导致代码报错</li><li>快速给出问题反馈</li><li>不至于因为非必要性bug，而导致程序执行中断</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;健壮性&quot;&gt;&lt;a href=&quot;#健壮性&quot; class=&quot;headerlink&quot; title=&quot;健壮性&quot;&gt;&lt;/a&gt;健壮性&lt;/h2&gt;&lt;p&gt;定义：代码抗击风险的能力&lt;/p&gt;
&lt;p&gt;目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免和程序无关的因素，导致代码报错&lt;/li&gt;
&lt;li&gt;快速</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/3JavaScript/%E6%8E%A7%E5%88%B6%E6%B5%81%E7%A8%8B/</id>
    <published>2022-08-29T13:33:03.422Z</published>
    <updated>2022-08-30T10:06:04.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach"><a href="#for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach" class="headerlink" title="for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach"></a>for()&#x2F;for (… of …)&#x2F;for (… in …)&#x2F;forEach</h2><ol><li>for()</li><li>for (variable of iterable)</li></ol><blockquote><p>遍历的是：<strong>iterable元素值</strong><br>适用遍历可迭代(数组Array、Map、Set、String、arguments对象、Nodelist对象)。<br>不能遍历对象，因为没有迭代器对象。</p></blockquote><ol start="3"><li>for (variable in object)</li></ol><blockquote><p>遍历的是：<strong>object键名</strong>，其为<strong>字符串型</strong>，不能直接进行几何运算<br>以<strong>任意顺序</strong>遍历一个对象的除Symbol以外的可枚举属性（包括<strong>其原型对象</strong>、<strong>其本身属性值</strong>）。<br>适合遍历<strong>对象</strong></p></blockquote><ol start="4"><li>arr.forEach(function(value, index, oObj) {});</li></ol><blockquote><p>不能遍历对象<br>总结：</p></blockquote><ul><li>for循环：可以中断（return、break）；</li><li>for in ：适用于<strong>纯对象</strong>的遍历，并且只能输出可枚举属性，不能中断（break、return）；</li><li>forEach：适用于<strong>需要知道索引值</strong>的数组遍历，但是不能中断（return、break）；</li><li>for of ：适用于<strong>无需知道索引值</strong>的数组遍历，因为可以中断（return、break）。另外对于其他字符串、类数组、类型数组的迭代，for of也更适用；</li></ul><h2 id="短路运算"><a href="#短路运算" class="headerlink" title="短路运算"></a>短路运算</h2><p>原理：当有多个表达式（值），左边的表达式的值可以确定结果时，就不再继续运算右边的表达式的值<br>逻辑与&amp;&amp;</p><p>逻辑或||</p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>按位与(AND) &amp;<br>按位或(OR) |<br>按位异或(XOR) ^<br>按位非(NOT) ~<br>左移（Left shift）&lt;&lt;<br>有符号右移&gt;&gt;<br>无符号右移&gt;&gt;&gt;</p><h3 id="位运算符在js中的妙用"><a href="#位运算符在js中的妙用" class="headerlink" title="位运算符在js中的妙用"></a>位运算符在js中的妙用</h3><h4 id="1-判断奇偶性——-amp-运算符"><a href="#1-判断奇偶性——-amp-运算符" class="headerlink" title="1. 判断奇偶性——&amp;运算符"></a>1. 判断奇偶性——&amp;运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 偶数 &amp; 1 = 0</span></span><br><span class="line"><span class="comment">// 奇数 &amp; 1 = 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> &amp; <span class="number">1</span>)    <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &amp; <span class="number">1</span>)    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符"><a href="#2-取整——-、-gt-gt-、-lt-lt-、-gt-gt-gt-、-运算符" class="headerlink" title="2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符"></a>2. 取整——~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;、|运算符</h4><p>相当于使用Math.floor()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~ <span class="number">6.83</span>)    <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &lt;&lt; <span class="number">0</span>)  <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> | <span class="number">0</span>)   <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// &gt;&gt;&gt;不可对负数取整</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6.83</span> &gt;&gt;&gt; <span class="number">0</span>)   <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="3-值交换-必须是整数-——-运算符"><a href="#3-值交换-必须是整数-——-运算符" class="headerlink" title="3. 值交换(必须是整数)——^运算符"></a>3. 值交换(必须是整数)——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)   <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)   <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">[a, b] = [b, a] <span class="comment">// ES6解构赋值</span></span><br></pre></td></tr></table></figure><h4 id="4-得2的次方——1-lt-lt-num运算符"><a href="#4-得2的次方——1-lt-lt-num运算符" class="headerlink" title="4. 得2的次方——1 &lt;&lt; num运算符"></a>4. 得2的次方——1 &lt;&lt; num运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">2</span>  <span class="comment">// 4, 即 2的2次方</span></span><br><span class="line"><span class="number">1</span> &lt;&lt; <span class="number">10</span> <span class="comment">// 1024, 即 2的10次方</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是要注意使用场景, 非1的数字，会改变首位的正负</span></span><br><span class="line">a = <span class="number">2e9</span>;   <span class="comment">// 2000000000</span></span><br><span class="line">a &lt;&lt; <span class="number">1</span>;    <span class="comment">// -294967296</span></span><br></pre></td></tr></table></figure><h4 id="5-判断值是否相等——-运算符"><a href="#5-判断值是否相等——-运算符" class="headerlink" title="5. 判断值是否相等——^运算符"></a>5. 判断值是否相等——^运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a !== <span class="number">1171</span>) &#123;...&#125;;  </span><br><span class="line"><span class="comment">// 等价于 </span></span><br><span class="line"><span class="keyword">if</span> (a ^ <span class="number">1171</span>) &#123;...&#125;;  </span><br></pre></td></tr></table></figure><h4 id="6-n-是-2-的整数幂——n-amp-n-1-x3D-0"><a href="#6-n-是-2-的整数幂——n-amp-n-1-x3D-0" class="headerlink" title="6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0"></a>6. n 是 2 的整数幂——n &amp; (n - 1) &#x3D; 0</h4><h4 id="7-判断数组中某项是否存在——按位取反"><a href="#7-判断数组中某项是否存在——按位取反" class="headerlink" title="7. 判断数组中某项是否存在——按位取反(~)"></a>7. 判断数组中某项是否存在——按位取反(~)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用有且仅有-1取反为0,即~-1 === 0</span></span><br><span class="line"><span class="keyword">if</span>(~arr.<span class="title function_">indexof</span>(item)) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">if</span>(arr.<span class="title function_">indexof</span>(item) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三目运算"><a href="#三目运算" class="headerlink" title="三目运算"></a>三目运算</h2><p>基本语法为: expression ? sentence1 : sentence2</p><h2 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter()过滤"></a>filter()过滤</h2><p>filter(item, i, arr)：数组过滤器，参数接收一个函数，数组的每一项经过函数过滤，返回一个符合过滤条件的新数组<br>函数接收三个参数：</p><ul><li>item （当前遍历的数组项）</li><li>i （当前项索引）</li><li>arr （调用filter数组本身）</li></ul><h3 id="1-过滤出数组中大于5的数"><a href="#1-过滤出数组中大于5的数" class="headerlink" title="1.过滤出数组中大于5的数"></a>1.过滤出数组中大于5的数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v&gt;<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr);             <span class="comment">//输出[6,7]</span></span><br></pre></td></tr></table></figure><h3 id="2-通过filter判断数组中是否存在某个值"><a href="#2-通过filter判断数组中是否存在某个值" class="headerlink" title="2.通过filter判断数组中是否存在某个值"></a>2.通过filter判断数组中是否存在某个值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v==<span class="number">5</span>).<span class="property">length</span>==<span class="number">0</span>?<span class="string">&quot;不存在&quot;</span>:<span class="string">&quot;存在&quot;</span>)<span class="comment">//输出存在</span></span><br></pre></td></tr></table></figure><h3 id="3-去掉空数组空字符串、undefined、null"><a href="#3-去掉空数组空字符串、undefined、null" class="headerlink" title="3.去掉空数组空字符串、undefined、null"></a>3.去掉空数组空字符串、undefined、null</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&quot;&quot;</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> myarr=arr.<span class="title function_">filter</span>(<span class="function"><span class="params">v</span> =&gt;</span> v)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myarr)<span class="comment">//输出[1,2,3]</span></span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><h3 id="利用ES6-Set去重（ES6中最常用）"><a href="#利用ES6-Set去重（ES6中最常用）" class="headerlink" title="利用ES6 Set去重（ES6中最常用）"></a>利用ES6 Set去重（ES6中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span> (arr) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;]</span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“{}”空对象，后面的高阶方法会添加去掉重复“{}”的方法。</p><h3 id="利用for嵌套for，然后splice去重（ES5中最常用）"><a href="#利用for嵌套for，然后splice去重（ES5中最常用）" class="headerlink" title="利用for嵌套for，然后splice去重（ES5中最常用）"></a>利用for嵌套for，然后splice去重（ES5中最常用）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;            </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==arr[j]) &#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     </span></span><br><span class="line"><span class="comment">// NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><h3 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;    <span class="comment">// includes 检测数组是否有某个值</span></span><br><span class="line">            array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     </span></span><br><span class="line"><span class="comment">// &#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用sort"><a href="#利用sort" class="headerlink" title="利用sort()"></a>利用sort()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      </span></span><br><span class="line"><span class="comment">// NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h3 id="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"><a href="#利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）" class="headerlink" title="利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）"></a>利用对象的属性不能相同的特点进行去重（这种数组去重的方法有问题，不建议用，有待改进）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    </span></span><br><span class="line"><span class="comment">// 两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h3 id="利用hasOwnProperty"><a href="#利用hasOwnProperty" class="headerlink" title="利用hasOwnProperty"></a>利用hasOwnProperty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用hasOwnProperty 判断是否存在对象属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   </span></span><br><span class="line"><span class="comment">// 所有的都去重了</span></span><br></pre></td></tr></table></figure><h3 id="利用filter"><a href="#利用filter" class="headerlink" title="利用filter"></a>利用filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="利用递归去重"><a href="#利用递归去重" class="headerlink" title="利用递归去重"></a>利用递归去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array= arr;</span><br><span class="line">    <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>]) &#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用Map数据结构去重"><a href="#利用Map数据结构去重" class="headerlink" title="利用Map数据结构去重"></a>利用Map数据结构去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">            array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br></pre></td></tr></table></figure><h3 id="利用reduce-includes"><a href="#利用reduce-includes" class="headerlink" title="利用reduce+includes"></a>利用reduce+includes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">undefined</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="title class_">NaN</span>,<span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach&quot;&gt;&lt;a href=&quot;#for-x2F-for-…-of-…-x2F-for-…-in-…-x2F-forEach&quot; class=&quot;headerlink&quot; title=&quot;fo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSS-面试题</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/2CSS/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-08-29T10:52:54.631Z</published>
    <updated>2022-09-04T02:40:04.237Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pixels、percent、em、rem、vw-x2F-vh的区别"><a href="#pixels、percent、em、rem、vw-x2F-vh的区别" class="headerlink" title="pixels、percent、em、rem、vw&#x2F;vh的区别"></a>pixels、percent、em、rem、vw&#x2F;vh的区别</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">pixels</button></li><li class="tab"><button type="button" data-href="#super-2">percent</button></li><li class="tab"><button type="button" data-href="#super-3">em</button></li><li class="tab"><button type="button" data-href="#super-4">rem</button></li><li class="tab"><button type="button" data-href="#super-5">vw/vh</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>Pixels，即 px 像素。</p><ul><li>绝对单位。</li><li>相对于显示器屏幕分辨率而言</li><li>如果 px 要换算成物理长度，需要指定精度 DPI。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>percent，即 % 百分比</p><ul><li>相对单位</li><li>基于父级元素的比例放缩</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><ul><li>相对长度单位</li><li>相对于当前对象内文本的字体尺寸</li><li>会继承父级元素的字体大小，因此不是一个固定值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><ul><li>CSS3 新增</li><li>相对单位</li><li>基于 HTML 根标签。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>vw：基于屏幕的百分比宽<br>vh：基于屏幕的百分比高</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="简述同步和异步的区别"><a href="#简述同步和异步的区别" class="headerlink" title="简述同步和异步的区别"></a>简述同步和异步的区别</h3><p>同步是阻塞模式，异步是非阻塞模式。</p><blockquote><p>同步：一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；<br>异步：进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p></blockquote><h3 id="简述一下src与href的区别"><a href="#简述一下src与href的区别" class="headerlink" title="简述一下src与href的区别"></a>简述一下src与href的区别</h3><blockquote><p>href：指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。</p><p>src：指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素。</p></blockquote><h3 id="为什么将js脚本放在底部而不是头部"><a href="#为什么将js脚本放在底部而不是头部" class="headerlink" title="为什么将js脚本放在底部而不是头部?"></a>为什么将js脚本放在底部而不是头部?</h3><p>当浏览器解析到使用src的元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。</p><h3 id="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h3><p><img src="https://img2020.cnblogs.com/blog/1019981/202007/1019981-20200709214305074-1329021472.png" alt="img"></p><p>浏览器的默认行为是把inline元素间的空白字符（空格换行tab）渲染成一个空格，也就是 <code>&lt;li&gt;</code>换行后会产生换行字符，而它会变成一个空格，当然空格就占用一个字符的宽度。<br>方法一：既然是因为 <code>&lt;li&gt;</code>换行导致的，那就可以将 <code>&lt;li&gt;</code>代码全部写在一排（但是可读性不高）。<br>方法二：既然是空格占一个字符的宽度，那我们索性就将 <code>&lt;ul&gt;</code>内的字符尺寸直接设为0， ul{font-size:0px;}。<br>方法三：消除ul中的间隔 ul{letter-spacing: -5px;}，恢复li中的间隔 ul li{letter-spacing: normal;}。<br>方法四：使用浮动。</p><h3 id="position跟display、overflow、float这些特性相互叠加后会怎么样？"><a href="#position跟display、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="position跟display、overflow、float这些特性相互叠加后会怎么样？"></a>position跟display、overflow、float这些特性相互叠加后会怎么样？</h3><ul><li>position  &#x3D;&#x3D;&gt;   元素的定位类型</li><li>display   &#x3D;&#x3D;&gt;   元素应该生成的框类型</li><li>float     &#x3D;&#x3D;&gt;   布局方式（定义元素的浮动方向）</li><li>overflow  &#x3D;&#x3D;&gt;   溢出元素内容区的内容的处理方式</li></ul><p>类似于优先级机制：position：absolute&#x2F;fixed优先级最高，有它在时，float不起作用，display值需要调整。</p><p>额外补充：float意味着使用块布局，它在某些情况下会修改 display 值的计算值。</p><h3 id="display-none与visibility-hidden有什么区别"><a href="#display-none与visibility-hidden有什么区别" class="headerlink" title="display: none与visibility: hidden有什么区别"></a>display: none与visibility: hidden有什么区别</h3><h3 id="如何设置一个0-5px宽度的边框线"><a href="#如何设置一个0-5px宽度的边框线" class="headerlink" title="如何设置一个0.5px宽度的边框线"></a>如何设置一个0.5px宽度的边框线</h3><h3 id="如何水平居中div-x2F-垂直居中div"><a href="#如何水平居中div-x2F-垂直居中div" class="headerlink" title="如何水平居中div&#x2F;垂直居中div"></a>如何水平居中div&#x2F;垂直居中div</h3><h3 id="header标签中的meta属性的作用-x2F-具体内容"><a href="#header标签中的meta属性的作用-x2F-具体内容" class="headerlink" title="header标签中的meta属性的作用&#x2F;具体内容"></a>header标签中的meta属性的作用&#x2F;具体内容</h3><h3 id="CSS选择器的权重关系"><a href="#CSS选择器的权重关系" class="headerlink" title="CSS选择器的权重关系"></a>CSS选择器的权重关系</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;pixels、percent、em、rem、vw-x2F-vh的区别&quot;&gt;&lt;a href=&quot;#pixels、percent、em、rem、vw-x2F-vh的区别&quot; class=&quot;headerlink&quot; title=&quot;pixels、percent、em、rem、vw</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Html-面试题</title>
    <link href="https://superq314.github.io/2022/08/29/frontEnd/1Html/html-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/29/frontEnd/1Html/html-%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-08-29T10:45:13.060Z</published>
    <updated>2022-09-03T08:21:40.398Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么-h4-h5-h6-标签很少用到"><a href="#为什么-h4-h5-h6-标签很少用到" class="headerlink" title="为什么 h4, h5, h6 标签很少用到?"></a>为什么 h4, h5, h6 标签很少用到?</h3><p>标题标签包括 h1 到 h6, 我们常用 h1, h2, h3, 但极少用到 h4, h5 和 h6.</p><p>在一个合理语义化, 敢于裸奔 (不使用 CSS 进行布局) 的网站里面, 标题标签除了语义化, 还带有一些样式作用. 但在 CSS 普及的今天, 用 h1 和 h6 其实没有太大区别, 反正外观也能随便套.</p><p>作为标题标签, 有更牛逼的功能, 标题元素意味着页面上高权值的关键词, 所以 h1, h2 和 h3 被频繁利用来为关键词加权. 而 h4, h5 和 h6 的权值并不高, 甚至比不上 strong 和 em, 所以很少被用到. 估计他们权限层次如下:</p><p>h1 &gt; h2 &gt; h3 &gt; strong &gt; em &gt; h4 &gt; h5 &gt; h6</p><h3 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h3><p>区别1：link是HTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。<br>区别2：link引⽤CSS时，在页⾯载⼊时同时加载；@import需要页⾯⽹页完全载⼊以后加载。<br>区别3：link是HTML标签，⽆兼容问题；@import是在CSS2.1提出的，低版本的浏览器不⽀持。<br>区别4：link⽀持使⽤Javascript控制DOM去改变样式；⽽@import不⽀持</p><h3 id="img标签中的alt和title的区别"><a href="#img标签中的alt和title的区别" class="headerlink" title="img标签中的alt和title的区别"></a>img标签中的alt和title的区别</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么-h4-h5-h6-标签很少用到&quot;&gt;&lt;a href=&quot;#为什么-h4-h5-h6-标签很少用到&quot; class=&quot;headerlink&quot; title=&quot;为什么 h4, h5, h6 标签很少用到?&quot;&gt;&lt;/a&gt;为什么 h4, h5, h6 标签很少用到?&lt;/h3</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="Html" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Html/"/>
    
    
    <category term="Html" scheme="https://superq314.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/interview/promise/"/>
    <id>https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/interview/promise/</id>
    <published>2022-08-25T04:09:47.179Z</published>
    <updated>2022-08-25T04:11:11.744Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844904077537574919">45道Promise面试题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6844904077537574919&quot;&gt;45道Promise面试题&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="面试" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%E9%9D%A2%E8%AF%95/JavaScript/"/>
    
    
    <category term="面试" scheme="https://superq314.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>手写Promise</title>
    <link href="https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/newFeaturesofES/%E6%89%8B%E5%86%99promise/"/>
    <id>https://superq314.github.io/2022/08/25/frontEnd/3JavaScript/newFeaturesofES/%E6%89%8B%E5%86%99promise/</id>
    <published>2022-08-25T03:39:39.767Z</published>
    <updated>2022-08-25T03:55:28.233Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6945319439772434469#heading-6">手写promise实现过程</a></p><p><a href="https://juejin.cn/post/6924188714419634190">看懂此文，手写十种Promise！</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建 QPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 QPromise 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QPromise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">        <span class="comment">// executor是一个执行器，进入会立即执行</span></span><br><span class="line">        <span class="comment">// 传入resolve和reject方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">executor</span>(<span class="variable language_">this</span>.<span class="property">resolve</span>, <span class="variable language_">this</span>.<span class="property">reject</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果有错误，就直接执行reject</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储状态的变量，初始值是pending</span></span><br><span class="line">    status = <span class="variable constant_">PENDING</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功之后的值</span></span><br><span class="line">    value = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//失败之后的原因</span></span><br><span class="line">    reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组-存储-成功回调函数</span></span><br><span class="line">    <span class="comment">// onFulfilledCallback = null;</span></span><br><span class="line">    onFulfilledCallbacks = [];</span><br><span class="line">    <span class="comment">// 数组-存储-失败回调函数</span></span><br><span class="line">    <span class="comment">// onRejectedCallback = null;</span></span><br><span class="line">    onRejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">    <span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">    <span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line">    <span class="comment">// 更改成功后的状态</span></span><br><span class="line">    resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">            <span class="comment">// 状态修改为“已成功”</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">            <span class="comment">// 保存成功之后的值</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">            <span class="comment">// 判断成功回调函数是否存在，如果存在就调用</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="comment">// Array.shift() 取出数组第一个元素，然后（）调用，shift不是纯函数，取出后，数组将失去该元素，直到数组为空</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">shift</span>()(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 更改失败后的状态</span></span><br><span class="line">    reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">            <span class="comment">// 状态修改为“已失败”</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">            <span class="comment">// 保存失败之后的原因</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">            <span class="comment">// 判断失败回调函数是否存在，如果存在就调用</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">shift</span>()(reason);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果不传，就使用默认函数</span></span><br><span class="line">        <span class="keyword">const</span> realOnFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onFulfilled</span>:<span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        <span class="keyword">const</span> realOnRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? <span class="attr">onRejected</span>:<span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">        <span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">fulfilledMicroMask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待promise2完成初始化</span></span><br><span class="line">                <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取调用-成功回调函数的执行结果</span></span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">realOnFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">                        <span class="comment">// 传入resolvePromise集中处理</span></span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);       </span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">rejectedMicroMask</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 创建一个微任务等待promise2完成初始化</span></span><br><span class="line">                <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取调用-成功回调函数的执行结果</span></span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">realOnRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                        <span class="comment">// 传入resolvePromise集中处理</span></span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">                <span class="title function_">fulfilledMicroMask</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">                <span class="title function_">rejectedMicroMask</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">                <span class="comment">// 等到执行成功/失败函数的时候再传递</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(fulfilledMicroMask);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(rejectedMicroMask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">parameter</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果传入 QPromise 就直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(parameter <span class="keyword">instanceof</span> <span class="title class_">QPromise</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parameter;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转成常规方式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(parameter);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reject 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">    <span class="keyword">if</span>(promise === x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The promise and the return value are the same&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// x 为 null 直接返回，走后面的逻辑会报错</span></span><br><span class="line">        <span class="keyword">if</span>(x === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> then;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 把 x.then 赋值给 then </span></span><br><span class="line">            then = x.<span class="property">then</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果取 x.then 的值时抛出错误 error ，则以 error 为据因拒绝 promise</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 then 是函数</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                then.<span class="title function_">call</span>(</span><br><span class="line">                    <span class="comment">// this 指向 x</span></span><br><span class="line">                    x,</span><br><span class="line">                    <span class="comment">// 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span></span><br><span class="line">                    <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果 resolvePromise 和 rejectPromise 均被调用，</span></span><br><span class="line">                        <span class="comment">// 或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span></span><br><span class="line">                        <span class="comment">// 实现这条需要前面加一个变量 called</span></span><br><span class="line">                        <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                        called = <span class="literal">true</span>;</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise, y, resolve, reject);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 如果 rejectPromise 以据因 z 为参数被调用，则以据因 z 拒绝 promise</span></span><br><span class="line">                    <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span>(called) <span class="keyword">return</span>;</span><br><span class="line">                        called = <span class="literal">true</span>;</span><br><span class="line">                        <span class="title function_">reject</span>(z);</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="comment">// 如果调用 then 方法抛出了异常 error：</span></span><br><span class="line">                <span class="comment">// 如果 resolvePromise 或 rejectPromise 已经被调用，直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 否则以 error 为据因拒绝 promise</span></span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果then不是函数，以x为参数执行promise</span></span><br><span class="line">            <span class="title function_">resolve</span>(x);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span></span><br><span class="line">        <span class="title function_">resolve</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">QPromise</span>.<span class="property">defer</span> = <span class="title class_">QPromise</span>.<span class="property">deferred</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    result.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">QPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        result.<span class="property">resolve</span> = resolve;</span><br><span class="line">        result.<span class="property">reject</span> = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">QPromise</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6945319439772434469#heading-6&quot;&gt;手写promise实现过程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/69241887144196341</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="ES新特性" scheme="https://superq314.github.io/tags/ES%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>布局及应用代码</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81/</id>
    <published>2022-08-22T11:37:17.536Z</published>
    <updated>2022-08-22T12:02:04.316Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现上中下三行布局，顶部和底部最小高度是100px，中间自适应"><a href="#实现上中下三行布局，顶部和底部最小高度是100px，中间自适应" class="headerlink" title="实现上中下三行布局，顶部和底部最小高度是100px，中间自适应?"></a>实现上中下三行布局，顶部和底部最小高度是100px，中间自适应?</h3><h3 id="如何判断一个元素-CSS-样式溢出，从而可以选择性的加-title-或者-Tooltip"><a href="#如何判断一个元素-CSS-样式溢出，从而可以选择性的加-title-或者-Tooltip" class="headerlink" title="如何判断一个元素 CSS 样式溢出，从而可以选择性的加 title 或者 Tooltip?"></a>如何判断一个元素 CSS 样式溢出，从而可以选择性的加 title 或者 Tooltip?</h3><h3 id="如何让-CSS-元素左侧自动溢出（…-溢出在左侧）"><a href="#如何让-CSS-元素左侧自动溢出（…-溢出在左侧）" class="headerlink" title="如何让 CSS 元素左侧自动溢出（… 溢出在左侧）"></a>如何让 CSS 元素左侧自动溢出（… 溢出在左侧）</h3><h3 id="用纯CSS创建一个三角形的原理是什么？"><a href="#用纯CSS创建一个三角形的原理是什么？" class="headerlink" title="用纯CSS创建一个三角形的原理是什么？"></a>用纯CSS创建一个三角形的原理是什么？</h3><p><a href="https://www.cnblogs.com/L-xmin/p/13269181.html">CSS 边框的基础使用</a></p><p><img src="https://img2020.cnblogs.com/blog/1019981/202007/1019981-20200709092043512-112476183.png" alt="img"></p><h3 id="元素居中"><a href="#元素居中" class="headerlink" title="元素居中"></a>元素居中</h3><a href="#">Post not found: frontEnd/CSS/布局居中</a><h3 id="满屏品字布局"><a href="#满屏品字布局" class="headerlink" title="满屏品字布局"></a>满屏品字布局</h3><p>涉及知识点：</p><ol><li>解决上下两行占总高50%</li><li>上面的‘口’居中布局，<code>margin:0 auto</code></li><li>下面两个‘口’左右布局，<code>float:left;width:50%</code></li></ol><p>无非就是综合了各种布局的使用，代码放于文末</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>满屏品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- header水平居中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- main中的元素左右布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 重点是html的height也得是100% */</span></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fae3d9</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bbded6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8ac6d1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"><a href="#有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度" class="headerlink" title="有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度"></a>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度</h3><p>思路：在div上方留出100px的padding，想方设法将A覆盖掉这100px的padding。<br>三种方法，代码放于文末。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span><span class="attr">media</span>=<span class="string">&quot;screen and (max-width: 500px)&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度(三种方案)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案一*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: -<span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案二*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方案三*/</span></span><br><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.A</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#BBE8F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.B</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#D9C666</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实现上中下三行布局，顶部和底部最小高度是100px，中间自适应&quot;&gt;&lt;a href=&quot;#实现上中下三行布局，顶部和底部最小高度是100px，中间自适应&quot; class=&quot;headerlink&quot; title=&quot;实现上中下三行布局，顶部和底部最小高度是100px，中间自适</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/CSS/"/>
    
    
    <category term="选择器" scheme="https://superq314.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见的兼容性问题</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-22T11:33:42.226Z</published>
    <updated>2022-08-22T11:36:12.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一：不同浏览器的标签默认的外补丁和内补丁不同"><a href="#一：不同浏览器的标签默认的外补丁和内补丁不同" class="headerlink" title="一：不同浏览器的标签默认的外补丁和内补丁不同"></a>一：不同浏览器的标签默认的外补丁和内补丁不同</h3><p>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。</p><p>碰到频率:100%</p><p>解决方案：CSS里 *{margin:0;padding:0;}</p><p>备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的CSS文件开头都会用通配符*来设置各个标签的内外补丁是0。</p><h3 id="二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"><a href="#二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大" class="headerlink" title="二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大"></a>二：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大</h3><p>问题症状:常见症状是IE6中后面的一块被顶到下一行</p><p>碰到频率：90%（稍微复杂点的页面都会碰到，float布局最常见的浏览器兼容问题）</p><p>解决方案：在float的标签样式控制中加入 display:inline;将其转化为行内属性</p><p>备注：我们最常用的就是div+CSS布局了，而div就是一个典型的块属性标签，横向布局的时候我们通常都是用div float实现的，横向的间距设置如果用margin实现，这就是一个必然会碰到的兼容性问题。</p><h3 id="三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"><a href="#三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度" class="headerlink" title="三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度"></a>三：设置较小高度标签（一般小于10px），在IE6，IE7，遨游中高度超出自己设置高度</h3><p>问题症状：IE6、7和遨游里这个标签的高度不受控制，超出自己设置的高度</p><p>碰到频率：60%</p><p>解决方案：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p><p>备注：这种情况一般出现在我们设置小圆角背景的标签里。出现这个问题的原因是IE8之前的浏览器都会给标签一个最小默认的行高的高度。即使你的标签是空的，这个标签的高度还是会达到默认的行高。</p><h3 id="四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug"><a href="#四：行内属性标签，设置display-block后采用float布局，又有横行的margin的情况，IE6间距bug" class="headerlink" title="四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug"></a>四：行内属性标签，设置display:block后采用float布局，又有横行的margin的情况，IE6间距bug</h3><p>问题症状：IE6里的间距比超过设置的间距</p><p>碰到几率：20%</p><p>解决方案 ： 在display:block;后面加入display:inline;display:table;</p><p>备注：行内属性标签，为了设置宽高，我们需要设置display:block;(除了input标签比较特殊)。在用float布局并有横向的margin后，在IE6下，他就具有了块属性float后的横向margin的bug。不过因为它本身就是行内属性标签，所以我们再加上display:inline的话，它的高宽就不可设了。这时候我们还需要在display:inline后面加入display:talbe。</p><h3 id="五：图片默认有间距"><a href="#五：图片默认有间距" class="headerlink" title="五：图片默认有间距"></a>五：图片默认有间距</h3><p>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。</p><p>碰到几率：20%</p><p>解决方案：使用float属性为img布局</p><p>备注 ： 因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（我的一个学生使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以我禁止他们使用）</p><h3 id="六：标签最低高度设置min-height不兼容"><a href="#六：标签最低高度设置min-height不兼容" class="headerlink" title="六：标签最低高度设置min-height不兼容"></a>六：标签最低高度设置min-height不兼容</h3><p>问题症状：因为min-height本身就是一个不兼容的CSS属性，所以设置min-height时不能很好的被各个浏览器兼容</p><p>碰到几率：5%</p><p>解决方案：如果我们要设置一个标签的最小高度200px，需要进行的设置为：{min-height:200px; height:auto !important; height:200px; overflow:visible;}</p><p>备注：在B&#x2F;S系统前端开时，有很多情况下我们又这种需求。当内容小于一个值（如300px）时。容器的高度为300px；当内容高度大于这个值时，容器高度被撑高，而不是出现滚动条。这时候我们就会面临这个兼容性问题。</p><h3 id="七：透明度的兼容CSS设置"><a href="#七：透明度的兼容CSS设置" class="headerlink" title="七：透明度的兼容CSS设置"></a>七：透明度的兼容CSS设置</h3><p>一般在ie中用的是filter:alpha(opacity&#x3D;0);这个属性来设置div或者是块级元素的透明度，而在firefox中，一般就是直接使用opacity:0,对于兼容的，一般的做法就是在书写css样式的将2个都写上就行，就能实现兼容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一：不同浏览器的标签默认的外补丁和内补丁不同&quot;&gt;&lt;a href=&quot;#一：不同浏览器的标签默认的外补丁和内补丁不同&quot; class=&quot;headerlink&quot; title=&quot;一：不同浏览器的标签默认的外补丁和内补丁不同&quot;&gt;&lt;/a&gt;一：不同浏览器的标签默认的外补丁和内补丁</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS3</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/CSS3/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/CSS3/</id>
    <published>2022-08-22T09:11:30.609Z</published>
    <updated>2022-08-22T09:12:01.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="CSS3新增伪类有那些"><a href="#CSS3新增伪类有那些" class="headerlink" title="CSS3新增伪类有那些?"></a>CSS3新增伪类有那些?</h3><p><a href="https://www.cnblogs.com/L-xmin/p/12386238.html">CSS-伪元素和伪类（思维导图）</a></p><p>p:first-of-type 选择属于其父元素的第一个出现的p<br>p:last-of-type 选择属于其父元素最后一个出现的p</p><p>p:only-of-type 选择属于其父元素唯一的p元素<br>p:only-child 选择属于其父元素的唯一子元素（没有任何兄弟元素的p元素）</p><p>p:nth-child(2) 选择属于其父元素的第二个子元素</p><p>:enabled :disabled 表单控件的禁用状态。<br>:checked 单选框或复选框被选中。</p><h3 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h3><p><a href="http://caibaojian.com/css3/">CSS3参考手册属性列表</a>（链接中紫色链接表示该属性在CSS3有修改或者增加了新的属性值；橙色链接表示该属性是CSS3新增属性 ）</p><p>下面列出容易记的几个</p><ol><li>【媒体查询】（@media (min-width:600px)）</li><li>【嵌入web字体】（@font-face）</li><li>【过渡】（transition）与【动画】（animation）</li><li>【阴影】box-shadow</li><li>【边框】创建圆角（border-radius）、边框图片（border-image）</li><li>【背景】背景图片尺寸（background-size）、背景图片定位（background-origin）、背景裁剪（background-clip）、多重背景（background-image:url(1.jpg),url(2.jpg);）</li><li>【文字】允许长单词换行（word-wrap:break-word）、文字阴影（text-shadow）</li><li>【颜色】rgba和透明度opacity</li><li>【渐变】线性渐变（gradient）</li><li>【布局】flex、grid、多栏布局</li><li>【盒模型】box-sizing</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CSS3&quot;&gt;&lt;a href=&quot;#CSS3&quot; class=&quot;headerlink&quot; title=&quot;CSS3&quot;&gt;&lt;/a&gt;CSS3&lt;/h2&gt;&lt;h3 id=&quot;CSS3新增伪类有那些&quot;&gt;&lt;a href=&quot;#CSS3新增伪类有那些&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>重叠上下文</title>
    <link href="https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://superq314.github.io/2022/08/22/frontEnd/2CSS/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2022-08-22T08:16:24.566Z</published>
    <updated>2022-09-04T02:23:05.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="层叠上下文的定义"><a href="#层叠上下文的定义" class="headerlink" title="层叠上下文的定义"></a>层叠上下文的定义</h2><p>层叠上下文，是 HTML 中一个三维的概念。在 CSS2.1 规范中，每个盒模型的位置是三维的，分别是平面画布上的 <code>X轴</code>，<code>Y轴</code>以及表示层叠的 <code>Z轴</code>。一般情况下，元素在页面上沿 <code>X轴Y轴</code>平铺，我们察觉不到它们在 <code>Z轴</code>上的层叠关系。而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。</p><h2 id="层叠上下文的形成条件"><a href="#层叠上下文的形成条件" class="headerlink" title="层叠上下文的形成条件"></a>层叠上下文的形成条件</h2><p>文档中的层叠上下文由满足以下任意一个条件的元素形成：</p><ul><li>文档根元素（<code>&lt;html&gt;</code>）；</li><li><code>position</code> 值为 <code>absolute</code>（绝对定位）或 <code>relative</code>（相对定位）且 <code>z-index</code> 值不为 <code>auto</code> 的元素；</li><li><code>position</code> 值为 <code>fixed</code>（固定定位）或 <code>sticky</code>（粘滞定位）的元素；</li><li><code>flex(flex)</code> 容器的子元素，且 <code>z-index</code> 值不为 <code>auto</code>；</li><li><code>grid(grid)</code> 容器的子元素，且 <code>z-index</code> 值不为 <code>auto</code>；</li><li><code>opacity</code> 属性值小于 <code>1</code> 的元素</li><li><code>mix-blend-mode</code> 属性值不为 <code>normal</code> 的元素；</li><li>以下任意属性值不为 <code>none</code> 的元素：<ul><li><code>transform</code></li><li><code>filter</code></li><li><code>backdrop-filter</code></li><li><code>perspective</code></li><li><code>clip-path</code></li><li><code>mask</code> &#x2F; <code>mask-image</code> &#x2F; <code>mask-border</code></li></ul></li><li><code>isolation</code> 属性值为 <code>isolate</code> 的元素；</li><li><code>will-change</code> 值设定了任一属性而该属性在 <code>non-initial</code>值时会创建层叠上下文的元素</li><li><code>contain</code> 属性值为 <code>layout</code>、<code>paint</code> 或包含它们其中之一的合成值（比如 <code>contain: strict</code>、<code>contain: content</code>）的元素</li></ul><h2 id="层叠等级"><a href="#层叠等级" class="headerlink" title="层叠等级"></a>层叠等级</h2><ul><li>在同一个层叠上下文中，描述的是该层叠上下文中的层叠上下文元素在 <code>Z轴</code>上的上下顺序。</li><li>在普通元素中，描述的是这些普通元素在 <code>Z轴</code>上的上下顺序。</li></ul><h2 id="比较层叠等级的方法"><a href="#比较层叠等级的方法" class="headerlink" title="比较层叠等级的方法"></a>比较层叠等级的方法</h2><ol><li>普通元素的层叠等级优先由其所在的层叠上下文决定。</li><li>层叠等级的比较只有在当前层叠上下文元素中才有意义。不同层叠上下文中比较层叠等级是没有意义的。</li></ol><h2 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a>层叠顺序</h2><p><img src="https://ask.qcloudimg.com/http-save/6552462/9cb5g7jw6l.png?imageView2/2/w/1620"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;层叠上下文的定义&quot;&gt;&lt;a href=&quot;#层叠上下文的定义&quot; class=&quot;headerlink&quot; title=&quot;层叠上下文的定义&quot;&gt;&lt;/a&gt;层叠上下文的定义&lt;/h2&gt;&lt;p&gt;层叠上下文，是 HTML 中一个三维的概念。在 CSS2.1 规范中，每个盒模型的位置是三维</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="CSS" scheme="https://superq314.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>闭包</title>
    <link href="https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/%E9%97%AD%E5%8C%85/"/>
    <id>https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/%E9%97%AD%E5%8C%85/</id>
    <published>2022-08-17T03:12:26.192Z</published>
    <updated>2022-08-17T06:12:46.534Z</updated>
    
    <content type="html"><![CDATA[<p><strong>闭包</strong>：存在于嵌套的内部函数</p><blockquote><p>即，外部作用域可以访问内部作用域中的变量</p></blockquote><p><strong>创建闭包的最常见的方式</strong>：</p><blockquote><p>一个函数内部创建另一个子函数，创建的子函数可以访问到当前函数的局部变量。</p></blockquote><p><strong>闭包有两个常用的用途</strong>。</p><ol><li>使我们在函数外部能够访问到函数内部的变量。通过使用闭包，我们可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li>使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.将函数作为另一个函数的返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    n++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="title function_">a</span>(); <span class="comment">// 注意：函数名只是一个标识（指向函数的指针），而()才是执行函数；</span></span><br><span class="line"><span class="title function_">a1</span>();    <span class="comment">//1</span></span><br><span class="line"><span class="title function_">a1</span>();    <span class="comment">//2  第二次调用n变量还在内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将函数作为实参传递给另一个函数调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showDelay</span>(<span class="params">msg, time</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(msg)</span><br><span class="line">    &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showDelay</span>(<span class="string">&#x27;atguigu&#x27;</span>,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p><strong>闭包生命周期</strong><br>（1）产生：在嵌套内部函数定义执行完时就产生了（不是在调用）<br>（2）死亡：在嵌套的内部函数成为垃圾对象时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//此时闭包就已经产生了（函数提升，内部函数对象已经创建了）</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//var fn2 = function () &#123;</span></span><br><span class="line">    <span class="comment">// a++</span></span><br><span class="line">    <span class="comment">//  console.log(a)</span></span><br><span class="line"><span class="comment">//&#125; 闭包在此句完成才产生</span></span><br><span class="line">    <span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn1</span>() <span class="comment">//执行外部函数 指向fn2，导致fn2不释放</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">//3 执行内部函数</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">//4 执行内部函数</span></span><br><span class="line">f = <span class="literal">null</span> <span class="comment">// 闭包死亡（包含闭包的函数对象成为垃圾对象）</span></span><br></pre></td></tr></table></figure><p><strong>闭包应用</strong><br>闭包的应用：定义JS模块<br>具有特定功能的js文件<br>将所有的数据和功能封装在一个函数内部（私有的）<br>只向外暴露一个包含n个方法的对象或函数<br>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//私有数据</span></span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">&#x27;My atguigu&#x27;</span></span><br><span class="line">    <span class="comment">//操作数据的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doSomething()&#x27;</span> + msg.<span class="property">toUpperCase</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doOtherting</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doOtherting()&#x27;</span> + msg.<span class="property">toLowerCase</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向外暴露对象（给外部使用的方法）</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">doSomething</span>: doSomething,</span><br><span class="line">        <span class="attr">doOtherthing</span>:doOtherting</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">module</span> = <span class="title function_">myModule</span>()</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">doSomething</span>()</span><br><span class="line"><span class="variable language_">module</span>.<span class="title function_">doOtherthing</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line">    <span class="comment">//私有数据</span></span><br><span class="line">    <span class="keyword">var</span> msg = <span class="string">&#x27;My atguigu&#x27;</span></span><br><span class="line">    <span class="comment">//操作数据的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doSomething()&#x27;</span> + msg.<span class="property">toUpperCase</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doOtherting</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doOtherting()&#x27;</span> + msg.<span class="property">toLowerCase</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向外暴露对象（给外部使用的方法）    window.myModule = &#123;</span></span><br><span class="line">        <span class="attr">doSomething</span>: doSomething,</span><br><span class="line">        <span class="attr">doOtherthing</span>:doOtherting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>)myModule.<span class="title function_">doSomething</span>()</span><br><span class="line">mymodule.<span class="title function_">doOtherthing</span>()</span><br></pre></td></tr></table></figure><p><strong>闭包缺点</strong><br>（1）缺点</p><ul><li>函数执行完后，函数内的局部变量没有释放，占用内存时间会变长</li><li>容易造成内存泄漏</li></ul><p>（2）解决</p><ul><li>能不用闭包就不用</li><li>及时释放</li></ul><p>（3）内存溢出</p><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时，就抛出内存溢出的错误</li></ul><p>（4）内存泄漏</p><ul><li>占用的内存没有及时释放</li><li>内存泄漏积累多了就容易导致内存溢出</li><li>常见的内存泄露<ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//意外的全局变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  a = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有及时清理的计时器或回调函数</span></span><br><span class="line"><span class="keyword">var</span> intervalId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">//启动循环定时器后不清理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//clearInterval(intervalId)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a++</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title function_">fn1</span>()</span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"><span class="comment">//f = null</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;：存在于嵌套的内部函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即，外部作用域可以访问内部作用域中的变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;创建闭包的最常见的方式&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquot</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>作用域链</title>
    <link href="https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/Scope/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/Scope/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</id>
    <published>2022-08-17T02:41:54.533Z</published>
    <updated>2022-08-17T03:03:00.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h3><ul><li>作用域<ul><li>定义变量的作用区域，自有一套访问变量的规则，从而方便管理浏览器引擎如何在当前作用域以及嵌套的作用域中根据变量（标识符）进行变量查找</li></ul></li><li>作用域链<ul><li>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数</li><li>函数内部可以访问外部数据，从而形成了作用域链，但是外部没办法访问函数内部的数据</li><li>以<strong>链式查找方式</strong>取值</li></ul></li></ul><blockquote><p>作用域链的本质：指向变量对象的指针列表。</p><p>变量对象：包含执行环境中所有变量和函数的对象</p><p>作用域链的前端始终都是当前执行上下文的变量对象。</p><p>全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p><p>当我们查找一个变量时，如果当前执行环境中没有找到，我们可以沿着作用域链向后查找。</p></blockquote><p>详细资料可以参考：</p><p><a href="https://link.juejin.cn/?target=http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html" title="http://cavszhouyou.top/JavaScript%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html">《JavaScript 深入理解之作用域链》</a></p><p><a href="https://juejin.cn/post/6844904126216830984" title="https://juejin.cn/post/6844904126216830984">「前端料包」深究JavaScript作用域（链）知识点和闭包</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;作用域和作用域链&quot;&gt;&lt;a href=&quot;#作用域和作用域链&quot; class=&quot;headerlink&quot; title=&quot;作用域和作用域链&quot;&gt;&lt;/a&gt;作用域和作用域链&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;作用域&lt;ul&gt;
&lt;li&gt;定义变量的作用区域，自有一套访问变量的规则，从而方便管理</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文栈</title>
    <link href="https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/executionContext/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/"/>
    <id>https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/executionContext/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</id>
    <published>2022-08-17T02:20:16.044Z</published>
    <updated>2022-08-17T02:41:38.708Z</updated>
    
    <content type="html"><![CDATA[<p>（1）在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象<br>（2）在全局执行上下文（window）确定后，将其添加到栈中（压栈）<br>（3）在函数执行上下文创建后，将其添加到栈中（压栈）<br>（4）在当前函数执行完后，将栈顶的对象移除（出栈）<br>（5）当所有的代码执行完后，栈中只剩下window</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;（1）在全局代码执行前，JS引擎就会创建一个栈来存储管理所有的执行上下文对象&lt;br&gt;（2）在全局执行上下文（window）确定后，将其添加到栈中（压栈）&lt;br&gt;（3）在函数执行上下文创建后，将其添加到栈中（压栈）&lt;br&gt;（4）在当前函数执行完后，将栈顶的对象移除（出栈）&lt;b</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文</title>
    <link href="https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/executionContext/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://superq314.github.io/2022/08/17/frontEnd/3JavaScript/advancedFunction/executionContext/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2022-08-17T02:19:51.068Z</published>
    <updated>2022-08-17T03:03:02.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码分类（位置）"><a href="#代码分类（位置）" class="headerlink" title="代码分类（位置）"></a>代码分类（位置）</h3><ul><li>全局代码</li><li>函数（局部）代码</li></ul><h3 id="全局执行上下文"><a href="#全局执行上下文" class="headerlink" title="全局执行上下文"></a>全局执行上下文</h3><p>在执行全局代码前将window确定为全局执行上下文<br>对全局数据进行预处理<br>var定义的全局变量 &#x3D;&#x3D;&gt;underfined，添加为window的属性<br>function声明的全局函数 &#x3D;&#x3D;&gt; 赋值（fun），添加为window的方法<br>this &#x3D;&#x3D;&gt; 赋值（window）</p><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><p>在调用函数，准备执行函数体之前，创建对应的函数执行上下文对象<br>对局部数据进行预处理<br>形参变量 &gt; 赋值（实参）&gt; 添加为执行上下文的属性<br>argument &#x3D;&#x3D;&gt;赋值（实参列表），添加为执行上下文的属性<br>var定义的局部变量 &#x3D;&#x3D;&gt; undefined，添加为执行上下文的属性<br>function声明的函数 &#x3D;&#x3D;&gt;赋值（fun），添加为执行上下文的方法<br>this &#x3D;&#x3D;&gt; 赋值（调用函数的对象）<br>开始执行函数体代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;代码分类（位置）&quot;&gt;&lt;a href=&quot;#代码分类（位置）&quot; class=&quot;headerlink&quot; title=&quot;代码分类（位置）&quot;&gt;&lt;/a&gt;代码分类（位置）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;全局代码&lt;/li&gt;
&lt;li&gt;函数（局部）代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://superq314.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="https://superq314.github.io/2022/08/16/frontEnd/3JavaScript/advancedFunction/prototype/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://superq314.github.io/2022/08/16/frontEnd/3JavaScript/advancedFunction/prototype/%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2022-08-16T08:44:14.675Z</published>
    <updated>2022-08-17T02:13:53.505Z</updated>
    
    <content type="html"><![CDATA[<h5 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h5><ul><li>访问一个对象的属性值<ul><li>先在自身属性中查找，找到返回</li><li>如果没有，再沿着 _ _ proto _ _ 这条链向上查找，找到返回</li><li>如果最终没找到，返回underfined</li></ul></li><li>别名：隐式原型链</li><li>作用：查找对象的属性（方法）</li></ul><h5 id="（2）构造函数-x2F-原型实例对象的关系"><a href="#（2）构造函数-x2F-原型实例对象的关系" class="headerlink" title="（2）构造函数&#x2F;原型实例对象的关系"></a>（2）构造函数&#x2F;原型实例对象的关系</h5><p><img src="https://img-blog.csdnimg.cn/ddd25448c2a74557aa9e4a62377ac0fa.png" alt="在这里插入图片描述"></p><h5 id="（3）构造函数-x2F-原型实例对象的关系2"><a href="#（3）构造函数-x2F-原型实例对象的关系2" class="headerlink" title="（3）构造函数&#x2F;原型实例对象的关系2"></a>（3）构造函数&#x2F;原型实例对象的关系2</h5><p><img src="https://img-blog.csdnimg.cn/42db4263f2634325b0f331f49a8b17c1.png" alt="在这里插入图片描述"></p><h5 id="（4）相关问题"><a href="#（4）相关问题" class="headerlink" title="（4）相关问题"></a>（4）相关问题</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.函数的显示原型指向的对象默认时空Object实例对象（但Object不满足）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//2.所有函数都是Function的实例（包含Function）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">__protp__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">//3.Object的原型对象是原型链尽头</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>) <span class="comment">//null</span></span><br></pre></td></tr></table></figure><h4 id="4、原型链属性问题"><a href="#4、原型链属性问题" class="headerlink" title="4、原型链属性问题"></a>4、原型链属性问题</h4><ol><li>读取对象的属性值时：会自动到原型链中查找</li><li>设置对象的属性值时：不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置其值</li><li>方法一般定义在原型中，属性一般通过构造函数定义在对象本身上</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;原型链&quot;&gt;&lt;a href=&quot;#原型链&quot; class=&quot;headerlink&quot; title=&quot;原型链&quot;&gt;&lt;/a&gt;原型链&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;访问一个对象的属性值&lt;ul&gt;
&lt;li&gt;先在自身属性中查找，找到返回&lt;/li&gt;
&lt;li&gt;如果没有，再沿着 _ _ prot</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="JavaScript" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JavaScript/"/>
    
    
    <category term="JS" scheme="https://superq314.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>样式与选择器</title>
    <link href="https://superq314.github.io/2022/08/09/frontEnd/2CSS/%E6%A0%B7%E5%BC%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://superq314.github.io/2022/08/09/frontEnd/2CSS/%E6%A0%B7%E5%BC%8F%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/</id>
    <published>2022-08-09T13:59:50.858Z</published>
    <updated>2022-09-04T07:12:06.430Z</updated>
    
    <content type="html"><![CDATA[<p>css样式声明（定义）由两部分组成，形式如下：<br><code>选择器&#123; 样式；&#125;</code><br>“选择器”指明了{}中的“样式”的作用对象，也就是“样式”作用于网页中的哪些元素。</p><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">标签</button></li><li class="tab"><button type="button" data-href="#super-2">属性选择</button></li><li class="tab"><button type="button" data-href="#super-3">类（.class）</button></li><li class="tab"><button type="button" data-href="#super-4">ID（#id）</button></li><li class="tab"><button type="button" data-href="#super-5">分级（单个）</button></li><li class="tab"><button type="button" data-href="#super-6">组合（多个）</button></li><li class="tab"><button type="button" data-href="#super-7">伪类</button></li><li class="tab"><button type="button" data-href="#super-8">伪元素</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>对应html代码中的标签。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>[att~&#x3D;val]<br>代表一个有att属性且值是一个由空格字符间隔的单词列表，其中之一恰好是“val”的元素。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class~=<span class="string">&#x27;title&#x27;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;article title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> // 选择这个</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;article content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[att^&#x3D;val]<br>选择att属性的值以val开头（包括val）的元素。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class|=<span class="string">&#x27;CN&#x27;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;CN-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> // 选择这个</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;EN-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[att$&#x3D;val]<br>选择att属性的值以val结尾（包括val）的元素。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class$=<span class="string">&#x27;special&#x27;</span>]</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;article test-special&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> // 选择这个</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;article normal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><p>允许以一种独立于文档元素的方式来指定样式。<br>同一个类选择器可以指定给不同的多个元素。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><p>使用元素 id 作为标示来指定样式。<br>ID 选择器前面有一个 # 号。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-5"><p>以空格分隔，只作用在一个选择器上。<br>只作用a的class-p1的选择器上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 类选择器a中的 类选择器class-p1*/</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span> <span class="selector-class">.class-p1</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    滚开</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;class-p1&quot;</span>&gt;</span></span><br><span class="line">    我是谁？</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-6"><p>以逗号进行分隔，作用在多个选择器上。<br><code>.class-p1, .class-p2{ color: orange; }</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-7"><p>伪类：存在 <code>DOM</code>文档中，逻辑上存在，但在 <code>DOM</code>文档树中无需标识。</p><p><img src="https://img2020.cnblogs.com/blog/1019981/202004/1019981-20200414223219420-1210069826.png" alt="img"></p><p>用于向某些选择器添加特殊的效果。</p><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">链接伪类</button></li><li class="tab"><button type="button" data-href="#super-2">结构伪类</button></li><li class="tab"><button type="button" data-href="#super-3">UI元素状态伪类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p><code>&lt;a&gt;&lt;/a&gt;</code>此标签的伪类选择器有顺序，顺序具体如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: <span class="number">#FF0000</span>&#125;        <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: <span class="number">#00FF00</span>&#125;    <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>: <span class="number">#FF00FF</span>&#125;    <span class="comment">/* 鼠标移动到链接上移入效果 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: <span class="number">#0000FF</span>&#125;    <span class="comment">/* 用户点击链接后的效果 */</span></span><br></pre></td></tr></table></figure><p>可以简洁记忆：l v h a 记住四个属性的首字母即可。<br>注意：如果不按顺序编写此伪类标签无效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><table><thead><tr><th align="center">结构伪类选择器</th><th>功能描述</th></tr></thead><tbody><tr><td align="center">E:first-child</td><td>选择所有元素，且E元素是其父元素中第一个</td></tr><tr><td align="center">E:last-child</td><td>选择所有元素，且E元素是其父元素中最后一个</td></tr><tr><td align="center">E:root</td><td>选择E元素所在文档的根元素。HTML中，根元素始终是html</td></tr><tr><td align="center">E F:nth-child(n)</td><td>选择父元素E的第n个子元素F。<br />n可以是整数(1，2，3)、关键字(even，odd)，n值起始值为1，而不是0</td></tr><tr><td align="center">E F:nth-last-child(n)</td><td>选择父元素E的倒数第n个子元素F</td></tr><tr><td align="center">E:nth-of-type(n)</td><td>选择所有在父元素内的第n个E元素</td></tr><tr><td align="center">E:nth-last-of-type(n)</td><td>选择所有在父元素内的倒数第n个E元素</td></tr><tr><td align="center">E:first-of-type</td><td>选择所有在父元素内具有指定类型的第一个E元素，与E:nth-of-type(1)等同</td></tr><tr><td align="center">E:last-of-type</td><td>选择所有在父元素内具有指定类型的最后一个E元素，与E:nth-last-of-type(1)等同</td></tr><tr><td align="center">E:only-child</td><td>选择元素，且E元素是父元素的唯一子元素，没有别的元素</td></tr><tr><td align="center">E:only-of-type</td><td>选择元素，且E元素是父元素中唯一类型的子元素。即多个子元素都是E元素</td></tr><tr><td align="center">E:empty</td><td>选择没有子元素的E元素，而且E元素也不包含任何文本节点</td></tr><tr><td align="center">E:before</td><td>选择E元素，在E元素之前插入内容</td></tr><tr><td align="center">E:after</td><td>选择E元素，在E元素之后插入内容</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><table><thead><tr><th align="center">UI元素状态伪类选择器</th><th>功能描述</th></tr></thead><tbody><tr><td align="center">E:checked</td><td>选择所有选中的表单元素。例如复选框、单选框</td></tr><tr><td align="center">E:enabled</td><td>匹配所有启用的表单元素</td></tr><tr><td align="center">E:disabled</td><td>匹配所有禁用的表单元素</td></tr><tr><td align="center">E:focus</td><td>匹配所有获得光标焦点时的表单元素</td></tr><tr><td align="center">E:read-write</td><td>选择处于非只读状态的E元素</td></tr><tr><td align="center">E:read-only</td><td>匹配处于只读状态的E元素</td></tr><tr><td align="center">E:valid</td><td>匹配E元素诸如required、pattern等属性所指定的检查或元素内容符合元素的规定格式时的样式</td></tr><tr><td align="center">E:invalid</td><td>匹配E元素诸如required、pattern等属性所指定的检查或元素内容不符合元素的规定格式时的样式</td></tr><tr><td align="center">E:required</td><td>选择允许使用required属性并已使用该属性的input、select和textarea元素</td></tr><tr><td align="center">E:optional</td><td>选择允许使用required属性但未使用该属性的input、select以及textarea元素</td></tr><tr><td align="center">E::selection</td><td>选择被用户选取的E元素部分。使用两个冒号:: 是伪元素</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-8"><p>伪元素可以创建一些文档语言无法创建的虚拟元素。</p><ul><li><code>::before</code> 在某个元素之前插入一些内容</li><li><code>::after</code> 在某个元素之后插入一些内容<ul><li>需要配合 <code>content: &#39;&#39;</code>使用</li></ul></li><li><code>::first-line</code> 为某个元素的第一行文字使用样式</li><li><code>::first-letter</code> 为某个元素中的文字的首字母或字使用样式</li><li><code>::selection</code> 用于被用户选中的内容<br><a href="https://img2020.cnblogs.com/blog/1019981/202003/1019981-20200330192148472-787117900.png"><img src="https://img2020.cnblogs.com/blog/1019981/202003/1019981-20200330192148472-787117900.png" alt="img"></a></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="通配符选择器（-）"><a href="#通配符选择器（-）" class="headerlink" title="通配符选择器（*）"></a>通配符选择器（*）</h3><p>CSS2 引入了一种新的简单选择器 - 通配选择器，显示为一个星号（*）。该选择器可以与任何元素匹配，就像是一个通配符。<br><code>* &#123; color: red; &#125;</code>：可以使文档中的每个元素都为红色</p><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><div class="tabs" id="super"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#super-1">后代选择器（A B）</button></li><li class="tab"><button type="button" data-href="#super-2">子代选择器（A > B）</button></li><li class="tab"><button type="button" data-href="#super-3">相邻兄弟选择器（A + B）</button></li><li class="tab"><button type="button" data-href="#super-4">通用兄弟选择器（A ~ B）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="super-1"><p>可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-2"><p>与后代选择器相比，子元素选择器只能选择作为某元素子元素的元素。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="super-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><table><thead><tr><th align="center">层次选择器</th><th align="center">类型</th><th>功能描述</th></tr></thead><tbody><tr><td align="center">A B</td><td align="center">后代选择器</td><td>B元素被包含A元素内，是其子&#x2F;孙级元素</td></tr><tr><td align="center">A &gt; B</td><td align="center">子代选择器</td><td>B元素被包含A元素内，是其子级元素</td></tr><tr><td align="center">A + B</td><td align="center">相邻兄弟选择器</td><td>B元素与A元素同级，并紧随其后</td></tr><tr><td align="center">A ~ B</td><td align="center">通用兄弟选择器</td><td>B元素与A元素同级，是其身后任一个</td></tr></tbody></table><h3 id="样式优先级"><a href="#样式优先级" class="headerlink" title="样式优先级"></a>样式优先级</h3><p>内联样式 &gt;  css选择器样式 &gt; link 引入的样式</p><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>作用：浏览器根据优先级来决定给元素应用哪个样式。</p><p>!important &gt; 行内（内联） &gt; id 选择器 &gt; 类选择器 &#x3D; 属性选择器 &#x3D; 伪类选择器 &gt; 标签选择器 &gt; 通配符选择器 &gt; 继承样式</p><p><a href="https://gitee.com/souyunku/NewDevBooks/blob/master/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">权重算法</a>：</p><p>（0，0，0，0）&#x3D;&#x3D;&gt;</p><blockquote><p>第一个 0 对应的是 <code>!important</code> 的个数<br>第二个 0 对应的是 <code>id</code> 选择器的个数<br>第三个 0 对应的类选择器的个数<br>第四个 0 对应的是标签选择器的个数<br>这就是当前选择器的权重。</p></blockquote><p>比较：<br>先从第一个 0 开始比较，如果第一个 0 大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推</p><ul><li><code>!important</code>声明的样式优先级最高，如果冲突再进行计算</li><li>虽然 <code>!important</code>无敌和 <code>style</code>一人之下，但都应尽量避免使用</li><li>如果优先级相同，则选择最后出现的样式</li><li>继承得到的样式的优先级最低</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;css样式声明（定义）由两部分组成，形式如下：&lt;br&gt;&lt;code&gt;选择器&amp;#123; 样式；&amp;#125;&lt;/code&gt;&lt;br&gt;“选择器”指明了{}中的“样式”的作用对象，也就是“样式”作用于网页中的哪些元素。&lt;/p&gt;
&lt;h3 id=&quot;基本选择器&quot;&gt;&lt;a href=&quot;#基本选</summary>
      
    
    
    
    <category term="前端开发" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSS" scheme="https://superq314.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/CSS/"/>
    
    
    <category term="选择器" scheme="https://superq314.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://superq314.github.io/2022/08/01/frontEnd/3JavaScript/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%89%B9%E6%95%88/"/>
    <id>https://superq314.github.io/2022/08/01/frontEnd/3JavaScript/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%89%B9%E6%95%88/</id>
    <published>2022-08-01T13:25:20.121Z</published>
    <updated>2022-08-01T13:25:28.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动端特效"><a href="#移动端特效" class="headerlink" title="移动端特效"></a>移动端特效</h2><p><a href="https://link.juejin.cn/?target=https://www.bilibili.com/video/BV1Sy4y1C7ha?p=331" title="https://www.bilibili.com/video/BV1Sy4y1C7ha?p=331">www.bilibili.com/video/BV1Sy…</a></p><h3 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h3><p>移动端浏览器兼容性较好，不需要考虑JS的兼容性问题，可放心食用原生js</p><p>移动端也独特的地方，比如：<strong>触屏事件touch（触屏事件）</strong> ，Android和IOS都有</p><p> <strong>touch对象代表一个触摸点</strong> 。触摸点可能是手指，也可能是触摸笔。触屏事件可响应用户对屏幕或触控板的操作</p><p>常见的触屏事件：</p><table><thead><tr><th>触屏touch事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>触摸到DOM元素时触发</td></tr><tr><td>touchmove</td><td>在DOM元素上滑动时触发</td></tr><tr><td>touchend</td><td>在DOM元素上移开时触发</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;移动端特效&quot;&gt;&lt;a href=&quot;#移动端特效&quot; class=&quot;headerlink&quot; title=&quot;移动端特效&quot;&gt;&lt;/a&gt;移动端特效&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://link.juejin.cn/?target=https://www.bilibi</summary>
      
    
    
    
    
  </entry>
  
</feed>
